#+title: function compose, type cut, and the algebra of logic
#+author: 谢宇恒 / XIE Yuheng

------

- in the chiso, natural deduction iso to lambda calculus
  but what dose sequent calculus iso to ?

------

- mini table

  | minimalist | hiskimplet  | type system |
  |------------+-------------+-------------|
  | scheme     | one week    | dynamic     |
  | forth      | one weekend | non !!!     |

------

- learn to implement forth in Y minutes

  - data-stack
    #+begin_src return-stack
    > -- [ data ] -- [ data ] -- [ data ]
    #+end_src

  - return-stack
    #+begin_src return-stack
           (jo)
           (jo)        (jo)
    | -- [ (jo) ] -- [ (jo) ] -- [ (jo) ]
           (jo)        (jo)        (jo)
                                   (jo)
    #+end_src

  - in forth
    #+begin_src cicada-nymph
    : sq        dup mul ;
    : power4    sq sq   ;
    #+end_src

  - with 4 in data-stack
    call power4
    ------
    #+begin_src return-stack
    > -- [ 4 ]
    #+end_src
    ------
    #+begin_src return-stack
    | -- [ (sq) ]
           (sq)
    #+end_src
    ------
    #+begin_src return-stack
           (sq)
    | -- [ (sq) ] -- [ (dup) ]
                       (mul)
    #+end_src
    ------
    #+begin_src return-stack
           (sq)        (dup)
    | -- [ (sq) ] -- [ (mul) ]
    #+end_src
    ------
    #+begin_src return-stack
    > -- [ 4 ] -- [ 4 ]
    #+end_src
    ------
    #+begin_src return-stack
    :tail-call (mul)
    #+end_src
    ------
    #+begin_src return-stack
    > -- [ 16 ]
    #+end_src
    ------
    #+begin_src return-stack
    :tail-call (sq)
    #+end_src
    ------
    #+begin_src return-stack
    | -- [ (dup) ]
           (mul)
    #+end_src
    ------
    #+begin_src return-stack
           (dup)
    | -- [ (mul) ]
    #+end_src
    ------
    #+begin_src return-stack
    > -- [ 16 ] -- [ 16 ]
    #+end_src
    ------
    #+begin_src return-stack
    :tail-call (mul)
    #+end_src
    ------
    #+begin_src return-stack
    > -- [ 256 ]
    #+end_src
    ------
    #+begin_src return-stack
    | --
    #+end_src
    ------

  - *[ threaded code interpreter, explained ! ]*

------

- why call it 'compose' ?

  #+begin_src cicada-nymph
  : h f g ;
  #+end_src

  #+begin_src scheme
    f    g
  A -> B -> C
   \___>___/
       h
  #+end_src

  - *[ function compose, explained ! ]*

------

- it is plain to see how a type system of forth could be !

  #+begin_src scheme
  dup : (:t -> :t :t)
  mul : (int int -> int)
  sq  : (int -> int)
  #+end_src
  ------
  #+begin_src scheme
  :t :t     int
  ----- * -------
   :t     int int
  #+end_src
  ------
  #+begin_src scheme
  (<unify> :t = int)
  #+end_src
  ------
  #+begin_src scheme
  int
  ---
  int
  #+end_src
  ------
  #+begin_src scheme
  so we have
  sq  : (int -> int)
  #+end_src

  - *[ type cut, explained ? ]*

  - but why call it 'cut' ?

------

- 'the algebra of logic' first

  - an example of 'product'

    #+begin_src scheme
    f : A B -> C D
    g : D F -> G H
    ----------------
    ? : F A B -> C G H
    #+end_src
    ------
    #+begin_src scheme
    F A B
          <- f
    F C D
          <- 1-2-swap
    C D F
          <- g
    C G H
    #+end_src
    ------
    #+begin_src scheme
        f        : A B -> C D
        g        : D F -> G H
    -----------------------------
    f 1-2-swap g : F A B -> C G H
    #+end_src

  - another example of 'product'
    ------
    #+begin_src scheme
    f : A B -> C D
    g : D F -> G H
    --------------------
    ? : A B D F -> C D G H
    #+end_src
    ------
    #+begin_src scheme
    A B D F
          <- g
    A B G H
          <- 2-2-swap
    G H A B
          <- f
    G H C D
          <- 2-2-swap
    C D G H
    #+end_src
    ------
    #+begin_src scheme
             f            : A B -> C D
             g            : D F -> G H
    ------------------------------------------
    g 2-2-swap f 2-2-swap : A B D F -> C D G H
    #+end_src
    ------

  - production
    #+begin_src scheme
    C D   G H
    --- * ---
    A B   D F

    free to do permutation
    product is not just a '*'
    plus also is not just a '+'
    #+end_src

  - another example of product

    #+begin_src scheme
    f : A
    g : B
    ---------
    f g : A B
    #+end_src
    ------
    #+begin_src scheme
    f : (-> A)
    g : (-> B)
    --------------
    f g : (-> A B)
    #+end_src

  - *[ the algebra of logic, explained ? ]*

------

- chiso as an iso of 2-cat
  (a pair of functors that are reverse to each other)
  (only heuristiclly)

  - chiso

    #+begin_src cicada-language
    deduction system    ~~~===    language to record
      (i.e. logic)               meta data of function
                                    (i.e. type)
          |                     [for runtime safety]
          |
          |                              |
          |                              |
          |                              |

    language to record  ~~~===  programming language
     deduction steps              (i.e. function)
      (i.e. proof)
    [for human communication]
    #+end_src

  - natural deduction

    #+begin_src cicada-language
    natural deduction

          |
          |
          |
                          decides
    a language to record ========> syntax of lambda calculus
        proof by ND                (prefix application syntax)
    #+end_src
    ------
    #+begin_src scheme
    x : A :- m : B
    ---------------- (-> intro)
    λ x . m : A -> B
    #+end_src
    ------
    #+begin_src scheme
    m : A -> B
    n : A
    ----------- (-> elim)
    (m n) : B
    #+end_src

  - sequent calculus

    #+begin_src cicada-language
    sequent calculus

          |
          |
          |
                          decides
    a language to record ========> postfix composition syntax
        proof by SC
    #+end_src

------

- about my implementations

  - sequent1 : implemented by term-rewriting-system

  - sequent0 : stack-based implementation

  - forth to sequent
    add two more stacks
    and enrich the data structure

    | forth        | sequent0                      |
    |--------------+-------------------------------|
    | data-stack   | data-stack                    |
    | return-stack | return-stack (compose) (cut)  |
    |              | binding-stack (commit) (undo) |
    |              | goal-stack (cover) (unify)    |

  - binding-stack & goal-stack
    just like prolog VM without backtracing
    - cover as
      the poset structure of the subsumption-lattice
    - unify as
      the meet operation (greatest lower bound)
      of the subsumption-lattice

------

- example program

------

- example of proof

------
