#+title: Martin-Löf

* (1972) infinite terms and a system of natural deduction

* (1975) about models for intuitionistic type theories and the notion of definitional equality

*** 1 models

* (1975) syntax and semantics of the language of primitive recursive functions

* (1976) a note to michael dummett

* (1983) notes on the domain interpretation of type theory

* (1987) the logic of judgements

  - [the hand writing is too hard to read]

* (1987) truth of a proposition, evidence of a judgment, validity of a proof

* (1990) mathematics of infinity

* (1990) a path from logic to metaphysics

* (1992) substitution calculus (notes from a lecture given in göteborg)

* (1994) analytic and synthetic judgements in type theory

  - 指出 brouwer 受 kant 影響

* (1998) truth and knowability: on the principles c and k of michael dummett

* >< (2008) hilbert brouwer controversy resolved?

* (2009) one hundred years of zermelo's axiom of choice. what was the problem with it?

* (2013) verificationism then and now

* (2014) making sense of normalization by evaluation

* others

*** [note] predicate vs type-constructor

***** observation 1

      - 'even?' can be defined as a predicate on type <nat>
        (: even? (-> <nat> -- <bool>))

      - while it can also be defined as a type-constructor
        #+begin_src jojo
        (+type <even> (-> (. .num <nat>) -- <<type>>)
          zero (-> -- zero <even>)
          plus-two (-> (. .pre :m <even>)
                    -- :m succ succ <even>))

        (proof (-> -- zero succ succ <even>)
          zero plus-two)
        #+end_src

      - <nat> is so simple,
        we do not really have to define <even>
        we can simply write 'even?'

      - we can view 'even?' as generating a proof for each {:n <even>}
        or even better, it can generate a negation of {:n <even>}

        - although in normal implementation of 'even?'
          it output a <bool> instead of a proof.

***** observation 2

      - 'add-associative' is defined as
        #+begin_src jojo
        (+proof add-associative
          (-> (: :x :y :z <nat>)
           -- :x :y add :z add
              :x :y :z add add <eq>)
          (match :z
            zero refl
            succ [:x :y :z.pre recur {succ} eq-apply]))
        #+end_src

      - it can be viewed as equivalence between two functions
        {2-1-sawp add add} == {add add}

      - while 'add-commutative' can be viewed as
        {sawp add} == {add}

      - the space of functions like (-> <nat> <nat> -- <nat>)
        is so complicated,

        we do not have a basic predicate for equivalence
        between functions in such space.

        we have to prove each instance of equivalence.
        for example, 'add-commutative' proves {swap add} == {add}

***** observation 3

      - computation can happen during type-checking.
        applying a predicate is a computation.

        is it meaningful to use predicate in type?

***** >< LTEQ

      - just like EVEN

***** >< LT

      - x -
        基本等词 与 unification 不同
        基本等词 是唯一允许的 predicate
        基本等词 可以用来做否定

      - k -
        如果基本等词是 predicate
        那么为何不允许别的 predicate 呢?

      - x -
        在 coq 中找例子

*** programming in martin lof's type theory

*** intuitionistic type theory -- from plato.stanford.edu

***** info

      - at https://plato.stanford.edu/entries/type-theory-intuitionistic/

      - by Peter Dybjer
        and Erik Palmgren

***** intro

      - an overview of the most important aspects of intuitionistic type theory
        a kind of "extended abstract"
        It is meant for a reader who is already somewhat familiar with the theory

      - Section 2 on the other hand,
        is meant for a reader who is new to intuitionistic type theory
        but familiar with traditional logic,
        including propositional and predicate logic,
        arithmetic, and set theory.
        Here we informally introduce several aspects
        which distinguishes intuitionistic type theory
        from these traditional theories.

      - In Section 3 we present a basic version of the theory,
        close to Martin-Löf’s first published version from 1972.
        The reader who was intrigued by the informality of Section 2
        will now see in detail how the theory is built up.

      - Section 4 then presents a number of important extensions of the basic theory.
        In particular, it emphasizes the central role of
        inductive (and inductive-recursive) definitions.

      - Section 5 introduces the underlying philosophical ideas
        including the theory of meaning developed by Martin-Löf.

      - While Section 5 is about philosophy and foundations,
        Section 6 gives an overview of mathematical models of the theory.

      - In Section 7 finally,
        we describe several important variations
        of the core Martin-Löf "intensional" theory described in Section 3 and 4.

***** 1. Overview

      - not only about how should we play [by constructive proof]
        but also about what should we play with [constructive mathematical objects]
        thus it is more than math
        it is philosophy

***** 2. Propositions as Types

******* 2.1 Intuitionistic Type Theory: a New Way of Looking at Logic?

        - Intuitionistic type theory
          offers a new way of analyzing logic,
          mainly through its introduction of
          *explicit proof objects*.

********* 2.1.1 A Type Theory

          - This provides
            a direct computational interpretation of logic,
            since there are computation rules for proof objects.

********* 2.1.2 An intuitionstic logic with proof-objects

          - example :
            #+begin_src jojo
            (-> (: :m :n <nat>) :m zero <gt>
             -- (: :q :r <nat>) :m :q mul :r add :n <eq>)

            (-> (: :m :n N) :m zero GT
             -- (: :q :r N) :m :q mul :r add :n I)

            (note
              where GT is defined as type alias :
              (: :x :y GT)
              (: :y :z add inc :x I))
            #+end_src

********* 2.1.3 An extension of first-order predicate logic

          - x -
            in predicate logic (first-order or higher)
            the domain of predicate can be viewed as set.

            [suppose we use set theory
            to specify the denotational semantics
            of the logic system.]

            cartesian product will be the main way
            of constructing new sets.
            (new domain of predicate)

            function is defined as special relation (predicate)
            equivalence is defined special relation
            - which is wrong, because
              "meaningful distinctions deserve to be maintained."

          - difference from predicate logic :
            in intuitionistic type theory
            we can introduce unspecified family symbols.
            [type-constructor]

********* 2.1.4 A logic with several forms of judgment

          - the type system of intuitionistic type theory is very expressive.
            1. well-formedness of a type
            2. well-typedness of a term with respect to a type
            3. equality judgments for types and terms

          - while predicate logic focus on the sole judgment
            expressing the truth of a proposition.

********* 2.1.5 Semantics

          - Semantics of predicate logic
            can be established by Tarski's model theory.

          - In intuitionistic type theory,
            Semantics is BHK-interpretation of logic.

          - Tarski semantics is usually presented meta-mathematically,
            and assumes set theory.

          - Martin-Löf’s meaning theory of intuitionistic type theory
            should be understood directly and "pre-mathematically",
            that is, without assuming a meta-language such as set theory.

********* 2.1.6 A functional programming language

          - different from normal functional programming language :
            1. it has dependent types
            2. all typable programs terminate

******* 2.2 The Curry-Howard Correspondence

******* 2.3 Sets of Proof-Objects

        - x -
          proof theory.
          program is record of deduction steps i.e. proof.

******* 2.4 Dependent Types

******* 2.4 Propositions as Types in Intuitionistic Type Theory

        - With propositions as types,
          predicates become dependent types.
          For example, the predicate Prime(x)
          becomes the type of proofs that x is prime.

        - example :
          #+begin_src jojo
          (-> (: :m N) -- (: :n N) :m :n LT, :n Prime)
          #+end_src

        - x -
          in my sequent calculus :
          #+begin_src jojo
          [∀ m : N, ∃ n : N ...]
          (-> (: :m N)
           -- (: :n N) ...)

          [∃ n : N ...]
          (->
           -- (: :n N) ...)

          [∀ m : N, ∃ n : N, ∀ p : N ...]
          (-> (: :m N)
           -- (: :n N)
              (-> (: :p N)
               -- ...))

          [∀ m : N, ∃ n : N, ∀ p : N, ∃ q : N ...]
          (-> (: :m N)
           -- (: :n N)
              (-> (: :p N)
               -- (: :q N) ...))
          #+end_src

***** 3. Basic Intuitionistic Type Theory

******* 3.1 Judgments

        - In Martin-Löf (1996)
          a general philosophy of logic is presented
          where the traditional notion of judgment
          is expanded and given a central position.
          A judgment is no longer just an affirmation
          or denial of a proposition,
          but a general act of knowledge.

******* 3.2 Judgment Forms

        - four forms of judgment :
          1. A : type   -- A is a well-formed type
          2. a : A      -- a has type A
          3. A = A'     -- A and A' are equal types
          4. a = a' : A -- a and a' are equal elements of type A

******* 3.3 Inference Rules

        - rules about type formers [type-constructors]
          are classified as :
          1. formation
          2. introduction
          3. elimination
          4. equality

******* 3.4 Intuitionistic Predicate Logic

        - take Π as an example :

          - formation

          - introduction

          - elimination
            #+begin_src jojo
            (: f (-> (: x A) -- B)) (: a A)
            ----------------------------------------
            (: a f B [x := a])
            #+end_src

            - x -
              in (: f (-> (: x A) -- B))
              B is not a type but only a syntactic form
              x might occurs in B
              this is why those rules are not good

          - equality

******* 3.5 Natural Numbers
******* 3.6 The Universe of Small Types
******* 3.7 Propositional Identity
******* 3.8 The Axiom of Choice is a Theorem

***** 4. Extensions

******* 4.1 The Logical Framework
******* 4.2 A General Identity Type Former
******* 4.3 Well-Founded Trees
******* 4.4 Iterative Sets and CZF
******* 4.5 Inductive Definitions
******* 4.6 Inductive-Recursive Definitions

***** 5. Meaning Explanations

******* 5.1 Computation to Canonical Form
******* 5.2 The Meaning of Categorical Judgments
******* 5.3 The Meaning of Hypothetical Judgments

***** 6. Mathematical Models

******* 6.1 Categorical Models
******* 6.2 Set-Theoretic Model
******* 6.3 Realizability Models
******* 6.4 Model of Normal Forms and Type-Checking

***** 7. Variants of the Theory

******* 7.1 Extensional Type Theory
******* 7.2 Univalent Foundations and Homotopy Type Theory
******* 7.3 Partial and Non-Standard Type Theory
******* 7.4 Impredicative Type Theory
******* 7.5 Proof Assistants

*** intuitionistic type theory -- from wikipedia

***** MLTT71

      - was the first of type theories created by Per Martin-Löf.
        It appeared in a preprint in 1971.
        It had one universe
        but this universe had a name in itself,
        i.e. it was a type theory with,
        as it is called today, "Type in Type".

      - Jean-Yves Girard has shown that
        this system was inconsistent
        and the preprint was never published.

***** MLTT72

      - was presented in a 1972 preprint
        that has now been published.

        - Per Martin-Löf,
          An intuitionistic theory of types,
          Twenty-five years of constructive type theory
          (Venice,1995),
          Oxford Logic Guides, v. 36, pp. 127--172,
          Oxford Univ. Press, New York, 1998

      - That theory had one universe V and no identity types.
        The universe was "predicative" in the sense that
        the dependent product of a family of objects
        from V over an object that was not in V
        such as, for example, V itself,
        was not assumed to be in V.

      - The universe was a-la Russell,
        i.e., one would write directly "T∈V" and "t∈T"
        (Martin-Löf uses the sign "∈" instead of modern ":")
        without the additional constructor such as "El".

***** MLTT73

      - It was the first definition of a type theory
        that Per Martin-Löf published.

        - Per Martin-Löf,
          An intuitionistic theory of types: predicative part,
          Logic Colloquium '73 (Bristol, 1973), 73--118.
          Studies in Logic and the Foundations of Mathematics,
          Vol. 80, North-Holland, Amsterdam,1975

      - There are identity types which he calls "propositions"
        but since no real distinction
        between propositions and the rest of the types is introduced
        the meaning of this is unclear.

      - There is what later acquires the name of J-eliminator
        but yet without a name (see pp. 94–95).

      - There is in this theory an infinite sequence of universes
        V0, ..., Vn, ...
        The universes are predicative, a-la Russell
        and non-cumulative!
        In fact, Corollary 3.10 on p. 115 says that
        if A ∈ Vm and B ∈ Vn are such that
        A and B are convertible then m = n.
        This means, for example, that
        it would be difficult to formulate univalence in this theory,
        there are contractible types in each of the Vi
        but it is unclear how to declare them to be equal
        since there are no identity types
        connecting Vi and Vj for i≠j.

***** MLTT79

      - It was presented in 1979 and published in 1982.

        - Per Martin-Löf,
          Constructive mathematics and computer programming,
          Logic, methodology and philosophy of science, VI
          (Hannover, 1979), Stud.
          Logic Found. Math., v. 104, pp. 153--175, North-Holland,
          Amsterdam, 1982

      - This is a very important and interesting paper.
        In it Martin-Löf introduced the four basic types of judgement
        for the dependent type theory
        that has since became fundamental
        in the study of the meta-theory of such systems.

      - He also introduced contexts as a separate concept in it
        (see p. 161).
        There are identity types with the J-eliminator
        (which already appeared in MLTT73
        but did not have this name there)
        but also with the rule that makes the theory "extensional"
        (p. 169).
        There are W-types.
        There is an infinite sequence of predicative universes
        that are cumulative.

***** Bibliopolis

      - There is a discussion of a type theory
        in the Bibliopolis book from 1984

        - Per Martin-Löf,
          Intuitionistic type theory, Studies in Proof Theory.
          Lecture Notes, v. 1, Notes by Giovanni Sambin, pp. iv+91, 1984

      - but it is somewhat open-ended
        and does not seem to represent a particular set of choices
        and so there is no specific type theory associated with it.

*** Girard's paradox

    #+begin_src jojo

    #+end_src
