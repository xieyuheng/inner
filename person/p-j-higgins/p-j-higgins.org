#+title: p j higgins

* categories and groupoids (1971)

*** preface to the reprint

    - the theory of presentations of groups
      generalised easily to presentations of groupoids,
      using generating graphs instead of generating sets.
      [is using a type system]

    - the general philosophy of algebra,
      is the importance of universal properties and word problems.

*** 1 some basic categories

    - [two view points]

      (1) [large]
      morphism as structure-preserving map of concrete category.

      providing general theorems with applications in concrete categories,
      which describe in abstract terms some of the standard constructions
      occurring in many different branches of mathematics.

      theorems of this kind concern :
      - product
      - direct limit
      - adjoint functors
      - monad and algebra of monad
      - universal properties
        functional equations to be solved in concrete models.
      - how to build new groupoids from old ones

      (2) [small]
      category as algebraic structure itself,
      functor as structure-preserving map.

      leading to the consideration of algebraic notions as :
      - congruences [meaning?]
      - generators and relations
      - free generated categories or groupoids
      - word problems

      - x -
        如果不是把 n-groupoid 當成拓撲空間
        那麼高維的等價幾乎總是沒有必要的
        很少有地方需要 證明 證明一個等式的兩種不同方式 是等價的
        尤其是對於情形 (1) 來說

    - [concrete category]
      a concrete category is a category
      that is equipped with a faithful functor to the category of sets.
      This functor makes it possible to think of the objects of the category
      as sets with additional structure,
      and of its morphisms as structure-preserving functions.

      faithful functor means that
      it maps different morphisms between the same objects to different functions.
      However, it may map different objects to the same set,
      if this occurs, it will also map different morphisms to the same function.

      a category C may admit several faithful functors into (category set)
      Hence there may be several concrete category structures of the same category C.
      [not a property but a structure]

      - concrete
        (category topology) (category group) (category category)

      - not concrete
        (category homotopy-topology)
        for the morphisms are not actual functions between them,
        but rather classes of functions

    - [some forgetful functors]

      (category groupoid)
      forget we can do inverse -> (category category)
      forget we can do compose -> (category directed-graph)

      (category directed-graph)
      forget about edges -> (category set)

      (category directed-graph)
      forget about vertexes -> (category set)

    - as the theory developing,
      syntax is simplified.

    - directed-graph is intro-ed.
      [for free generated groupoid?]

    - a sub-structure generated by the image of a morphism
      is emphasised, ><><><

    - x -
      is it fine to define a map by means of its generators?
      [and checking relations]

    - x -
      simplicial groupoid 就是 完全圖
      [或者說 simple groupoid?]
      (simple {0, 1, ..., n}) 作爲一個 groupoid
      其點爲 {0, 1, ..., n}
      其邊爲 (i, j) where (: [i, j] {0, 1, ..., n})
      邊的複合就是 (i, j) (j, k) = (i, k)

*** note 關於遺忘函子

    - x -
      在討論某個範疇的時候
      先看看通過遺忘函子能夠獲得哪些簡單的範疇
      然後用這些簡單的範疇中的定理和概念來提問

      比如在這裏
      (category set)
      (category directed-graph)
      (category category)
      (category groupoid)

    - k -
      對於高維的代數也可以有類似的敘述方式嗎?

    - x -
      利用遺忘函子
      作者明確了生成與關係
      並且展示了沒有關係的自由代數結構
      我們也可以做類似的討論

    - k -
      先明確他的敘述方式吧

    - x -
      好的
      我們先來看看兩個遺忘函子的作用效果
      (category groupoid) -{forget inverse}->
      (category category) -{forget compose}->
      (category directed-graph)

      先看 {forget compose}
      每次遺忘函子作用的時候只是遺忘數據之間的關係
      或者說忘了我們可以用這些數據來做什麼
      忘了我們可以如何處理這些數據
      但是並沒有忘記數據本身

      因此 category 中相同的 arrow 都被映射到 graph 中的同一個 arrow
      如果有 (p1 : (a -> b)) (p2 : (b -> c)) (p1 p2 : (c -> d))
      這個 [p1 p2] 是用生成來表示的
      在 category 中 我們可能不會說 [p1 p2] 只是這個 arrow 的表示
      而這個 arrow 的本體是 (p3 : (c -> d))
      但是 經過遺忘函子之後
      我們就必須這麼說了

      因此 一個 category 通過 {forget compose}
      而得到的 directed-graph 是很奇怪的
      因爲在 category 中 我們習慣了利用 compose 來生成新的 arrow
      在這個 directed-graph 中
      這些直覺都失效了

    - k -
      是不是當考慮 directed-graph 中的 path 的時候
      就是在考慮 category 了?

    - x -
      沒錯
      這是一個函子
      directed-graph 到 path-space of directed-graph
      是 (category directed-graph) 到 (category category)
      的函子
      因爲 path-space of directed-graph 是 category
      並且 free category 就是這樣來描述的

*** note 關於生成子

    - x -
      我想上面關於遺忘函子討論
      假定了一種理解方式
      即 視 (A -> B) (B -> C) (C -> D) 爲集合
      [或 (-> A B) (-> B C) (-> C D)]
      視 arrow 的複合 爲映射 ((A -> B) (B -> C) -> (C -> D))
      [或 (-> [(-> A B) (-> B C)] (-> C D))]
      當想把代數推廣到高維時
      我們可能根本就沒法承受這種理解方式所帶來的複雜度

    - k -
      那麼新的理解方式是什麼?

    - x -
      就是 combinatorial group theory 中的 g.r. 表示
      重要的是不要把 composition 理解爲二元函數

      說一個 diagram commute
      就是說 這個 diagram 中的所有邊界都圍着一個高階元素[二階元素]

    - k -
      這種理解方式合理嗎?

    - x -
      可以試着以這種方式來理解
      函子 F G 之間的 natural transformation T
      (T : F => G)
      where ([F, G] : (A -> B))
      當 path 在 A 中跑時
      F, G 將在 B 中描繪出 兩條 '平行的' paths
      (T : F => G) 就是說
      這兩條平行路之間有二階元素
      T 把 A 中的點映成線
      這些線和兩條平行路相交織 分割出來的四邊形
      指明了應該如何把 A 中的 邊 映射到以這些 四邊形 爲邊界的 面

    - k -
      說 diagram commute 的時候
      之在乎高階元的存在性
      而不必具體指明高階元
      這就是弱化空間之間的等價關係的原因

    - x -
      diagram commute 是用等式表示的
      arrow 複合的 associativity 也是用 等式表示的
      爲什麼 associativity 在 AT1 中要特殊處理?

      要知道 weak n-groupoid 中 被弱化的就是這一點
      而我們正是要避免這種弱化

    - k -
      爲什麼要避免這種弱化?

    - x -
      因爲語義上 構造一個數據有各種不同的方式
      有關不同構造方式的信息 並不保存在最終的數據中

    - k -
      真是如此嗎?
      要知道 爲了獲得 能指明幾何體中具體位置的語法
      我們必須把 幾何體的構造過程有關的信息
      也儲存在最終構造出來的幾何體上

    - x -
      也許這就是我們需要弱化結合律的原因
      我們的論文就是要明確這一點不是嗎?
      把這個消息告訴大家
      告訴大家這是一個語法與語義之間的關係問題
      而不是其他

*** note 實現指導理論

    - x -
      關於上面的討論
      我想我能總結出一些一般的原則出來

      問題是
      爲什麼不把 arrow 或 path 或 其他幾何體的 composition
      理解爲二元函數

      答案是
      因爲這些東西之實現並非如同函數

    - k -
      那麼這個原則對於 生成子 也是一樣
      因爲生成子的實現方式也不是函數
      但是既然不被理解爲函數
      那麼應該被理解爲什麼呢

    - x -
      首先 生成子 不被理解爲函數
      是因爲它們沒有函數體
      或者說它們的函數體是平凡的

      同樣 我也可以說 這些幾何體的 composition 作爲函數是平凡
      而且 生成子 可以理解爲特殊的 composition
      即 只有單個元素的 composition

*** note 大小範疇有別

    - x -
      上面所說的
      都是把範疇理解爲代數結構而言的
      也就是對小範疇而言
      但是大小有別
      對於大的範疇
      這種理解方式還適用嗎?

    - k -
      對於不把複合理解爲函數而言
      這是適用的
      因爲在 小範疇 中 被複合的是幾何體
      而在 大範疇 中 被複合的是函數
      函數的複合 也不必理解爲 高階函數

    - x -
      "meaningful distinctions deserve to be maintained."
      組合子 這種高階函數 有別於函數本身

    - k -
      但是大範疇的 object 不是 point 而是 space

      - 一階元素不是 可逆的 path 而是 函數
        或者 logic programming 中的可逆函數

      - 二階元素不是 面 而是 高階可逆函數
        或者用 uncurry 取消高階
        而把它們理解爲多元可逆函數

    - x -
      看來這個方向的討論還遠呢

*** 2 natural equivalence and adjoint functors

    - x -
      unicursal 是說 從一點到另一點的有向邊最多只有一條
      作者用 unicursal 來解釋 'diagram commute' 這個術語的意義

    - a natural transformation T,
      between two functors (: [F, G] (-> A B))
      is a homotopy between the two functors
      (: T ((cat ~) F G))

      - but in category not every is invertible,
        so are natural transformations.

      thus, between two categories, one can define

      - categorical isomorphism
        ((cat =) (category ...) (category ...))

      - categorical equivalence
        ((cat ~~) (category ...) (category ...))
        which likes homotopy equivalent between spaces,
        but not the same,
        since higher-level elements of groupoid or cat
        are ignored.

    - higgins -
      in most applications of category theory
      one does not need to distinguish between equivalent categories,
      since the properties of greatest interest
      are preserved under equivalence.
      by the same token, naturally equivalent functors
      can be identified for most purposes.

      however, in the algebraic theory, [the view of small category]
      there are interesting properties not preserved under equivalence.

      (~~ (category groupoid) (category family of groups))
      that is to say,
      every groupoid can be represented as
      a family of groups.

      [but what exactly is not preserved
      by the equivalence between the two categories?]

    - x -
      因爲 arrow 是有向的
      所以可以區分 covariant functor 與 contravariant functor

      但是 groupoid 中的 arrow 是無向的
      (dual (category groupoid)) = (category groupoid)

    - x -
      我們來仿照之前描述 natural transformation
      的方式來描述 adjoint

    - k -
      之前的 natural transformation
      (: [F, G] (-> A B))
      A 中的 arrow 在 [F, G] 的映射下
      可以在 B 中描繪出一個平行軌跡
      (: T ((cat ~) F G)) 就是說
      給出這個平行軌跡所支撐的面
      注意
      古典的敘述只說
      給出這個平行軌跡所支撐的面的骨架
      不要求確定面 而只是要求面的存在性
      古典的敘述就是
      把 A 中的點 映射到這些骨架的共軛邊上
      然後在敘述某些面的存在性

    - x -
      設
      (: F (-> A B))
      (: G (-> B A))
      (: J (adjoint F G))
      A 中 一邊落入 [B G] 的四邊形面
      被 J 一一映成
      B 中 以這一邊的原像爲一邊的四邊形面
      並且其對邊落入 [A F] 中
      注意
      古典的敘述只說
      給出這些四邊形面的骨架
      不要求確定面 而只是要求面的存在性
      古典的敘述就是
      給出骨架的共軛邊之間的一一映射
      也就是 A B 的某些特殊的 arrow 之間的一一映射
      然後再要求面的存在性

    ------

    - forgetful functor as the left adjoint of a adjoint pair
      can be used to describe free algebraic structure?

    - adjoint functor can arise from the constructions of universal property.
      [related to limits?]

*** note the border between invertible and non-invertible

    - x -
      AT1 中 space 本身是 n-groupoid
      而 space 又構成 n-category
      所以 AT1 可以看成是二者之間的邊界
      區分了元素的層次
      此層以下 invertible
      此層以上 non-invertible

    - k -
      如果如此說的話

      (1)
      兩個空間之間的同倫等價
      可否被視爲一個高維空間

      (2)
      兩個空間之間的映射
      可否被視爲一個高維空間
      但其中的元素並非都是可逆的
      [或者說 並否都是就可逆性而對稱的]

    - x -
      我們可以找例子 並嘗試構造之

    ------

    - x -
      其實就是 adjunction-space 和 map-cylinder

*** 3 paths and components

    - path-space is a functor
      (: path-space (category digraph) (category category))
      thus [(category digraph) path-space] is a category

    - path-space is left adjoint to the forgetful functor
      (: forget-compose (category category) (category digraph))

*** note the underlying space of infi-groupoid

    - x -
      instead of the underlying graph of groupoid,
      we think of the underlying space of groupoid,
      which is can be drawn by
      the generators and relations of the groupoid.
      the groupoid will be the fundamental groupoid of the space.

      with generators and relations,
      the we can define morphisms with a checker.
      just like when writing functions
      with the help of a type-checker in programming language.

*** 4 free groupoids

*** 5 tree and simplicial groupoids

    - free groupoids can be finite.
      two free groupoids of the same rank might not be isomorphic.

    - free groupoid on any tree is simplicial,
      and conversely, every simplicial groupoid
      is freely generated by any of its maximal sub-tree.

*** 6 fundamental groupoids of topological spaces

*** 7 limits in categories

*** 8 universal morphisms in digraph category and groupoid

*** 9 right limits in category and groupoid

*** 10 the word problem of U

*** 11 free products of categories and groupoids

*** 12 quotient maps of groupoids

*** 13 covering maps

*** 14 applications to group theory

*** 15 coverings of right limits

*** 16 homology of groups and groupoids

*** 17 calculation of fundamental groups

* presentations-of-groupoids-with-applications (1964)
