* the use of prefix notation <2016-11-01 Tue>

  - use prefix notation for syntax keyword
    '->' ':' '='
    just as '~' '+'

  - replace () by {} change explicate to implicate
    thus a keyword
    1. has side-effect -- can use {}
       and has return value -- can use ()
    2. has side-effect -- can use {}
       does not have return value -- can not use ()

  - [] for a list of (any kind of) things
    [x] can be written as x

  - example about the change

    #+begin_src scheme
    (~ H : ((:X : space) (:A < :X) int -> abelian-group))
    (~ H/induce : ((:X :A -> :Y :B) (:q : int) ->
                   (:X :A :q H -> :Y :B :q H)))
    (~ boundary : (:X :A :q H -> :X empty-space :q 1 sub H))

    (~ co-H : ((:X : space) (:A < :X) int -> abelian-group))
    (~ co-H/induce : ((:X :A -> :Y :B) (:q : int) ->
                      (:Y :B q co-H -> :X :A q co-H)))
    (~ co-boundary : (:X empty-space :q 1 sub co-H -> :X :A :q co-H))


    (~ H (-> [(: :X space) (< :A :X) int]
             abelian-group))
    (~ H/induce (-> [(-> [:X :A] [:Y :B]) (: :q int)]
                    (-> [:X :A :q H] [:Y :B :q H])))
    (~ boundary (-> [:X :A :q H]
                    [:X empty-space :q 1 sub H]))

    (~ co-H (-> [(: :X space) (< :A :X) int]
                abelian-group))
    (~ co-H/induce (-> [(-> [:X :A] [:Y :B]) (: :q int)]
                       (-> [:Y :B q co-H] [:X :A q co-H])))
    (~ co-boundary (-> [:X empty-space :q 1 sub co-H]
                       [:X :A :q co-H]))
    #+end_src

  - 如是
    就區分了 中綴表達式中的 (-> nat) 與 nat
    即 (-> [] [nat]) 與 [nat]
    只不過爲 (-> [] [nat nat]) 與 [nat nat]
    否則 (-> nat nat) 與 nat nat
    這後面的 nat nat 在語境中可能有歧義

  - more example

    #+begin_src scheme
    (+ (~ natural type)
       (~ zero natural)
       (~ succ (-> natural natural)))

    (~ add
       (-> [natural natural]
           natural)
       [(-> [:m zero]
            :m)
        (-> [:m :n succ]
            [:m :n add succ])])

    (~ quotient/natural-projection
       (-> [{: :y type}
            (: :x type) (-> :x :y)]
           [(: :z type)])
       [(-> [:x :p]
            [{= :z (derive :x)}
             {= :z.== (-> [:a :b]
                          [:a :p @ :b :p @ :y.== @])}
             :z])])
    #+end_src

  - rationale
    在設計語法過程中
    經常需要 border-fix notation
    用中綴表達式 (* -> *) 來實現 border-fix notation
    固然簡介
    但是 如此就佔用了 () 這個 structural lexicon
    解放出這個 ()
    模仿古典 lisp
    以靈活處理 border-fix notation

  - 注意
    如此產生的 keyword 之 返回值後置
    比如 ':' 與 '<'
    (: :x type) 是說 此位返回值 類型爲 type 名爲 :x
    (< :a :x) 是說 此位返回值 類型爲 :x 的 subtype 名爲 :a
