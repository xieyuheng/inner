* the limitations of this introduction
  Although I will write more and more things to introduce cicada,
  but not all features of it will be documented in separate documentations,
  for the following reasons :
  1. I actually write my code in a so called "literate programming" style,
     the source code is embedded in its documentations.
  2. most of the code that implement cicada is written in cicada itself.
  3. cicada is a very readable and simple language,
     the code of it is almost self-documented.
  4. you have learned enough about it to learn more about it by reading its source code.

* TODO words and the dictionary metaphor
* TODO some maybe-bad design decisions
* TODO what do you mean by dynamic-type?
* TODO how function is defined and calld?
* TODO strings
* TODO the DNA of this language
** [Forth] explicit control
   explicit stack
   explicit dynamic type
   explicit fetch and store

** [Joy] function composition
   optimize the syntax for function composition
   but not function application

** [Scheme] list-processing and lambda-calculus
   to be a functional programming language
   lambda-calculus is implemented by list-processing
   to implement list-processing we need garbage-collector

* --------------------------------------------------
* >< to be functional
* >< loose dynamic type in the ArgumtStack
* ------------------------------------------
* functional programming
** λ-calculus is a computation model
*** 函数式编程利用函数来表达计算的概念
    函数可以被理解为一个变换
    在这种理解方式下 函数式编程就是回答下面的问题:
    ``如何表达一个变换以使得一个机器可以帮助我进行这个变换?''
    也就是要寻找一个语言 它要同时满足两个条件:
    1. 它能描述变换
    2. 机器能够根据它的描述来进行计算
    单独回答其中的每一个都将出离计算机科学
    而每寻找到一种这样的语言就建立了一个计算理论
    + 比如在数学的传统中用笛卡尔积的一个特殊子集
      即一个单值的``关系'' 来定义函数
      - 这是在用集合论的形式语言来作定义
        其中``关系''的单值性就是为了捕捉``变换''这一观念
        一个语言被称为``形式的''
        就在于它能精确地描述人们的思想 并且没有歧义
        但是要知道``变换''才是要紧的
      这种定义强调了人的几何直觉
      但是机器显然不能根据这中描述来进行计算
*** λ-cal是这样来回答上面的问题的
    想法简单又朴素
    即设计一种语言
    形成一种语义 能够描述函数之间复合之时所进行的代入
    就机器而言这就是输出端与输入端之间的电线的连接

    那么如果复杂的函数都是由简单的函数复合而成的
    而我拥有一些基本的简单函数 又能描述函数的复合 那么我就拥有了复杂的函数
    + 就数学结构而言
      由了这种语义之后
      我能用展示性关系来构造多少其他的关系?
      这就是``可计算性问题''

    时间证明了这是非常好的设计
    语义很强 甚至超过了数学中传统的函数概念
    人们甚至在这种计算理论中用函数来作某些数学结构的模型

    就像电线一样 我最好能用一些有向连线来描述代入的方式 这样既准确又直观
    那样我就进入了图论 所需要的有向图可以用链表来实现

    但是如果我希望我的描述是一维的文本 (可能是为了方便机器对它的处理)
    那么我就需要一些技巧去处理自由变元与约束变元所引发的奇异 等等

    具体的实现方式:
    1) 下面在有向图的意义下讨论 因为这样就可以避免一些枯燥的技巧
    2) notation:
       下面的term会被<init-surgery>转化为对应的post-term
       post-term是一个有向图
       #+begin_src scheme
       var ::= <*symbol*>
       term ::= var | (λ (var) term) | (term term)
       #+end_src
       <-*- denote reduction
       =*= denote conversion
    3) 一个需要进行代入的位置被称作β-redex或λ-application
       其中有两项 前一项被称作λ-abstraction用有向连线来指明代入的位置
       后一项是被代入的东西
    4) β-reduces one step
       对一个β-redex的变换
       形成了post-term的集合上的一个一一映射(就像自然数集上的后继关系)
    5) β-reduces
       是给β-reduces in one step添加自反性与传递性
       以形成一个偏序关系
       β-normal form是这个偏序集的极小元
    6) β-convertible
       是给β-reduces添加对称性与传递性
       以形成一个等价关系
       这个等价关系可以用来判断两个post-term是否会被reduce为相同的β-normal form
       即 等价关系β-convertible给了所有post-term的集合一个划分
       划分中每个子集中的post-term如果可能的话将被reduce为相同的β-normal form
       β-convertible与application和abstraction这两个操作相容
       同一等价者被这两个操作作用后还在某一个相同的等价类中
       因此在等价类中的变换可以忽略周围的语境
    7) 给一个二元关系添加性质形成新的二元关系
       就是先声明新的二元关系被原二元关系蕴含
       添加的性质是描述于新的二元关系的
       用来指明新的二元关系到底变的多弱
    8) 然后有一些定理来说明这个偏序集和这个等价类的良好性质
    9) 如果一个post-term中只有一个β-redex
       ``β-reduces one step''作为一一映射只能形成平凡的关系
       但是如果post-term中有多个β-redex
       即 这些β-redex可以作为β-redex的``被代入项''
       或者作为β-redex的λ-abstraction中的``代入项''
       (``被代入项''被代入``代入项'')
       那么由``β-reduces in one step''添加自反性与传递性
       就形成了一个复杂的偏序关系
    10) <-β-是一个机器
        它尝试(可能不成功)把一个作为β-redex的post-term化为β-normal form
        + 人们可以从数学的角度抽象这一特点说:
          偏序集给了``计算''以方向
          使得当输入一个集合中的元素时
          一个``进行计算的机器''可以把这个元素化为
          偏序集中的极值
          + galois理论中的代数计算
        + 或者从另一个角度人们可以从数学的角度抽象这一特点说:
          一个集合被划分了
          划分中的每个子集中有特殊的``代表元''可以给``计算''指明方向
          使得当输入一个集合中的元素时
          一个``进行计算的机器''可以把这个元素化为
          这个元素所在的划分中的子集的``代表元''
          + 代表元的存在性 让人想到选择公理:
            ``每个集合族 可以同时选出它们每个中的一个代表元''
          + 代表元的存在性 和 存在时的唯一性 与下面的因素有关:
            1. 所使用的表达式集合
            2. 集合的划分
            3. 指定代表元的方式
            4. 寻找代表元的方式
            5. 比如当赋予每个等价类的偏序关系然后指定最小元为代表元时又有下面的因素:
               1) 赋予每个等价类的偏序关系如何
               2) 求偏序集最小元(或极小元)的方式
*** 回到原来的问题
    ``如何表达一个变换以使得一个机器可以帮助我进行这个变换?''
    λ-cal回答:
    一个有λ-abstraction语义的λ-term表达一个变换
    <-β-把这个λ-abstraction的一次作用
    化为β-normal form的过程就是机器帮我进行一次这个变换的过程
*** ------------------------------------------
    extensionality:
    (∀x,((f x) = (g x))) ⇒ (f = g)

    =η= η-conversion:
    就是=β=添加extensionality
    + eg:
      λx.(M x) =η= M
** the implementation
* the limitation of functional programming
  the limitation of functional programming is founded
  during the implementation of the core of a functional programming language -- lambda-calculus
  in a functional programming language
* ------------------------------------------
* forth
** 让函数语义与对副作用的控制以灵活的方式结合起来
** deconstruction of syntax and to be flexible
** a interpreter that almost do not interpret anything
** explicit ArgumtStack and ReturnStack
** to be functional
** loose dynamic type
