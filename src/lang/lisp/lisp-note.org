* 語法設計保守力

  - 當一個人 用 lisp 來實現 類 prolog 語言的時候
    這個人會慢慢地把自己的語法轉化成 sexp 的形式
    因爲這種方式在 lisp 裏處理最簡單
    另外設計一個語法 並寫一個 parser 看來是沒有必要的

  - 這就是 lisp 的保守力

* 一羣屎殼郎定理

  - 保守力定理
    不動點定理
    一羣屎殼郎定理

  - 假設一
    每個人在解決問題時
    都會使用自己所能想到的最優解法

  - 假設二
    羣體中的大多數人會忽略全局最優解法
    而只看到局部最優解法
    - 關於 '局部最優解'
      想像一個屎殼郎 在坑坑洼洼地方 推糞球
      想要把它推到 最低的地方 ['最低' 就是 '最優']
      但是可能這個 屎殼郎 舉目四望
      看不到比自己目前所在的洼地 更低的地方了
      但是其實 翻過某個小丘 還有更洼的地方

  - 假設三
    某個特定的問題 B 有這樣的性質
    1. 它有很多種解法 B(1) B(2) B(3) 等等
    2. 使用某種解法 B(n) 的人越多
       這個解法的優異程度 y(B(n)) 就'看似'越高
       - 所謂看似 '越高'
         就是說
         雖然它還是 局部最優解
         而不是 全局最優解
         但是 它和全局最優解之間的 小山丘的高度就越來越高
       - 可以想像
         每個屎殼郎在選擇一個洼地待着的時候
         都會用自己推的糞球上的屎 加固周圍的小山丘

  - 那麼 可悲的事情要發生了
    這個世界上的一羣羣屎殼郎
    都會把自己困在一個個局部最優解中了
