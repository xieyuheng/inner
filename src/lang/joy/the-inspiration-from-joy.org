#+title: the inspiration from joy

* note

*** 歷史

    - I enrolled in Psychology and Philosophy because
      I wanted to know how the human mind works
      But rats and stats in Psychology and logic and scientific method in Philosophy
      quickly changed my directions.
      In particular,
      I became interested in the justification of induction,
      and I wrote my PhD in the field of inductive logic and logical probability.
      and do deductive logic and programming

    - backus' FP
      <can programming be liberated from the von neumann style>
      no assignable variables
      no formal parameters
      [APL-like]

    - schoenfinkel's and curry's combinatory logic
      no formal parameters
      - curry 的組合邏輯 徹底消去 lambda-abstraction
        但是這種解法只是爲了在理論的討論中 來揭示系統的某些性質而已
        很容易看出這種處理方式 是不可能在編程中被實際使用的
        也許可以作爲一種 編譯的技術
        但是這裏討論的是 表達的技術 屬不同的範疇

    - quine's predicate functors
      no variables of quantification

    - tarski's cylindric algebras

*** 演繹歷史

    - 函數與函數寫到一併就是函數的複合
      這很自然
      然而對於 棄 複 躍 藏 換 這類操作卻不然
      爲了獲得統一的理解
      把整個棧當成單一的參數即可

    - 但是這是不過是一種理解方式而已
      並不助於編程
      因爲
      在這種理解方式下
      所獲得的結合代數的性質太一般了

    - 只有引入其他的技巧才能讓這種理解方式變得有用

*** 對特殊語義的批判

    - 比如 APL
      被稱爲 向量處理語言
      在我看來就是
      去識別出某些使用一般語義的模式
      然後就這些使用方式高度優化其語法而已
      ruby 的 code-block 也一樣
      在一般性更強的語義下很容易把這些概念說清楚

    - 其實在一個語言中
      去把某些使用基本語義的模式抽象出來
      沒有什麼不好
      這正是最好的編程方式
      因爲嘗試去抽象出 某種使用基本語義的方式 的決策過程
      就是 去以一種方式 透徹地理解你所處理的問題 的過程
      [當然每種基本語義模式都代表了一種理解問題的思路[或解決問題的方式]]

    - 而在設計語言的過程中
      重要的是
      提供 恰當的 基本語義
      還有 靈活的 組合基本語義的方式

    - 在 joy 中 組合子的有限性其實並不是大問題
      只要提供定義新的組合子的方式就行了
      重要的是
      joy 中 代入語義 的缺失
      這樣
      在函數體形成了嵌套的時候
      就沒辦法把同一個變量代入到
      那些形成着嵌套的
      不同層次的 函數體中
      - 不同位置都不行 更別提不同嵌套層次了
        不同層次也許不需要 不同位置卻非常必要

*** 正名

    - joy 的作者的定義
      combinators are second (or even higher) order functions
      which take first (or higher) order functions as parameters

    - curry 的定義
      組合子 是不含自由變元的 lambda-term

    - joy 的作者 如是說
      forth 中的棧處理函數 是爲了把參數調整好 以讓函數們按人們的希望去組合並作用
      curry 的組合子 也一樣
      church 的 lambda 中的約束變元 也一樣
      [有趣的是 對棧中參數的低級處理 和高級的高階函數等價]

* intro

*** Synopsis of the language Joy

    - The language Joy is a purely functional programming language.
      Whereas all other functional programming languages
      are based on the application of functions to arguments,
      Joy is based on the composition of functions.

    - All such functions take a stack as argument
      and produce a stack as value.
      Consequently much of Joy looks like ordinary postfix notation.
      However, in Joy
      a function can consume any number of parameters from the stack
      and leave any number of results on the stack.

    - The concatenation of appropriate programs
      denotes the composition of the functions which the programs denote.

    - One of the datatypes of Joy is that of quoted programs,
      of which lists are a special case.

    - Some functions expect quoted programs on top of the stack
      and execute them in many different ways,
      effectively by dequoting.
      So, where other functional languages use abstraction and application,
      Joy uses quotation and combinators -- functions which perform dequotation.

    - As a result, there are no named formal parameters,
      no substitution of actual for formal parameters,
      and no environment of name-value pairs.

    - Combinators in Joy
      behave much like functionals or higher order functions in other languages,
      they minimise the need for recursive and non-recursive definitions.

    - Because there is no need for an environment,
      Joy has an exceptionally simple algebra,
      and its programs are easily manipulated by hand and by other programs.
      Many programs first construct another program which is then executed.

*** Frequently Asked Questions about Joy

*** Joy: Forth's Functional Cousin

*** Apter interviews von Thun

*** Rationale for Joy

*** Overview of Joy [introductory sections of other papers]

    - Joy programs are built from smaller programs
      by just two operations: concatenation and quotation.

    - Concatenation is a binary operation,
      and since it is associative
      it is best written in infix notation
      and hence no parentheses are required.
      Since concatenation is the only binary operation of its kind,
      in Joy it is best written without an explicit symbol.

    - Quotation is a unary operation which takes as its operand a program.
      In Joy the quotation of a program is written by enclosing it in square brackets.
      - 其實 需要 bracket 的是參數個數可變的函數 而非 單參數函數 [unary function]
      - 其實 就求值語義分類而言 quotation 並非函數
        因爲它不求值它的參數
        應該稱之爲 語法結構[syntax form]

    - Ultimately all programs are built from atomic programs which do not have any parts.

    - The semantics of Joy has to explain
      1. what the atomic programs mean,
      2. how the meaning of a concatenated program depends on the meaning of its parts,
      3. and what the meaning of a quoted program is.
      Moreover, it has to explain under what conditions
      it is possible to replace a part by an equivalent part
      while retaining the meaning of the whole program.

    - Joy programs denote functions which take one argument and yield one value.
      The argument and the value are states consisting of at least three components.
      The principal component is a stack,
      and the other components are not needed here.

    - Much of the detail of the semantics of Joy depends on specific properties of programs.
      However, central to the semantics of Joy is the following:
      The concatenation of two programs denotes
      the composition of the functions
      denoted by the two programs.
      Function composition is associative,
      and hence denotation maps the associative syntactic operation of program concatenation
      onto the associative semantic operation of function composition.
      - 這裏用到了所謂 指稱語義 [denotation semantic] 中的術語
        denotation 可以被理解爲特殊的同態
        所謂 'denotation maps ... to ...' 就是同態的作用
        同態把 語法 映射到 語義

    - The quotation of a program denotes a function
      which takes any state as argument
      and yields as value the same state except that the quotation is pushed onto the stack.

    - One part of a concatenation may be replaced by another part denoting the same function
      while retaining the denotation of the whole concatenation.
      One quoted program may be replaced by another denoting the same function
      only in a context where the quoted program will be dequoted by being executed.
      Such contexts are provided by the combinators of Joy.
      These denote functions which behave like higher order functions in other languages.

    - The above may be summarised as follows:
      Let P, Q1, Q2 and R be programs, and let C be a combinator.
      Then this principle holds:
      IF          Q1      ==      Q2
      THEN     P  Q1  R   ==   P  Q2  R
      AND        [Q1] C   ==     [Q2] C

    - The principle is the prime rule of inference for the algebra of Joy
      which deals with the equivalence of Joy programs,
      and hence with the identity of functions denoted by such programs.
      A few laws in the algebra can be expressed without combinators,
      but most require one or more combinators for their expression.

* paper

*** Tutorial on Joy [An informal tutorial on Joy]

*** Mathematical Foundations of Joy

*** Atomic Programs of Joy

*** The Algebra of Joy

*** Recursion Theory and Joy

*** Programming in Joy

*** A rewriting system for Joy

*** Joy compared with other functional languages

* example

*** Design of a Joy interpreter written in Joy

*** Design of matrix multiplication programs

*** Imperative thinking for Joy programs

*** Church arithmetic and Church logic

*** Nested Recursion and a new recursion combinator

*** Fast small truth tables (using Joy native sets)

*** the annoying quadratic formula

*** Lazy lists as reproducing programs

*** Survey of reproducing programs

*** Floy - a flat concatenative subbset of Joy
