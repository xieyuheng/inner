* 題解
  * 測試框架
* 討論 <2015-06-13>
  - x ::
       終於基本完成了模塊機制
       下面該實現測試框架了
  - k ::
       術語上就有些令人困惑
       爲什麼是 測試框架
       而不是 測試機制
  - x ::
       也許 測試框架 和 測試機制 這兩個詞都太過堂皇
       測試 只應該是模塊系統中的一部分
  - k ::
       可以嘗試把測試融入進模塊機制
       如果融入良好 就不必再堂皇命名了
  - x ::
       我發現有很多相對立的風格
    1. 手動測試 與 自動測試
    2. 打印東西 與 不打印東西
       但是其實並非對立
       說 在自動測試中不打印東西
       可能連 ok 和 fail 都不打印
       而只是打印出數字來報告所通過的測試的個數
       我可以像我之前在 common lisp 中做的一樣
       把詳細的結果通過文件來報告
       而在屏幕上打印出簡潔的報告
  - k ::
       風格可以各種各樣
       我想難點是 等詞
       由於沒有動態的類型編碼
       在測試中需要寫明顯的等詞
  - x ::
       我來想像一下結構
    1. 每個測試都在模塊中
       每個測試應該有名字
       每個測試做爲數據結構的存在方式如何
       [其結構中應該有全局域能用於最終的簡潔報告]
       命名應該如何處理
       [不能干擾模塊中正常的命名空間]
    2. 測試其實就是被條件執行的代碼
       它們穿插在正常的函數中
       (load) 不執行這些代碼
       而 (test) 執行這些代碼
       這就需要一個全局變量來控制
       另外
       (test) 是只針對被 (load)
       還是也針對遞歸函數 (import)
  - k ::
       我們先來簡化一下實現
       首先
       不考慮 寫入文件 只打印到 屏幕
       這包括 詳細的報告 還有簡潔的報告
       其次
       不考慮命令行接口
       只使用簡單的函數來在解釋器中做測試
       最後
       儘量簡化報告的格式
       因爲我們還沒有很多格式輸出函數
       尤其是不處理縮進
       那將是很難實現的性狀
  - x ::
       需要 (test) 的同時
       還需要 (recursive-test)
       來處理 遞歸函數 (import)
       也許需要兩個 flag 來標記是 (test) 或 (recursive-test)
       另外還有兩種需求
    1. 當場執行的測試
    2. 在之後執行的測試
       是否希望所有的測試都被定義在當場
       然後可以當場執行也可以之後執行
  - k ::
       這樣就破壞了順序
       如果有一些測試需要在之後執行
       那麼這些函數就應該在之後定義
       而不再當場定義
       也就是說
       儘量寫當場的 test
       以使代碼的邏輯更緊密
       而之後有綜合的 test
       因爲有時 test 會依賴之後的函數
  - x ::
       這種順序確實使得理解起來簡單不少
       所以我想維護這個性狀
       我不必裏同額外的語義和語法
       來支持所謂的 之後執行
       之後執行的東西就之後定義
       同樣的語義和語法 只有語用上的差別而已
  - k ::
       還有
       是否要求一個測試單獨包含一個函數
       這看似不足
  - x ::
       確實不足
       一個測試應該包含一組函數
       但是我並想引入額外的語法來劃定這組函數的邊界
       這句需要在函數命名上做文章了
       就像 <title> 和 |module| 一樣
       我們可以設計額外的前綴給測試
       我還要求對測試的簡潔報告以模塊爲單位
       這樣
       相關的很多信息
       就可以保存在模塊的數據結構之中了
       flag 也可以保存在模塊的數據結構之中
       這樣就能避免一個全局變量
       並且
       在加載一個 模塊的時候
       使用的是 (load)
       還是 (test)
       還是 (import)
       還是 (recursive-test)
       都可以被保存好
  - k ::
       以模塊爲單位的測試
       難怪 測試 只是模塊機制的一部分
  - x ::
       (test-function)
       (test-variable)
       定義函數
       所定義的函數必須有 <test> 前綴
       這些函數在正常的加載過程中會被 (eval-word) 忽略
       而在 帶有 test 的加載過程中被執行
  - k ::
       我覺得已經可以開始實現了
  - x ::
       我找到了一組新的名字
       (test-function)
       (test-variable)
       (test-do)
       有了 (test-do) 就不必要求 <test> 這個前綴了
       也不必有特殊的語法支持
       (load-with-test)
       並且
       我發現不能有 (recursive-test)
       這又是因爲順序的原因
       如果假設所有的函數定義都依賴順序的話
       已經被 (load) 加載的代碼
       就沒有機會再用 (load-with-test) 來重複加載了
  - k ::
       這樣就更簡單了
  - x ::
       我發現沒法實現好
       只有不讓 (load) 調用 (import) 才行
  - k ::
       這樣
       (import)
       (load)
       (load-with-test)
       三者有大量的代碼重複
       也許這是必要的
  - x ::
       有必要
       這樣相當於是在細化接口
       代碼的重複可以嘗試通過重新因子化來減輕
