* 題記
  - 用更簡潔的語法
    來生成 簡單數據結構的 接口函數

* 討論 <2015-06-17>
  - x ::
       我將模仿 org-mode 中的 table 的語法
       首先要有一個數據結構描述語言
       然後 語法解析這個語言
       然後 利用所解析到的信息生成 數據結構接口
       我要求這個數據結構描述語言可以擴展
  - k ::
       先放下 擴展 不說
       看看基本的需求是什麼
       我想
       已經出現過的數據結構的例子 能夠覆蓋很多應用方面了
  - x ::
       沒錯
       我們來找幾個典型的例子
    1. <system-getdents64>
    2. name-hash-table
    3. rule-set
    4. 各種 stack
  - k ::
       可以發現所有這些在之前都是通過手動定義函數而處理的
       每次都有很多重複
       這些重複將用代碼生成機制來解決
  - x ::
       其實是這樣的
    1. <system-getdents64>
       有很多類似的接口
    2. name-hash-table
       目前還沒有類似的接口
    3. rule-set
       接口沒有重複
       但是在全局 生成一個 rule-set 的方式是手動進行的
       而不是用生成函數進行的
    4. 各種 stack
       有很多類似的接口
  - k ::
       我不認爲你能設計一個通用的代碼生成機制來解決上面的全部問題
  - x ::
       沒錯
       我就只生成以 set 和 get 爲前綴的東西
       每次存取只一個值
       但是好像不能只是一個值
       我必須能夠處理 string[address, length] 這種類型的值
       並且處理這種類型的值的將是一般的機制
       而不是只使用與 string
  - k ::
       問題其實已經可以簡化很多了
       只要知道每次 生成 get 和 set 的時候所需要的參數就行了
       可以發現參數並不是很多
       另外還有一點
       那就是可能有一些變長數據直接被分配在了數據結構中的一個大數據域中
  - x ::
       <system-getdents64>
       | ino    | 8 byte   |
       | off    | 8 byte   |
       | reclen | 2 byte   |
       | type   | 1 byte   |
       | name   | 256 byte |
       其中 name 就是直接分配在其中的 以 0 結尾的字符串
       而 <jo> 是地址不再開頭的例子
       |    | length    |
       | jo | explainer |
       |    | body      |
       另外 <link> 是帶有 string 的例子
       | link | link           |
       |      | jo             |
       |      | string-address |
       |      | string-length  |
  - k ::
       我想到了一個更加極端的例子
       那麼就是 ELF 等等 這些可執行文件格式
       一個 可執行文件格式 做爲數據結構是高度複雜的
       我們可以以它們爲例子來研究一下
  - x ::
       沒錯
       這些東西之後我們也會需要
       可執行文件格式
       還有 指令集編碼 也是極端的例子
  - k ::
       這寫其實代表了底層編程的特點
       不是嗎
  - x ::
       如果 cicada-nymph 可以被稱作 什麼什麼處理語言 的話
       那麼它就是這種類型的東西的處理語言
       這種底層的數據結構 所體現的 正是當前計算機構架本身的性質
       [只有當 "線性內存" 這個概念被淘汰的時候 這種處理語言才會過時]
  - k ::
       這更鼓勵我們要把這裏的代碼生成機制設計好了
  - x ::
       沒錯
       我之前甚至想要放棄
       但是現在看來這是極其重要的機制
       我先去找
       可執行文件格式 和 指令集編碼
       這連個極端的例子來研究一下
  -----------------------------------
  - x ::
       注意
       要保留類型信息的位置
       當實現類型檢查之後
       就應該重新實現這裏的代碼生成機制了
  -----------------------------------
  - x ::
       我決定不去研究 可執行文件格式 和 指令集編碼 的極端例子
       因爲我知道那將沒有盡頭
       太浪費時間了
       那將會使得靈感失其鋒芒
       就像你想殺死一只蠅子
       但是你不想弄髒自己的手
       你去找別的工具來打死它
       可是當你找到別的工具的時候
       已經錯失殺死它的時機和你目光對它的鎖定了
       你可以先殺死它然後再擦手或者洗手
       我之間實現最簡單的 get 和 set
       這些做爲數據結構的最基本的結構
       更複雜的接口可以以他們爲基礎手動寫成
       或者用另外一層代碼生成機制生成
       哦
       其實是同樣的代碼生成機制
       只不過是兩層生成
  - k ::
       如果這樣的話
       我想我們正在利用 cicada-nymph 的一個重要特點
       那就是
       我們可以隨時完全徹底的更改設計
       這在於兩點
       首先
       語言本身的簡單性 我們對系統有完全徹底的理解
       其次
       我們沒有任何兼容問題之類的包袱需要維護
  - x ::
       回到具體問題
       爲了生成一個接口 我們需要什麼參數
       只有兩個
       值的大小
       值的個數
       我限制取出多個值時 這些值必須連續
       這樣值的位置就可以不做考慮了
       每個值爲了在 參數棧中存在 而不能超過 *jo-size*
       這樣我就只有三個單位需要考慮
       bit
       byte
       jo [或者 cell]
  - k ::
       既然 jo 做爲一個結構話數據結構的名字了
       那麼也許 *jo-size* 就不是合適的名字了
       應該命名爲 *cell-size*
  - x ::
       沒錯
       我還限制 多個值時的順序必須與 n-get 和 n-set 一致
       也就是 大端序
       但是其實這與底層的 端序 並不相互違背
       只要在語法中增加 邊界
       我就可以避免用數字來明指數量
       <link>
       |--------+------|
       | link   | cell |
       |--------+------|
       | jo     | cell |
       |--------+------|
       | string | cell |
       |        | cell |
       |--------+------|
       其實不用邊界 如下的語法也沒有歧義
       | link   | cell |
       | jo     | cell |
       | string | cell |
       |        | cell |
       當單位一致時 可以在外部聲明單位
       unit cell
       並簡化語法爲
       | link   |
       | jo     |
       | string |
       |        |
       <jo>
       開頭地址有偏移 對於其下保存變長數據的結構很重要
       用標記來標出這一點
       unit cell
       | length        |
       | explainer <*> |
       | body          |
       內部包含大域時如何
       <system-getdents64>
       | ino    | 8 byte   |
       | off    | 8 byte   |
       | reclen | 2 byte   |
       | type   | 1 byte   |
       | name   | 256 byte |
       其中的 name 域 需要特殊處理
       這種大域完全破壞了正規性
       因爲 256 byte 大於 cell
       其實它應該被處理爲嵌套的數據結構
       要知道嵌套的向量之內存是直接就地分配的
       <system-getdents64>
       | ino                      | 8 byte |
       | off                      | 8 byte |
       | reclen                   | 2 byte |
       | type                     | 1 byte |
       | <system-getdents64-name> |        |
       關於 <system-getdents64-name> 所要知道的只是大小而已
       也就是說 存儲方式有兩種 一種是 包含地址 一種是就地分配
       就地分配 很重要
       因爲它可以使得在複製時不必遞歸
       <system-getdents64-name>
       | +padding+ | 256 byte |
       可以處理連續的 <title> <title>
       <system-getdents64> <system-getdents64-name> get-system-string
       但是 這裏的 get-system-string 是特殊的接口
       必須有擴展機制來處理這種特殊接口
       我能想到的簡單方法是在定義完成上面的 <system-getdents64-name> 之後
       進行 alias
       "<system-getdents64-name> get-system-string" "get-system-string" alias
       也就是說這裏必須使用手動的定義了
       也許我可以以如下方式將這個 alias 自動化
       <system-getdents64-name>
       | +system-string+ | 256 byte |
       而 system-string 這個詞本身是一種擴展機制它會自動生成新的接口
       所生成的接口的名稱完全由 +system-string+ 做爲擴展機制來控制了
       具體就這個例子而言
       它將執行
       "<system-getdents64-name> get-system-string" "get-system-string" alias
  - k ::
       也就是說
       計劃中刪除的 語法擴展機制 又被加回來了
       並且還增加了 就地分配內存 處理
       然而
       上面無疑是說
       <system-getdents64>
       | ino                      | 8 byte |
       | off                      | 8 byte |
       | reclen                   | 2 byte |
       | type                     | 1 byte |
       | <system-getdents64-name> |        |
       可以被寫成
       <system-getdents64>
       | ino             | 8 byte   |
       | off             | 8 byte   |
       | reclen          | 2 byte   |
       | type            | 1 byte   |
       | +system-string+ | 256 byte |
  - x ::
       沒錯
       哦
       這無疑是說上面的
       "<system-getdents64-name> get-system-string" "get-system-string" alias
       是不充分的
       所生成的接口不可能是簡單的 alias
       因爲首先要處理 offset
       但是
       就地嵌套 還是需要被處理的
       並且我知道一個處理它的辦法
       比如
       <system-getdents64> <system-getdents64-name> get-system-string
       兩個詞兩個詞地看
       先處理
       <system-getdents64> <system-getdents64-name>
       這將編譯一個函數進去以切換 offset
       再處理
       <system-getdents64-name> get-system-string
       在 name-hash-table 中保存的名字
       就只是 "<system-getdents64-name> get-system-string" 而已
  - k ::
       這確實是有趣的設計
       並且在語法上 並沒有過載
       但是 在真正動手實現之前
       我覺得 還是想反思一下
       設想一下這種設計有什麼壞的效果
  - x ::
       壞的影響是語言變複雜了
       但是這是無可厚非的
       追求性狀 一定會導致系統變複雜
  - k ::
       那麼就看是否真能實現這些設計了
       看來所有東西都已經考慮到了
       還有一點
       之前說 在嵌套的時候 需要知道 就地分配內存的大小
       這些信息應該如何保存
  - x ::
       可以把 <title> 做爲一個 variable-jo
       在其中保存
       其實
       我還發現一個問題
       觀察這些設計
       它們對 類型系統 將會有很大影響
       類型系統 本身 也將影響 代碼生成機制
       因爲所生成的函數是有類型的
  - k ::
       也就是說兩個機制必須被綜合起來討論
  - x ::
       沒錯
