* mark-language <2015-12-10>

  - 嘗試設計 一般的 使用縮進的
    帶有語法擴展機制的 標記語言
    以避免設計語法時候的猶豫不決

* xml

  #+begin_src xml
  <bookstore>
    <book category="COOKING">
      <title lang="en">Everyday Italian</title>
      <author>Giada De Laurentiis</author>
      <year>2005</year>
      <price>30.00</price>
    </book>
    <book category="CHILDREN">
      <title lang="en">Harry Potter</title>
      <author>J K. Rowling</author>
      <year>2005</year>
      <price>29.99</price>
    </book>
    <book category="WEB">
      <title lang="en">Learning XML</title>
      <author>Erik T. Ray</author>
      <year>2003</year>
      <price>39.95</price>
    </book>
  </bookstore>
  #+end_src

* indentation

  #+begin_src cicada-language
  bookstore:

    book category="COOKING":
      title lang="en":
        Everyday Italian
      author:
        Giada De Laurentiis
      year:
        2005
      price:
        30.00

    book category="CHILDREN":
      title lang="en":
        Harry Potter
      author:
        J K. Rowling
      year:
        2005
      price:
        29.99

    book category="WEB":
      title lang="en":
        Learning XML
      author:
        Erik T. Ray
      year:
        2003
      price:
        39.95
  #+end_src

* indentation with definition

  #+begin_src cicada-language
  bookstore:

    define book:
      - category =
      | title:
        - lang =
      | author:
      | year:
      | price:

    book:
      - "COOKING"
      | Everyday Italian
        - "en"
      | Giada De Laurentiis
      | 2005
      | 30.00

    book:
      - "CHILDREN"
      | Harry Potter
        - "en"
      | J K. Rowling
      | 2005
      | 29.99

    book:
      - "WEB"
      | Learning XML
        - "en"
      | Erik T. Ray
      | 2003
      | 39.95

  function: add
    type:
      sequent:
        antecedent:
          natural natural
        succedent:
          natural
    match:
      sequent:
        antecedent:
          :m zero
        succedent:
          :m
      sequent:
        antecedent:
          :m :n succ
        succedent:
          :m :n recur succ

  function: add
    type:
      + natural natural
      | natural
    match:
      + :m zero
      | :m
      + :m :n succ
      | :m :n recur succ
  #+end_src

* sexp

  #+begin_src scheme
  (define process
    (lambda (string . processor-list)
      (define recur
        (fun
          ["" element-list -> element-list]
          [string
           element-list
           -> (just-fun [(apply-processor-list processor-list
                           string)]
                [(cons substring element-list-to-append)
                 -> (recur substring
                           (append element-list
                                   element-list-to-append))])]))
      (try
        (recur string '())
        :all-processor-miss-match
        (orz ("- process :all-processor-miss-match >_<\n")
             ("  string :\n~a\n" string)
             ("  processor-list :\n~a\n"
              (map (fun
                     [`(,faked-type-tg ,name ,function)
                      -> `(,faked-type-tg ,name)])
                   processor-list))
             ("\n")))))
  #+end_src

* sexp indentation

  #+begin_src cicada-language
  define process
    lambda (string . processor-list)
      define recur
        fun
          + "" element-list
          | element-list
          + string element-list
          | + just-fun
              - apply-processor-list
                processor-list string
              + cons substring element-list-to-append
              | + recur substring
                  + append element-list
                    element-list-to-append
      try
        string '() recur
        :all-processor-miss-match
        orz
          - "process :all-processor-miss-match >_<\n"
          - "string :\n~a\n" string
          - "  processor-list :\n~a\n"
            map
              fun
                + faked-type-tg name function
                | faked-type-tg name
              processor-list
          - "\n"
  #+end_src

* haml

  #+begin_src haml
  %html{ :xmlns => "http://www.w3.org/1999/xhtml",
         :lang => "en",
         "xml:lang" => "en"}

    %head
      %title BoBlog
      %meta{ "http-equiv" => "Content-Type",
             :content => "text/html",
             :charset => utf-8}
      %link{ "rel" => "stylesheet",
             "href" => "main.css",
             "type" => "text/css"}

    %body

      #header
        %h1 BoBlog
        %h2 Bob's Blog

      #content
        - @entries.each do |entry|
          .entry
            %h3.title= entry.title
            %p.date= entry.posted.strftime("%A, %B %d, %Y")
            %p.body= entry.body

      #footer
        %p
          All content copyright © Bob
  #+end_src

* cl-vs-haml

  #+begin_src cicada-language
  html:
    - xmlns = "http://www.w3.org/1999/xhtml"
    - lang = "en"
    - xml:lang = "en"
    head:
      title: BoBlog
      meta:
        - "http-equiv" = "Content-Type"
        - content = "text/html"
        - charset= "utf-8"
      link:
        - "rel" = "stylesheet"
        - "href" = "main.css"
        - "type" = "text/css"
    body:
      header:
        h1: BoBlog
        h2: Bob's Blog
      content:
        - [ entries.each do ]
          h3: .title = entry.title
          p: .date = entry.posted.strftime("%A, %B %d, %Y")
          p: .body = entry.body
      footer:
        p: All content copyright © Bob
  #+end_src

* pretty-print

  - 向 html sexp 的 pretty-print
    可以使用 文本編輯函數實現
    語法解析 + 向內存中編譯
    變成了
    語法解析 + 在緩衝區中編輯文本

* 實現

  - 不把編譯時期的整個代碼暴露給語法關鍵詞
    語法關鍵詞必須尊重縮進

  - 不限制縮進單位爲 2 個空格
    以嵌套在內部的首個非空行的縮進單位
    爲之後代碼縮進的標準

  - 不能把每個語法關鍵詞做爲全局的名稱處理
    因爲
    同一個語法關鍵詞嵌套在不同的外層語法關鍵詞下
    作用可能不同

  - 允許語法關鍵詞在函數體內重複
    不允許命名重複
    - 因而不允許命名空間重複出現

  - 每個語法關鍵詞所得到的是帶有元信息的 line-list
    以便在編譯出錯時報錯
    可以把 line-list 當成是 stack
    以 tos 取出來的是 block
    然後 drop 也以 block 爲單位 drop
    也就是
    儘量延遲 從 line-list 生成 block 的時間
    因爲
    並不是所有 類似 keyword 的東西都真的是 keyword
    當嵌入在某些 keyword 內時 他們可能有別的意思

  - 不用生成 sexp
    只需要在語法解析遍歷代碼的過程中
    把所需要的數據結構編譯到內存中 就行
    因爲
    深度優先地遍歷樹
    就自然對應於樹狀代碼書寫的順序
    - 如上所述
      生成 sexp 其實就是 pretty-print
      而 pretty-print 可以使用遍歷時候的文本編輯實現

  - 'define-*' 這些能形成命名空間的 keyword
    內部可能嵌套有其他的 同等級別的 'define-*'
    每個 'define-*' 需要能夠在 list 中找出自己需要的數據
    然後吃掉這些數據 並把後面的數據繼續遞歸處理
    也就是那種 head tail 模式
    但是
    這裏其實不必是嚴格的 head tail
    因爲 'define-*' 可以繞過某些 list element 去吃後面的元素
    只要讓 list 不斷減小就可以了
    也就是 '過濾處理' list

  - 也就是說 還是有兩個層次
    'define-*' 形狀的 keyword 是外層
    通常 外層是跟命名有關的編譯
    而 內層是跟命名無關的編譯
    注意
    in-line 語法也許可以處理爲嵌套的內層編譯

  - 可以發現
    這裏非常適合使用
    之前爲 cicada-nymph 設計的語法擴展機制
    即 用一個全局的語法棧來做 apply-*-list 的 list
    注意
    這次儘量把謂詞製作地相互不交
    這樣在 push 和 pop 的時候才能有良好的語義
    甚至
    in-line 的語法也許可以以同樣方式擴展
    注意
    此時 被 apply 的 function-list
    需要帶有 function-list 本身做爲參數
    並把這個 list 當作棧來使用
    也就是說 全局的語法棧 不能是全局的
    只是就這次編譯而言是全局的
    - 在 cicada-nymph 中
      把這種參數 墊到 被 apply 的 function 的參數的底下就行了
      [即 無名局部變元]
      但是在爲函數作用優化的語言中
      就必須要在調用 function 的時候增加一個參數[有名局部變元]
      通過有名局部變元傳遞這個參數

  - 其實並不適合
    因爲處理的只是開頭的東西
    其實可以用全局的語法關鍵詞
    因爲
    內部需要用不同函數處理 同名的 內層 keyword 的時候
    只要讓這個外層語法關鍵詞的函數 調用不同的函數即可

* 實現

  - x ::
       之前的 * 和 + 兩種縮進有很混亂的地方
       代碼也重複了兩遍
       應該反思一下

  - k ::
       因爲 tg-prefix[命名空間]管理
       與 函數定義 是重疊的
       實際上不該如此
       因爲
       並不是每個函數命名都想 生成 tg-prefix
       也不是每個 tg-prefix 下面都有實際內容
       因此
       把 '*' 視爲 'tg-prefix:' 的縮寫
       把 tg-prefix[命名空間]管理 和 命名
       這兩個性狀分離
       這樣語法解析的時候也方便多了

  - x ::
       這樣也做到了 每個 '*' 下
       沒有實際內容
       只有次層列表
       並且
       我們保持 implicit tg prefix
       同一個文件中的按順序出現的 '*'
       也施行 implicit tg prefix
       : 也就是說
       :   編輯 tg 時候的 tree 結構也被用到了
       這樣
       就有兩層的 implicit tg prefix 了
       一層是 一列的 tg
       一層是 一個 tg 內 t 的遞增
       跨文件的 tg 需要明顯聲明
       打破簡單線性 tg 的 也需要明顯聲明
       每個命名 都會自動加上 當前的 tg prefix

* 再實現

  - x ::
       一個的難點來自與 type-constructor
       和它底下的 element-constructor 之間的關係
       element-constructor 被當作 type-constructor 下的內容
       在處理 type-constructor 的時候處理
       但是
       element-constructor 也需要命名
       如果允許這裏的命名被 '*' 所形成的 tg-prefix 管理
       那麼就相當於
       把 '*' 所形成的縮進
       在某次 parse pass 的時候消除
       這樣在 某個 type-constructor 需要處理 的時候
       帶有 '*' 的
       和不帶 '*' 的 element-constructor
       縮進已經是一樣的了
       發現 可能有必要限制縮進的單位爲兩個空格

  - k ::
       是否讓每一行有一個縮進數做爲元數據
       這樣分層 parse 就讓代碼更好維護了

  - x ::
       但是有可能不行
       因爲
       並不是所有的縮進都帶有語義
       比如 文檔中的縮進
       和 註釋中的縮進

  - k ::
       注意
       keyword 並不是 tg
       因此可以重複和並列

* 語法擴展

  - x ::
       還有一種 語法擴展
       專門用於省略代碼中重複出現的並列信息[常常是元信息]
       有點類似於漢語中
       在某語境下 羅列想要表達的信息
       讓讀者自行補全元信息

* examples about 語法擴展

*** bookstore xml

    #+begin_src xml
    <bookstore>

      <book category="COOKING">
        <title lang="en">Everyday Italian</title>
        <author>Giada De Laurentiis</author>
        <year>2005</year>
        <price>30.00</price>
      </book>

      <book category="CHILDREN">
        <title lang="en">Harry Potter</title>
        <author>J K. Rowling</author>
        <year>2005</year>
        <price>29.99</price>
      </book>

      <book category="WEB">
        <title lang="en">Learning XML</title>
        <author>Erik T. Ray</author>
        <year>2003</year>
        <price>39.95</price>
      </book>

    </bookstore>
    #+end_src

*** bookstore indentation

    #+begin_src cicada-language
    bookstore:

      book:
        category = "COOKING"
        title: Everyday Italian
          lang = "en"
        author: Giada De Laurentiis
        year: 2005
        price: 30.00

      book:
        category = "CHILDREN"
        title: Harry Potter
          lang = "en"
        author: J K. Rowling
        year: 2005
        price: 29.99

      book:
        category = "WEB"
        title: Learning XML
          lang = "en"
        author: Erik T. Ray
        year: 2003
        price: 39.95
    #+end_src

*** bookstore indentation macro

    #+begin_src cicada-language
    bookstore:

      define-macro: book:
        - category =
        | title:
          - lang =
        | author:
        | year:
        | price:

      book:
        - "COOKING"
        | Everyday Italian
          - "en"
        | Giada De Laurentiis
        | 2005
        | 30.00

      book:
        - "CHILDREN"
        | Harry Potter
          - "en"
        | J K. Rowling
        | 2005
        | 29.99

      book:
        - "WEB"
        | Learning XML
          - "en"
        | Erik T. Ray
        | 2003
        | 39.95
    #+end_src

*** function indentation

    #+begin_src cicada-language
    function: add
      type:
        sequent:
          antecedent:
            natural natural
          succedent:
            natural
      match:
        sequent:
          antecedent:
            :m zero
          succedent:
            :m
        sequent:
          antecedent:
            :m :n succ
          succedent:
            :m :n recur succ
    #+end_src

*** function indentation macro

    #+begin_src cicada-language
    define-macro: type:
      from:
        + :antecedent
        | :succedent
      to:
        sequent:
          antecedent:
            :antecedent
          succedent:
            :succedent

    define-macro: match:
      from:
        list-of:
          + :antecedent
          | :succedent
      to:
        list-of:
          sequent:
            antecedent:
              :antecedent
            succedent:
              :succedent

    function: add
      type:
        + natural natural
        | natural
      match:
        + :m zero
        | :m
        + :m :n succ
        | :m :n recur succ
    #+end_src

*** content of keyword

    - the content of the following keyword 'function:'
      #+begin_src cicada-language
      function: add
        type:
          + natural natural
          | natural
        match:
          + :m zero
          | :m
          + :m :n succ
          | :m :n recur succ
      #+end_src
      is line-list of the following lines
      #+begin_src cicada-language
      add
      type:
        + natural natural
        | natural
      match:
        + :m zero
        | :m
        + :m :n succ
        | :m :n recur succ
      #+end_src

*** keyword match content

    - keyword define a list of content-matcher
      one content-matcher
      one action

    - to define a new macro
      is simply to cons new content-matcher to the list

    - the action of a new macro might be
      just partly parse its content
      and trans the structure been parsed
      to a new form and recursively apply the keyword

*** 問題的來源

    - x ::
         現在覺得實現很困難
         就是因爲對數據的結構化被延遲了
         原因之一
         需要報錯
         原因之二
         需要能讓 parsing keyword 自治
         比如 the content of 'note:'
         可能只是字符串
         也就是說 the content of 'note:' 是 非結構化 的

    - k ::
         說到這裏
         解法是不是就很顯然了

    - x ::
         沒錯
         我們只要實現一個函數
         把 結構化的數據 非結構化 即可
         這樣在正常的 parsing 過程中
         都是在處理結構化的數據

    - k ::
         這裏的教訓是
         總是把你的程序爲最常見的情形優化
         在考慮你程序的結構的時候
         總是先想最常見的情形

    - x ::
         何時去結構化一段數據
         要依據語法關鍵詞來判斷
         基本的語法關鍵詞的樣子是 'keyword:'
         另外 '*' '+' '|' 也是需要的

    - k ::
         可想而知
         應該有一個判斷語法關鍵詞的謂詞列表
         但是其實是不能變更這個鏈表的
         因爲
         只有先獲得結構化的數據
         才能擴展語法
         而這些語法關鍵詞就是獲得結構化數據的關鍵
         也就是說
         這些初始的語法關鍵詞
         決定了結構化數據的最細小顆粒
         後面做的 之能是把已經結構化的數據 去結構化了

    - x ::
         但是
         其實被 去結構化 的數據
         可以被重新以更細小的方式結構化
         這樣 在某個 'keyword:' 下面
         就可以更改 當前的語法關鍵詞列表
         所以 還是有可能動態添加 語法關鍵詞謂詞的

    - k ::
         如何實現這些呢

    - x ::
         只要我們可以先實現 最底層的語法擴展機制
         就可以用 最底層的語法擴展機制
         來實現高層的語法擴展機制
         應該如何實現底層的語法擴展機制
         要知道 matcher 的表達能力總是有限的
         最靈活的是 parser

    - k ::
         但是注意
         parser 是用模式匹配實現的
         比如 regexp 就是一種模式匹配

    - x ::
         但是區別是
         我們在這裏 match 的已經是 結構化的數據了
         但是只是相對結構化
         我們把某些明顯的語法解析樹中的結構
         編碼到序列的模式中了
         - regexp 就是最極端的情形
           因爲 string 是線性的序列
         匹配時 需要複雜小心處理的就是這些模式
         - RNA 到蛋白質的翻譯過程 [回憶中心法則]
           還有翻譯之後 對氨基酸序列的修飾
           都是線性的數據被轉化爲結構化的數據的過程
           比如
           編譯器 編譯出來程序幫助 編譯器自己編譯自己
           細胞中 生產蛋白質 幫助細胞複製
           又是有趣的類比

    - k ::
         我們能窮舉出所有的對語法解析樹的這種編碼嘛
         如果不能
         我們能找到主要情形嘛

    - x ::
         主要情形就是把元信息添加回去

* indent in and out

  - indent in as '('
    indent out as ')'

* result

*** function indentation

    #+begin_src cicada-language
    function: add
      type:
        sequent:
          antecedent:
            natural natural
          succedent:
            natural
      match:
        sequent:
          antecedent:
            :m zero
          succedent:
            :m
        sequent:
          antecedent:
            :m :n succ
          succedent:
            :m :n recur succ
    #+end_src

*** function indentation result

    #+begin_src scheme
    (text: <string> <line-number> <file>)

    (df-maco: match:
      (fm:
        (list-of:
          (+ :antecedent)
          (- :succedent)))
      (to:
        (list-of:
          (sequent:
            (antecedent:
              :antecedent)
            (succedent:
              :succedent)))))

    (function:
      (text: "add")
      (type:
        (sequent:
          (antecedent:
            (text: "natural natural"))
          (succedent:
            (text: "natural"))))
      (match:
        (sequent:
          (antecedent:
            (text: ":m zero"))
          (succedent:
            (text: ":m")))
        (sequent:
          (antecedent:
            (text: ":m :n succ"))
          (succedent:
            (text: ":m :n recur succ")))))
    #+end_src

* 實現

  - 遍歷的過程中對很多全局變量有副作用
    包括
    - tg-stack
      由 '*' 來作用

  - keyword-recognizer-list 是全局常量

  - 每個 keyword 都有自己的作用函數
    用 apply-keyword 來作用於 content

  - keyword define a content-explainer-stack
    one content-explainer
    one action

  - to define a new macro
    is simply to push content-explainer-stack

  - the action of a new content-explainer
    might be just trans the content
    and apply-keyword again to it
    - thus
      under one keyword
      the syntax can be optimized little by little

* 標記語言中的 macro

*** note

    - 有兩種行爲
      一個是 push 某個 keyword 的 content-explainer-stack
      一個是 定義新的 keyword
      如何生成新的 content-explainer

*** function indentation macro

    #+begin_src cicada-language
    function: add
      type:
        sequent:
          antecedent:
            natural natural
          succedent:
            natural
      match:
        sequent:
          antecedent:
            :m zero
          succedent:
            :m
        sequent:
          antecedent:
            :m :n succ
          succedent:
            :m :n recur succ

    define-macro: type:
      from:
        + :antecedent
        | :succedent
      to:
        sequent:
          antecedent:
            :antecedent
          succedent:
            :succedent

    define-macro: match:
      from:
        @ group:
          @ one-or-more
          + :antecedent
          | :succedent

      to:
        @ group:
          @ one-or-more
          sequent:
            antecedent:
              :antecedent
            succedent:
              :succedent

    function: add
      type:
        + natural natural
        | natural
      match:
        + :m zero
        | :m
        + :m :n succ
        | :m :n recur succ
    #+end_src

*** bookstore xml

    #+begin_src xml
    <bookstore>

      <book category="COOKING">
        <title lang="en">Everyday Italian</title>
        <author>Giada De Laurentiis</author>
        <year>2005</year>
        <price>30.00</price>
      </book>

      <book category="CHILDREN">
        <title lang="en">Harry Potter</title>
        <author>J K. Rowling</author>
        <year>2005</year>
        <price>29.99</price>
      </book>

      <book category="WEB">
        <title lang="en">Learning XML</title>
        <author>Erik T. Ray</author>
        <year>2003</year>
        <price>39.95</price>
      </book>

    </bookstore>
    #+end_src

*** bookstore

    #+begin_src cicada-language
    bookstore:

      book:
        attribute: category COOKING
        title:
          attribute: lang en
          Everyday Italian
        author:
          Giada De Laurentiis
        year:
          2005
        price:
          30.00

      book:
        attribute: category CHILDREN
        title:
          attribute: lang en
          Harry Potter
        author:
          J K. Rowling
        year:
          2005
        price:
          29.99

      book:
        attribute: category WEB
        title:
          attribute: lang en
          Learning XML
        author:
          Erik T. Ray
        year:
          2003
        price:
          39.95
    #+end_src

*** bookstore macro

    #+begin_src cicada-language
    bookstore:

      define-macro: book:
        from:
          + :category
          | :title
            + :lang
          | :author
          | :year
          | :price
        to:
          attribute: category :category
          title:
            attribute: lang :lang
            :title
          author: :author
          year: :year
          price: :price

      book:
        + COOKING
        | Everyday Italian
          + en
        | Giada De Laurentiis
        | 2005
        | 30.00

      book:
        + CHILDREN
        | Harry Potter
          + en
        | J K. Rowling
        | 2005
        | 29.99

      book:
        + WEB
        | Learning XML
          + en
        | Erik T. Ray
        | 2003
        | 39.95
    #+end_src
