* 類型檢查
  - x ::
       分兩步來討論
       首先是不涉及局部命名的
       其次是涉及局部命名的
       之後再加 模式匹配 與 隱式參數 等等複雜性狀
  - k ::
       首先是不涉及局部命名的
       其實實現方式已經想通了
       難點在於
       如何判斷 用函數體計算而得的類型
       是否是 所聲明的則式右邊的子類型
  - x ::
       沒錯
       如果根本沒有子類型的話
       直接看二者是否相等就行了
       但是子類型是必須有的
       比如
       A : (a b -> z)
       函數體爲
       B : (a' b' -> c d)
       C : (d' -> e)
       D : (c' e' -> 'z)
       發現有兩個地方需要判斷
       則式左邊
         a' b' 必須 大於等於 a b
         這樣才能保證這樣定義的函數
         能夠作用於 a b
       則式右邊
         'z 必須 小於等於 z
         這樣才能保證所返回的類型
         沒有超過所聲明的
       也就是說
       函數複合的限制條件是
       複合 (a' b' -> c d) (d' -> e)
       的條件是 d <= d'
       而類型檢查看起來是
       (a b)
         <= (a' b' -> c d)
         <= (d' -> e)
         <= (c' e' -> 'z)
         <= (z)
  - k ::
       涉及局部命名之後呢
  - x ::
       #+begin_src cicada-language
       可以發現 只要判斷好 則式 各端的 偏序關係就行了
       (type #type -> :type list)
       可以和 ({type #type} :type list -> :type abc) 複合
       但是不能和 (natural list -> natural abc) 複合
       因爲後者只能作用於 natural list
       而前者可能返回的 :type list 其中 :type 可能是別的類型
       #+end_src
  - k ::
       但是
       如下的複合應該是可以的
       #+begin_src cicada-language
       (natural list -> natural abc)
       ({type #type} :type list -> :type abc)
       (natural abc -> natural list)
       #+end_src
       雖然 :type abc >= natural abc
       但是 當前面複合了 之後
       後面就變成了 natural abc == natural abc
  - x ::
       #+begin_src cicada-language
       F : (natural list -> natural list)
       函數體爲
       A : (natural list -> natural abc)
       B : ({type #type} :type list -> :type abc)
       C : (natural abc -> natural list)
       在 A B 複合時 #type 會被綁定爲 abc
       首先看 abc 是否屬於 type
       發現屬於
       於是 :type 出現的時候就是 abc 了
       注意 A B 作用完畢之後 #type 這次綁定就沒有了
       #+end_src
  - k ::
       也就是說 判斷 然後 綁定 就行了
       我想我們已經可以着手具體實現了

* 模式匹配 與 隱式參數
  - x ::
       當匹配到一個結構化數據時
       會自動從把其中的信息提取出來
       補充到隱式參數裏
       類型檢查器將利用這些信息
       來檢查 用函數體計算而得的類型
       是否是 所聲明的則式右邊的子類型
  - k ::
       我們發現 信息的提取其實是 則式 中的局部命名
       而模式匹配還涉及到分支
  - x ::
       我們很早就知道
       分支結構就是 邏輯中的 或
       #+begin_src cicada-nymph
       : list-length?map
         ({type #type #type'
           (:type -> :type') #function
           :type list #list natural #length}
          :list :length list-length?
          -------------------------->
          :list :function map :length list-length?)
         * list-length?null
         | list-length?null
         * :inductive-hypothesis list-length?cons
         | :inductive-hypothesis list-length?map list-length?cons
       ; proof-theorem
       #+end_src
       當匹配 (:list :length list-length?) 這個類型的時候
       其函數體中 list-length?null 的類型其實是
       (null 0 list-length?)
       它比 (:list :length list-length?) 小
       其實是能用匹配的
       但是 因爲有模式匹配
       我們就可以把 (:list :length list-length?)
       分成兩種都小於這個類型的情況
       來分類證明
       這裏的要求是
       所有分支則式 左邊的或 大於等於 聲明的左邊
       而所有分支則式 右邊的或 小於等於 聲明的右邊
  - k ::
       也就是說 '或' 是偏序關係中的一個計算
       當然了 這就是 '取上界' 二元運算
  - x ::
       這下可以着手實現了
       我們只要 在類型的空間中
       實現這個 偏序關係
       還有 這個二元運算 就行了
       不是嗎
  - k ::
       沒錯
  - x ::
       也就是說
       每個分支都算出一個則式
       然後我們把它 '或' 起來
       看看結果是否和聲明相容
  - k ::
       問題就是
       如何實現 偏序關係 還有 或
       偏序關係就是 子類型
       我們之前說這與 類型類 有關
       但是還不知道具體應該如何處理
  - x ::
       注意類型和類型之間有兩種關係
       一是 子類型
       一是 屬於
       還需要設計機制以避免悖論

* 類型類 與 子類型
  - x ::
       我們嘗試直接把類型類實現爲 type 的子類型
  - k ::
       也就是要實現
       類型空間中的基本關係之一 子類型
  - x ::
       沒錯
       子類這個關係 應該被
       類型的 接口函數列表編碼
       而接口函數有兩種
       一種是 抽象的
       一種是 具體的
       子類型 這個關係
       取決於
       兩個接口函數列表 是否有包含關係
       而
       屬於 關係
       比如 1 屬於 自然數
       聲明了 1 可以被 自然數 的接口函數作用
       哦 我明白了
       每個數據結構
       都可以有一定的
       抽象性[由其抽象接口決定]
       和 具體性[由其具體接口決定]
  - x ::
       當
       聲明
       Number < Set 時
    1. Number 繼承 Set 的所有接口
       抽象的 和 具體的
       然後添加新的接口
  - x ::
       而
       聲明
       fixnum : Number 時
    1. Number 的具體接口函數就可以直接作用於 fixnum 了
    2. 而 Number 的抽象接口函數 必須被 fixnum 實例化
       複雜的例子是
       Cast-able < (Set x Set)
       (string x int) : (Set x Set)
       (string x int) : Cast-able
       或者 [因爲我們有棧] 所以可以直接寫成
       Cast-able < Set Set
       string int : Set Set
       string int : Cast-able
       例如
       method:
       cast : Cast-able from to => (orig : from) -> to
  ----------------------------------
  - k ::
       我想現在我們終於可以開始具體實現了吧
  - x ::
       我想可以了
       我們也可以從 agda 取更多的例子來實驗語法
       哦 等等
       我們去從 idris 取例子來實驗剛纔關於類型類的語義
       然後看看我們的 類型空間
       在我們所定義的基本關係與運算的約束下是否良好
       也就是說我們先好好學一下 idris
       它也是設計得很好的語言

* >< 匿名函數
  - x ::
       能否直接用 則式 (... -> ...)
       在運行時的作用 來實現匿名函數

* >< 名字的結構
  - x ::
       如何命名
       如何在有各種需要命名以區分的機制的衝擊下
       規範命名方式
       比如
       模塊
       子類型 [類型類]
       屬於

* 子類型 與 類型類
  - x ::
       需要找一個 OO 語言比較一下

* 抽象的 和 具體的 接口 能否並存
  - x ::
       之前的想法也許是錯的
       抽象的 和 具體的 接口 也許不能並存
  - k ::
       爲什麼需要兩個層次之外的層次
       因爲 hott 邪

* 考慮集合論
  - x ::
       子集[子類型]的特殊情形是 (... -> type)
       a < type
       a 繼承了 type 的接口 並可以擴展這個接口
       b (natural -> type)
       b 繼承了 type 的接口 並可以擴展這個接口
       但是繼承的方式是特殊的
       所有 type 的接口函數
       都能被轉化爲 b 的接口函數
       也就是說 函子 是比 單純的 子類型關係 更有趣的關係
       即 子類型 給出 平凡函子
       也就是說 函子 給了每個 子類型關係一個名字


* 看完 licata 的課程之後 再回來整理筆記
  - x ::
       types are inf-groupoids
       是利用 ':' 和 '=' 來給 type 空間 形成層次結構

* 如果沒有類型類
  - x ::
       如果沒有 類型類
       也就是說沒有 子類型
       但是此時
       子類型 關係還在
       而 唯一引入子類型關係的
       就是 lattice 中的 二元運算 '上界' 了
       也就是說
       類型空間就是
       類型原子 由 '上界' 自由生成 的 lattice


* 着手實現
  - x ::
       我不想看 hott 了
       我想着手實現 我們對接口繼承的構想
       之後再測試其理論性質
  - k ::
       說過第一個版本的編譯器將用 racket 實現
       類型檢查成功之後
       把 則式 和 函數體編譯 到 image 中就行了
       注意
       因爲 name-hash-table 是在 image 中的
       所以不會有命名難題
       編譯器在做鏈接的時候
       只需要解決 primitive 的編號問題
  - x ::
       有趣的是 name-hash-table
       同時爲 編譯器 與 語言本身的解釋器 所操作
       編譯器生成新定義的時候 肯定要用到它
  - k ::
       我們現在就去實現 js 版本的 nymph 吧
       我們同時維護兩個 vm 以測試其可移植性
