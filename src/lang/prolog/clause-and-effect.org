#+title: clause and effect

* preface

  - The emphasis of this book is on a simplified
    and disciplined methodology for discerning
    the mathematical structures related to a problem,
    and then turning these structures into Prolog programs.

* 1 Getting Started

* 2 Data Structures

* 3 Mapping

* 4 Choice and Commitment

* 5 Difference Structures

  - x -
    using difference structures is like factoring space.
    i.e. to vue the space as quotient space of richer space

    int-t == (x : nat-t, y : nat-t) / x1 + y2 == x2 + y1
    list-t == (x : list-t, y : list-t) / append

* 6 Case Study: Term Rewriting

* 7 Case Study: Manipulation of Combinational Circuits

* 8 Case Study: Clocked Sequential Circuits

* 9 Case Study: A Compiler forThree Model Computers

* 10 Case Study: The Fast Fourier Transform in Prolog

* 11 Case Study: Higher-Order Functional Programming
