#+TITLE:  note of taocp

* basic concepts

*** MIX (as CISC)

    6-bits-byte
    two bytes are enough to address a memory cell, 2^12 == 4096

    - byte
      the basic unit of information
      one byte contains [ 64=2^6 ~ 100=10^2 ] distinct values
      a algorithm in MIX should work properly regardless of how big a byte is
    - word
      a computer word consists of five bytes(0 ~ 1,073,741,823) and a sign
      the sign portion has only two possible values: + and —
    - registers
      there are nine registers in MIX
      * A-register (rA) (Accumulator)
        consists of five bytes and a sign
        The A-register has many uses
        especially for arithmetic and for operating on data
      * X-register (rX) (Extension)
        likewise, comprises five bytes and a sign
      * I-registers (rI1-6) (Index registers)
        I1, 12, 13, 14, 15, 16
        each hold two bytes together with a sign
      * J-register (rJ) (Jump address)
        holds two bytes
        it behaves as if its sign is always +
    - Instruction format
      computer words used for instructions:
      *sign A A: I F C*
      sign A A: address
      I: index specification
      F: modification
      C: operation code

*** MMIX (as RISC)

    *1 byte = 8 bit*

    *One octabyte equals four wydes equals eight bytes equals sixty-four bits*

    MMIX program can refer to as many as 2 64 bytes
    each with its own address from # 0000000000000000 to #ffffffffffffffff

    two's complement notation:
    the leftmost bit indicates the sign
    if the leading bit is 1, we subtract 2^n to get the integer
    corresponding to an n-bit number in this notation

*** Instructions

    an instruction is a tetrabyte
    whose four bytes are conventionally called OP, X, Y, and Z
    an operation code or ``opcode''
    and 3 operands
    *OP X Y Z*
    the operand bytes are always regarded as unsigned integers
    each of the 256 possible opcodes has a symbolic form that is easy to remember

* information structures

*** >< introduction

    -

*** >< linear lists

*** >< trees

*** >< multilinked structures

*** >< dynamic storage allocation
