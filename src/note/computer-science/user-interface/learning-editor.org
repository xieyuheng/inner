#+TITLE: learning text edition

* note
  1. 文本编辑器应该更结构化
     不同的基本数据结构
     那么为执行某些任务而使用某个函数的方式就不同
     这样文本编辑的体验也就不同了
     而所谓的``更结构化''就是去使用更丰富的数据结构
     不用buffer而用语法元素的链表来保存被编辑的文本
  2. 对键绑定的设计应该看按键的位置
     而不应该看按键是作为那个英文单词的首字母
     就像某些游戏对快捷键的设计一样
     关于巡航的快捷键应该如此
     关于编辑的快捷键也应该如此
  3. 有额外的插入模式
     就增加了可以使用的具有函数语义的按键的数量
  4. 在界面设计方面
     插入模式和编辑模式之间应该有夸张的区别
  5. 对teco而言
     可以用<space>来代替$
     用<cr>来代替$$
  6. teco的kill在删除行的同时也删除了空行
     这与emacs是不同的
     我想所有的删除和移动操作都是步子越细小越好
  7. 重点不是要学teco的函数与操作方式
     而是学实现技术
     然后自己设计用户界面
  8. 在用户界面之前
     一个人需要作的是:
     1) 基本的数据结构
     2) 基本的函数
     3) 提供一种形成抽象的方式
     其中1)和3)再小语言学家中都已经有了
     之差2)了
* linux console
** control char (14 of them)
00(NUL)

07(BEL)
08(BS)
09(HT)
0a(LF)
0b(VT)
0c(FF)
0d(CR)
0e(SO)
0f(SI)

18(CAN)

1a(SUB)
1b(ESC)

7f(DEL)

** meaning
一个控制字符会立刻生效
然后被丢弃(即使是在转义序列中间)
之后转义序列才继续处理下一个字符
+ 在任何情况下
  ESC都表示一个新的转义序列的开始
  可能导致前一个序列的非正常终止
  CAN和SUB终止任何转义序列
可识别的控制字符有10种 13个:
BEL  (0x07,^G)    铃声
BS   (0x08,^H)    后退一格(在行首不起作用)
HT   (0x09,^I)    跳至下一个制表位.如果后面已没有制表位则跳至行尾

LF   (0x0A,^J)
VT   (0x0B,^K)
FF   (0x0C,^L)    三者都表示换行

CR   (0x0D,^M)    回车并换行
SO   (0x0E,^N)    激活G1字符集,如果设置了LF/NL(新行模式)还要加上回车换行
SI   (0x0F,^O)    激活G0字符集

CAN  (0x18,^X)
SUB  (0x1A,^Z)    两者都表示中断转义序列

ESC  (0x1B,^[)    开始一个新的转义序列
DEL  (0x7F)       忽略
* >< teco
can we build videoteco on top of teco?
can we make a version, suit to build videoteco on top of it?
* videoteco
** note
   1. functions are case-insensitive
   2. 像teco这种文本编辑器
      其repl应该被语法高亮
** video teco responds to certain control chars
   | delete-char | <ASCII 127> |
   | delete-word | <^W>        |
   | delete-line | <^U>        |
   | interrupt   | <^C>        |
   | suspend     | <^Z>        |
** echo line & repl
   Although most characters are echoed in their normal representation,
   there are a few which are treated specially:
   | <esc> | $    |
   | <tab> | ____ |
   | <cr>  | <cr> |
** buffers
   | open-buffer                 | eb<name> <number>eb |
   | write-buffer-to-file        | ew<name> ew         |
   | delete-current-buffer       | ef                  |
   | force-delete-current-buffer | -ef                 |
** command modifiers
   | @ | good idea |
   | : | bad idea  |
** registers (or buffers)
   <r> denotes <register-name>
   | copy-text,cursor->register,by-line     | nx<r>    |
   | copy-text,cursor->register,by-region   | n,mx<r>  |
   | append-text,cursor->register,by-line   | :nx<r>   |
   | append-text,cursor->register,by-region | :n,mx<r> |
   |----------------------------------------+----------|
   | copy-text,register->cursor             | g<r>     |
   |----------------------------------------+----------|
   | save-number                            | nu<r>    |
   |----------------------------------------+----------|
   | fetch-number                           | nq<r>    |
   registers as buffers have names like TECO-A and TECO-1
   | open-register-buffer | eq<r> |
   registers about internal Video TECO data
   | eq_ | holds the current default search string                  |
   | eq- | holds the current search replace string                  |
   | eq* | holds the number and the name of the current edit buffer |
   | nx* | change buffer name                                       |
** stacks
   | pushDateStack | [<r> |
   | popDateStack  | ]<r> |
   特点是teco中的函数并不用栈来传递参数
   而是用寄存器来传递参数(即寄存器机)
** macros
   m<r>
** arithmetic expressions
   (q1*2)+(q2/7)-(z-./2)

   = command
   print the decimal equivalent of the expression in the message area of the screen
   to checking expression evaluation :
   | 2+3*4=   | dec |
   | 2+3*4==  | oct |
   | 2+3*4=== | hex |
** >< iterations
