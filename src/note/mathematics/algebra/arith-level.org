#+title: arith-level

* 算數的階數 [爲什麼沒有第四階運算?]

  - x -
    這個想法與相關的問題
    已經在我腦海裏徘徊了將近十年了
    它起源於小時候
    閱讀費恩曼物理學講義的第 22 章 代數學時的奇妙體驗
    之後我的很多對代數學的主動閱讀都與這個想法有關
    有很多時候我沉浸在這些想法中 在圖書館中漫無目的地尋書時
    潛在我意識中的有關這個想法的思考 會把我引向看來可能與其有關的書籍
    以下是大學時的筆記
    那時我還不懂編程 也不知道構造主義數學

  - 我們哪兒來的數呢?
    來自一個自然的序關係 {0, 1, 2, ...}
    這就是自然數集 N (爲了不偏離主題 我不去追究它的由來)
    之後就要引入運算
    這與數的擴張是同時進行的
    用前三級迭代自然地定義 加法 乘法 乘方 於 N
    [即自然數這個遞歸定義的數據類型
    再加上就這個數據類型而遞歸定義的函數]
    之後定義逆運算 減法 除法 開方 與 對數
    數的擴張來源於對於這些逆運算的完備性的要求
    因爲數的擴張是以運算爲基礎來完成的
    所以擴張而得的新數首先獲得它們的代數性質

  - 很重要的一點是
    用(前三級)迭代自然定義於 N 的運算
    固定它們的一個變元 而得到的一元函數
    是由 N 中的關係所描述的函數方程的解
    加法 -- 序關係
    乘法 -- 加法
    乘方 -- 乘法
    (因此它們歸根結底都與 N 中的序關係有關)
    並且這些函數給出了所描述的函數方程的所有解
    (對於乘法 要加一些限制)
    因此 可以等價地用函數方程的解來定義這些運算
    只不過一個技術問題是 函數方程的解都是一元的
    而運算是二元的

  - 這三階運算與序關係的關聯在於
    可以用它們的運算性質來等價地定義序關係
    因此當把這些與序關係等價的運算性質
    考慮於擴張而得到的數時
    就把這些數添加入了序集 N

  - 當我們說要給出一個初等函數在某點的值時
    (這裏還沒有用到實數集)
    其實是要給出這個函數值在擴張序集中的位置
    [把值化爲某種形式 使得序關係容易比較]

  - x -
    以下是在未了解構造主義之前
    關於抽象與具體之間的平衡的筆記
    那時我才剛了解 bourbaki

  - bourbaki 用形式主義的公理化方法
    以集合論爲基礎 定義結構族[抽象結構]
    再以結構族來分類紛繁的數學對象[具體結構]
    而這裏的想法則在於 強調每個結構的特殊性
    想要理解並創造出新的運算律
    我認爲運算律是核心重要的
    因爲它給我們以處理結構的手段 與擴展結構的思路
    數系的擴張有賴於此
    [可見我當時還把數學當作自足的遊戲]

  - [方法]
    所想出的 '尋找運算律的方法' 如下
    [即 在結構上引入帶有運算律的運算的方法]
    例如
    設某個結構 T
    與 (A : (T -> T))
    與 (B : (T T -> T))
    找所有的 T 上的變換 (f : (T -> T))
    滿足
    (1) (x A f = x f A)
    或
    (2) (x y B f = x f y f B)
    等等
    如若所找到的變換 f 的集合能以某種方式映射回結構 T
    就得到了 T 上的二元運算 (T T -> T)
    而所滿足的 例如 (1) (2) 的函數方程
    就給出了這個二元運算的運算律
    [自同態型函數方程的解集在函數複合下封閉]

  - [推廣]
    變換 (f : (T -> T)) 可以看成是函數方程的解
    這裏的函數方程是就 A B 而言的 T 的自同態
    又可將其看成是就某個關係 R 而言的自同態集
    這裏 R 的特殊性在於 它們都是用等式來表達的

  - [動機]
    有如此想法的動機在於
    觀察到自然數的算數運算可以依此方法來分級
    在這種處理方式下
    並非用遞歸定義來定義運算
    再證明相關的運算律
    而是先指出在結構中所能形成的函數方程
    與它們所對應的運算律
    然後解出這些函數方程
    再找把解集對應回原結構的方式
    以得到二元運算

  - [解集的性質]
    函數方程的形態 對應與 解集的代數性質
    自同態型函數方程的解集在函數複合下封閉
    [能否給出更豐富的例子?]

  - [展示性關係]
    在學會寫程序之前
    提出了所謂的數學結構的 '展示性' 關係
    這種關係包含在結構的定義當中
    用以 '展示' 元素在結構中的 '位置'
    現在知道 這只是對數據類型的遞歸定義
    或是對數據結構的編碼
    之前還認爲 '計算' 或 '近似計算'
    就是展示性元素在結構中的位置
    即 把非展示性關係化爲展示性關係
    現在知道 '計算' 就是有向地變化
