#lang pie

;; 1. The More Things Change, the More They Stay the Same

(claim one Nat)
(define one (add1 zero))

(claim two Nat)
(define two (add1 one))

;; 2. Doin' What Comes Naturally

(claim vegetables (Pair Atom Atom))
(define vegetables (cons 'celery 'carrot))

;; RECURSION IS NOT AN OPTION!

;; (claim gauss
;;   (-> Nat
;;       Nat))
;; (define gauss
;;   (lambda (n)
;;     (which-Nat n
;;       zero
;;       (lambda (prev)
;;         (add n (gauss prev))))))

(claim Pear U)
(define Pear (Pair Nat Nat))

(claim Pear-maker U)
(define Pear-maker
  (-> Nat Nat
      Pear))

(claim elim-Pear
  (-> Pear Pear-maker
      Pear))
(define elim-Pear
  (lambda (pear maker)
    (maker (car pear) (cdr pear))))

(check-same (Pair Nat Nat)
  (the Pear
    (elim-Pear
     (the Pear (cons 1 2))
     (the Pear-maker
       (lambda (a d)
         (cons d a)))))
  (cons 2 1))

;; 3. Eliminate All Natural Numbers!

(claim step-+
  (-> Nat
      Nat))
(define step-+
  (lambda (almost)
    (add1 almost)))

(claim +
  (-> Nat Nat
      Nat))
(define +
  (lambda (x y)
    (iter-Nat x y step-+)))

(claim step-gauss
  (-> Nat Nat
      Nat))
(define step-gauss
  (lambda (prev almost)
    (+ (add1 prev) almost)))

(claim gauss
  (-> Nat
      Nat))
(define gauss
  (lambda (n)
    (rec-Nat n zero step-gauss)))

(check-same Nat (gauss 0) 0)
(check-same Nat (gauss 1) 1)
(check-same Nat (gauss 2) 3)
(check-same Nat (gauss 3) 6)
(check-same Nat (gauss 4) 10)
(check-same Nat (gauss 5) 15)

;; pie has currying

(claim step-*
  (-> Nat Nat
      Nat))
(define step-*
  (lambda (y almost)
    (+ y almost)))

(claim *
  (-> Nat Nat
      Nat))
(define *
  (lambda (x y)
    (iter-Nat x zero (step-* y))))

(check-same Nat (* 2 2) 4)
(check-same Nat (* 2 3) 6)
(check-same Nat (* 3 2) 6)
(check-same Nat (* 3 4) 12)
(check-same Nat (* 4 3) 12)

(claim step-factorial
  (-> Nat Nat
      Nat))
(define step-factorial
  (lambda (prev almost)
    (* (add1 prev) almost)))

(claim factorial
  (-> Nat
      Nat))
(define factorial
  (lambda (x)
    (rec-Nat x one step-factorial)))

(check-same Nat (factorial 0) 1)
(check-same Nat (factorial 1) 1)
(check-same Nat (factorial 2) 2)
(check-same Nat (factorial 3) 6)
(check-same Nat (factorial 4) 24)

;; 4. Easy as Pie

(claim filp
  (Pi ([A U] [D U])
    (-> (Pair A D)
        (Pair D A))))
(define filp
  (lambda (A D)
    (lambda (p)
      (cons (cdr p) (car p)))))

(check-same (Pair Atom Nat)
  (filp Nat Atom (cons 123 'abc))
  (cons 'abc 123))

(check-same (-> (Pair Nat Atom) (Pair Atom Nat))
  (filp Nat Atom)
  (lambda (p) (cons (cdr p) (car p))))

(claim elim-Pair
  (Pi ([A U] [D U] [X U])
    (-> (Pair A D) (-> A D X)
        X)))
(define elim-Pair
  (lambda (A D X)
    (lambda (p f)
      (f (car p) (cdr p)))))

(claim kar
  (-> (Pair Nat Nat)
      Nat))
(define kar
  (lambda (p)
    (elim-Pair Nat Nat Nat p (lambda (a d) a))))

(claim kdr
  (-> (Pair Nat Nat)
      Nat))
(define kdr
  (lambda (p)
    (elim-Pair Nat Nat Nat p (lambda (a d) d))))

(check-same Nat (kar (cons 1 2)) 1)
(check-same Nat (kdr (cons 1 2)) 2)

(claim swap
  (-> (Pair Nat Atom)
      (Pair Atom Nat)))
(define swap
  (lambda (p)
    (elim-Pair
     Nat Atom (Pair Atom Nat)
     p (lambda (a d) (cons d a)))))

(check-same (Pair Atom Nat)
  (swap (cons 123 'abc)) (cons 'abc 123))

(claim twin
  (Pi ([A U])
    (-> A
        (Pair A A))))
(define twin
  (lambda (A)
    (lambda (a)
      (cons a a))))

(check-same (Pair Nat Nat)
  (twin Nat 123) (cons 123 123))

(check-same (Pair Atom Atom)
  (twin Atom 'abc) (cons 'abc 'abc))

(claim twin-Nat
  (-> Nat
      (Pair Nat Nat)))
(define twin-Nat
  (lambda (a)
    (cons a a)))

(check-same (Pair Nat Nat)
  (twin Nat 123) (twin-Nat 123))

(check-same (-> Nat (Pair Nat Nat))
  (twin Nat) twin-Nat)

;; 5. Lists, Lists, and More Lists

(claim expectations (List Atom))
(define expectations
  (:: 'cooked
    (:: 'eaten
      (:: 'tried-cleaning
        (:: 'understood
          (:: 'slept nil))))))

(claim toppings (List Atom))
(define toppings (:: 'potato (:: 'butter nil)))

(claim condiments (List Atom))
(define condiments (:: 'chives (:: 'mayonnaise nil)))

(claim step-length
  (Pi ([E U])
    (-> E (List E) Nat
        Nat)))
(define step-length
  (lambda (E)
    (lambda (e es almost)
      (add1 almost))))

(claim length
  (Pi ([E U])
    (-> (List E)
        Nat)))
(define length
  (lambda (E)
    (lambda (l)
      (rec-List l zero (step-length E)))))

(check-same Nat (length Atom expectations) 5)

(check-same (-> (List Atom) Nat)
  (length Atom)
  (lambda (l) (rec-List l zero (step-length Atom))))

(claim step-append
  (Pi ([E U])
    (-> E (List E) (List E)
        (List E))))
(define step-append
  (lambda (E)
    (lambda (e es almost)
      (:: e almost))))

(claim append
  (Pi ([E U])
    (-> (List E) (List E)
        (List E))))
(define append
  (lambda (E)
    (lambda (x y)
      (rec-List x y (step-append E)))))

(check-same (List Nat)
  (append Nat (:: 1 (:: 2 nil)) (:: 3 (:: 4 nil)))
  (:: 1 (:: 2 (:: 3 (:: 4 nil)))))

;; reusing `step-append`
(claim snoc
  (Pi ([E U])
    (-> (List E) E
        (List E))))
(define snoc
  (lambda (E)
    (lambda (es e)
      (rec-List es (:: e nil) (step-append E)))))

(check-same (List Nat)
  (snoc Nat (:: 1 (:: 2 nil)) 3)
  (:: 1 (:: 2 (:: 3 nil))))

(claim step-reverse
  (Pi ([E U])
    (-> E (List E) (List E)
        (List E))))
(define step-reverse
  (lambda (E)
    (lambda (e es almost)
      (snoc E almost e))))

(claim reverse
  (Pi ([E U])
    (-> (List E)
        (List E))))
(define reverse
  (lambda (E)
    (lambda (x)
      (rec-List x
        (the (List E) nil)
        (step-reverse E)))))

(check-same (List Nat)
  (reverse Nat (:: 1 (:: 2 (:: 3 (:: 4 nil)))))
  (:: 4 (:: 3 (:: 2 (:: 1 nil)))))

;; reusing `step-reverse`
(claim concat
  (Pi ([E U])
    (-> (List E) (List E)
        (List E))))
(define concat
  (lambda (E)
    (lambda (x y)
      (rec-List (reverse E y)
        x (step-reverse E)))))

(check-same (List Nat)
  (concat Nat (:: 1 (:: 2 nil)) (:: 3 (:: 4 nil)))
  (:: 1 (:: 2 (:: 3 (:: 4 nil)))))

;; 6. Precisely How Many?

(claim first-of-one
  (Pi ([E U])
    (-> (Vec E (add1 zero))
        E)))
(define first-of-one
  (lambda (E)
    (lambda (vec)
      (head vec))))

(check-same Nat
  (first-of-one Nat (vec:: 1 vecnil))
  1)

(claim first-of-two
  (Pi ([E U])
    (-> (Vec E (add1 (add1 zero)))
        E)))
(define first-of-two
  (lambda (E)
    (lambda (vec)
      (head vec))))

(check-same Nat
  (first-of-two Nat (vec:: 2 (vec:: 1 vecnil)))
  2)

(claim first
  (Pi ([E U]
       [prev Nat])
    (-> (Vec E (add1 prev))
        E)))
(define first
  (lambda (E prev)
    (lambda (vec)
      (head vec))))

(check-same Nat
  (first Nat 0 (vec:: 1 vecnil))
  1)
(check-same Nat
  (first Nat 1 (vec:: 2 (vec:: 1 vecnil)))
  2)

(claim rest
  (Pi ([E U]
       [prev Nat])
    (-> (Vec E (add1 prev))
        (Vec E prev))))
(define rest
  (lambda (E prev)
    (lambda (vec)
      (tail vec))))

(check-same (Vec Nat 0)
  (rest Nat 0 (vec:: 1 vecnil))
  vecnil)
(check-same (Vec Nat 1)
  (rest Nat 1 (vec:: 2 (vec:: 1 vecnil)))
  (vec:: 1 vecnil))

;; 7. It All Depends On the Motive

(claim mot-peas
  (-> Nat
      U))
(define mot-peas
  (lambda (n)
    (Vec Atom n)))

(claim step-peas
  (Pi ([prev Nat])
    (-> (mot-peas prev)
        (mot-peas (add1 prev)))))
(define step-peas
  (lambda (prev)
    (lambda (almost)
      (vec:: 'pea almost))))

(claim peas
  (Pi ([n Nat])
    (Vec Atom n)))
(define peas
  (lambda (n)
    (ind-Nat n
      mot-peas
      vecnil
      step-peas)))

(check-same (Vec Atom 3)
  (peas 3)
  (vec:: 'pea
    (vec:: 'pea
      (vec:: 'pea
        vecnil))))

(claim base-last
  (Pi ([E U])
    (-> (Vec E (add1 zero))
        E)))
(define base-last
  (lambda (E)
    (lambda (vec)
      (head vec))))

(claim mot-last
  (-> U Nat U))
(define mot-last
  (lambda (E k)
    (-> (Vec E (add1 k))
        E)))

(claim step-last
  (Pi ([E U]
       [prev Nat])
    (-> (mot-last E prev)
        (mot-last E (add1 prev)))))
(define step-last
  (lambda (E prev)
    (lambda (prev-last)
      (lambda (vec)
        (prev-last (tail vec))))))

(claim last
  (Pi ([E U]
       [prev Nat])
    (-> (Vec E (add1 prev))
        E)))
(define last
  (lambda (E prev)
    (ind-Nat prev
      (mot-last E)
      (base-last E)
      (step-last E))))

(check-same Nat
  (last Nat 2 (vec:: 1 (vec:: 2 (vec:: 3 vecnil))))
  3)

(claim mot-drop-last
  (-> U Nat
      U))
(define mot-drop-last
  (lambda (E prev)
    (-> (Vec E (add1 prev))
        (Vec E prev))))

(claim base-drop-last
  (Pi ([E U])
    (-> (Vec E (add1 zero))
        (Vec E zero))))
(define base-drop-last
  (lambda (E)
    (lambda (vec)
      vecnil)))

;; (claim step-drop-last
;;   (Pi ([E U]
;;        [prev Nat])
;;     (-> (-> (Vec E (add1 prev))
;;             (Vec E prev))
;;         (-> (Vec E (add1 (add1 prev)))
;;             (Vec E (add1 prev))))))
(claim step-drop-last
  (Pi ([E U]
       [prev Nat])
    (-> (mot-drop-last E prev)
        (mot-drop-last E (add1 prev)))))
(define step-drop-last
  (lambda (E prev)
    (lambda (prev-drop-last)
      (lambda (vec)
        (vec::
          (head vec)
          (prev-drop-last (tail vec)))))))

(claim drop-last
  (Pi ([E U]
       [prev Nat])
    (-> (Vec E (add1 prev))
        (Vec E prev))))
(define drop-last
  (lambda (E prev)
    (ind-Nat prev
      (mot-drop-last E)
      (base-drop-last E)
      (step-drop-last E))))

(check-same (Vec Nat 2)
  (drop-last Nat 2 (vec:: 1 (vec:: 2 (vec:: 3 vecnil))))
  (vec:: 1 (vec:: 2 vecnil)))

(check-same
    (-> (Vec Nat 3)
        (Vec Nat 2))
  (drop-last Nat 2)
  (lambda (vec)
    (vec:: (head vec)
      (vec:: (head (tail vec))
        vecnil))))

;; 8. Pick a Number, Any Number

(claim incr
  (-> Nat
      Nat))
(define incr
  (lambda (n)
    (iter-Nat n
      1
      (+ 1))))

(check-same Nat (incr 0) ((+ 1) 0))
(check-same Nat (incr 1) ((+ 1) 1))
(check-same Nat (incr 2) ((+ 1) 2))
(check-same Nat (incr 3) ((+ 1) 3))

(check-same (-> Nat Nat)
  incr
  (λ (n)
    (iter-Nat n
      (the Nat 1)
      (lambda (y)
        (add1 y)))))

(check-same (-> Nat Nat)
  (+ 1)
  (lambda (y)
    (add1 y)))

;; (check-same (-> Nat Nat) incr (+ 1))

;; - They are the same if they have the same normal form.
;; - Since they have different normal form, check-same will fail.
;; - Even though they are not the same,
;;   the fact that they always find the same answer
;;   can be written as a type.

(claim +1=add1
  (Pi ([n Nat])
    (= Nat (+ 1 n) (add1 n))))
(define +1=add1
  (lambda (n)
    (same (add1 n))))

(claim base-incr=add1
  (= Nat (incr zero) (add1 zero)))
(define base-incr=add1
  (same (add1 zero)))

(claim step-incr=add1
  (Pi ([prev Nat])
    (-> (= Nat (incr prev) (add1 prev))
        (= Nat (add1 (incr prev)) (add1 (add1 prev))))))
(define step-incr=add1
  (lambda (prev)
    (lambda (prev-incr=add1)
      (cong prev-incr=add1
        (the (-> Nat Nat)
          (lambda (n) (add1 n)))))))

(claim incr=add1
  (Pi ([n Nat])
    (= Nat (incr n) (add1 n))))
(define incr=add1
  (lambda (n)
    (ind-Nat n
      (lambda (n) (= Nat (incr n) (add1 n)))
      base-incr=add1
      step-incr=add1)))

;; 9. Double Your Money, Get Twice as Much

;; (claim step-incr=add1--with-replace
;;   (Pi ([prev Nat])
;;     (-> (= Nat (incr prev) (add1 prev))
;;         (= Nat (add1 (incr prev)) (add1 (add1 prev))))))
;; (define step-incr=add1--with-replace
;;   (lambda (prev)
;;     (lambda (prev-incr=add1)
;;       (replace prev-incr=add1
;;         (the (Pi ([n Nat])
;;                U)
;;           (lambda (n)
;;             (= Nat (add1 (incr prev)) (add1 n))))
;;         (the (= Nat (add1 (incr prev)) (add1 (incr prev)))
;;           (same (add1 (incr prev))))))))

(claim mot-incr=add1--with-replace
  (-> Nat Nat U))
(define mot-incr=add1--with-replace
  (lambda (prev n)
    (= Nat (add1 (incr prev)) (add1 n))))

(claim step-incr=add1--with-replace
  (Pi ([prev Nat])
    (-> (= Nat (incr prev) (add1 prev))
        (= Nat (add1 (incr prev)) (add1 (add1 prev))))))
(define step-incr=add1--with-replace
  (lambda (prev)
    (lambda (prev-incr=add1)
      (replace prev-incr=add1
        (mot-incr=add1--with-replace prev)
        (same (add1 (incr prev)))))))

(claim double
  (-> Nat
      Nat))
(define double
  (lambda (n)
    (iter-Nat n
      zero
      (lambda (prev)
        (add1 (add1 prev))))))

(check-same Nat (double 0) 0)
(check-same Nat (double 1) 2)
(check-same Nat (double 2) 4)
(check-same Nat (double 3) 6)

(claim twice
  (-> Nat
      Nat))
(define twice
  (lambda (n)
    (+ n n)))

(check-same Nat (twice 0) 0)
(check-same Nat (twice 1) 2)
(check-same Nat (twice 2) 4)
(check-same Nat (twice 3) 6)

(claim add1+=+add1
  (Pi ([n Nat]
       [j Nat])
    (= Nat (add1 (+ n j)) (+ n (add1 j)))))
(define add1+=+add1
  (lambda (n j)
    (ind-Nat n
      (lambda (n)
        (= Nat (add1 (+ n j)) (+ n (add1 j))))
      (the (= Nat (add1 (+ zero j)) (+ zero (add1 j)))
        (same (add1 j)))
      (the (Pi ([prev Nat])
             (-> (= Nat
                   (add1 (+ prev j))
                   (+ prev (add1 j)))
                 (= Nat
                   (add1 (+ (add1 prev) j))
                   (+ (add1 prev) (add1 j)))))
        (lambda (prev)
          (lambda (prev-add1+=+add1)
            (cong prev-add1+=+add1 (+ 1))))))))

(claim step-twice=double
  (Pi ([prev Nat])
    (-> (= Nat
          (+ prev prev)
          (double prev))
        (= Nat
          (add1 (+ prev (add1 prev)))
          (add1 (add1 (double prev)))))))
;; (define step-twice=double
;;   (lambda (prev)
;;     (lambda (prev-twice=double)
;;       (replace (the (= Nat
;;                       (add1 (+ prev prev))
;;                       (+ prev (add1 prev)))
;;                  (add1+=+add1 prev prev))
;;         (lambda (n)
;;           (= Nat
;;             (add1 n)
;;             (add1 (add1 (double prev)))))
;;         (the (= Nat
;;                (add1 (add1 (+ prev prev)))
;;                (add1 (add1 (double prev))))
;;           (cong prev-twice=double (+ 2)))))))
(define step-twice=double
  (lambda (prev)
    (lambda (prev-twice=double)
      (replace (add1+=+add1 prev prev)
        (lambda (n)
          (= Nat
            (add1 n)
            (add1 (add1 (double prev)))))
        (cong prev-twice=double (+ 2))))))

(claim twice=double
  (Pi ([n Nat])
    (= Nat (twice n) (double n))))
(define twice=double
  (lambda (n)
    (ind-Nat n
      (lambda (n) (= Nat (twice n) (double n)))
      (same zero)
      step-twice=double)))

(claim base-double-Vec
  (Pi ([E U])
    (-> (Vec E zero) (Vec E zero))))
(define base-double-Vec
  (lambda (E)
    (lambda (vec)
      vecnil)))

(claim step-double-Vec
  (Pi ([E U]
       [prev Nat])
    (-> (-> (Vec E prev)
            (Vec E (double prev)))
        (-> (Vec E (add1 prev))
            (Vec E (add1 (add1 (double prev))))))))
(define step-double-Vec
  (lambda (E prev)
    (lambda (prev-double-Vec)
      (lambda (vec)
        (vec:: (head vec)
          (vec:: (head vec)
            (prev-double-Vec (tail vec))))))))

(claim double-Vec
  (Pi ([E U]
       [l Nat])
    (-> (Vec E l)
        (Vec E (double l)))))
(define double-Vec
  (lambda (E l)
    (ind-Nat l
      (lambda (l) (-> (Vec E l) (Vec E (double l))))
      (base-double-Vec E)
      (step-double-Vec E))))

(check-same (Vec Nat 6)
  (double-Vec
   Nat 3
   (vec:: 1
     (vec:: 2
       (vec:: 3
         vecnil))))
  (vec:: 1
    (vec:: 1
      (vec:: 2
        (vec:: 2
          (vec:: 3
            (vec:: 3
              vecnil)))))))

(claim twice-Vec
  (Pi ([E U]
       [l Nat])
    (-> (Vec E l) (Vec E (twice l)))))
(define twice-Vec
  (lambda (E l)
    (lambda (vec)
      (replace (the (= Nat (double l) (twice l))
                 (symm (twice=double l)))
        (lambda (n)
          (Vec E n))
        (double-Vec E l vec)))))


(check-same (Vec Nat 6)
  (twice-Vec
   Nat 3
   (vec:: 1
     (vec:: 2
       (vec:: 3
         vecnil))))
  (vec:: 1
    (vec:: 1
      (vec:: 2
        (vec:: 2
          (vec:: 3
            (vec:: 3
              vecnil)))))))

;; 10. It Also Depends On the List

;; (claim step-list->vec
;;   (Pi ([E U])
;;     (-> E (List E) (Sigma ([l Nat])
;;                      (Vec E l))
;;         (Sigma ([l Nat])
;;           (Vec E l)))))
;; (define step-list->vec
;;   (lambda (E)
;;     (lambda (e es almost)
;;       (cons (add1 (car almost))
;;             (vec:: e (cdr almost))))))

;; (claim list->vec
;;   (Pi ([E U])
;;     (-> (List E)
;;         (Sigma ([l Nat])
;;           (Vec E l)))))
;; (define list->vec
;;   (lambda (E)
;;     (lambda (es)
;;       (rec-List es
;;         (the (Sigma ([l Nat]) (Vec E l))
;;           (cons 0 vecnil))
;;         (step-list->vec E)))))

;; (check-same (Sigma ([l Nat])
;;               (Vec Nat l))
;;   (list->vec Nat (:: 1 (:: 2 (:: 3 nil))))
;;   (cons 3 (vec:: 1 (vec:: 2 (vec:: 3 vecnil)))))

(claim step-list->vec
  (Pi ([E U]
       [e E]
       [es (List E)])
    (-> (Vec E (length E es))
        (Vec E (length E (:: e es))))))
(define step-list->vec
  (lambda (E e es almost)
    (vec:: e almost)))

(claim list->vec
  (Pi ([E U]
       [es (List E)])
    (Vec E (length E es))))
(define list->vec
  (lambda (E es)
    (ind-List es
      (the (-> (List E) U)
        (lambda (es)
          (Vec E (length E es))))
      vecnil
      (step-list->vec E))))

(check-same (Vec Nat 3)
  (list->vec Nat (:: 1 (:: 2 (:: 3 nil))))
  (vec:: 1 (vec:: 2 (vec:: 3 vecnil))))

;; 11. All Lists Are Created Equal

(claim mot-vec-append
  (Pi ([E U]
       [j Nat])
    (Pi ([l Nat]
         [vec (Vec E l)])
      U)))
(define mot-vec-append
  (lambda (E j)
    (lambda (l vec)
      (Vec E (+ l j)))))

(claim step-vec-append
  (Pi ([E U]
       [j Nat])
    (Pi ([k Nat]
         [h E]
         [t (Vec E k)])
      (-> (Vec E (+ k j))
          (Vec E (+ (add1 k) j))))))
(define step-vec-append
  (lambda (E j)
    (lambda (k h t almost)
      (vec:: h almost))))

(claim vec-append
  (Pi ([E U]
       [l Nat]
       [j Nat])
    (-> (Vec E l) (Vec E j)
        (Vec E (+ l j)))))
(define vec-append
  (lambda (E l j)
    (lambda (vec end)
      (ind-Vec l vec
        (mot-vec-append E j)
        end
        (step-vec-append E j)))))

(check-same (Vec Nat 4)
  (vec-append
   Nat 2 2
   (vec:: 1 (vec:: 2 vecnil))
   (vec:: 3 (vec:: 4 vecnil)))
  (vec:: 1 (vec:: 2 (vec:: 3 (vec:: 4 vecnil)))))

(claim vec->list
  (Pi ([E U]
       [l Nat])
    (-> (Vec E l)
        (List E))))
(define vec->list
  (lambda (E l)
    (lambda (vec)
      (ind-Vec l vec
        (lambda (l vec)
          (List E))
        nil
        (lambda (k h t almost)
          (:: h almost))))))

(check-same (List Nat)
  (vec->list Nat 3 (vec:: 1 (vec:: 2 (vec:: 3 vecnil))))
  (:: 1 (:: 2 (:: 3 nil))))

(claim step-list->vec->list=
  (Pi ([E U]
       [e E]
       [es (List E)])
    (-> (= (List E)
          es
          (vec->list
           E
           (length E es)
           (list->vec E es)))
        (= (List E)
          (:: e es)
          (vec->list
           E
           (add1 (length E es))
           (vec:: e (list->vec E es)))))))
(define step-list->vec->list=
  (lambda (E e es)
    (lambda (prev-list->vec->list=)
      (cong prev-list->vec->list=
        (the (-> (List E)
                 (List E))
          (lambda (es)
            (:: e es)))))))

(claim list->vec->list=
  (Pi ([E U]
       [es (List E)])
    (= (List E)
      es
      (vec->list E (length E es) (list->vec E es)))))
(define list->vec->list=
  (lambda (E es)
    (ind-List es
      (lambda (es)
        (= (List E)
          es
          (vec->list E (length E es) (list->vec E es))))
      (same nil)
      (step-list->vec->list= E))))

;; 12. Even Numbers Can Be Odd

(claim Even
  (-> Nat U))
(define Even
  (lambda (n)
    (Sigma ([half Nat])
      (= Nat n (double half)))))

(claim zero-is-even
  (Even 0))
(define zero-is-even
  (cons 0 (same 0)))

(claim +two-even
  (Pi ([n Nat])
    (-> (Even n)
        (Even (+ 2 n)))))
(define +two-even
  (lambda (n)
    (lambda (prev-even)
      (cons (add1 (car prev-even))
            (cong (cdr prev-even) (+ 2))))))

(claim two-is-even
  (Even 2))
(define two-is-even
  (+two-even 0 zero-is-even))

(claim Odd
  (-> Nat U))
(define Odd
  (lambda (n)
    (Sigma ([haf Nat])
      (= Nat n (add1 (double haf))))))

(claim one-is-even
  (Odd 1))
(define one-is-even
  (cons 0 (same 1)))


(claim add1-even->odd
  (Pi ([n Nat])
    (-> (Even n)
        (Odd (add1 n)))))
(define add1-even->odd
  (lambda (n)
    (lambda (even)
      (cons (car even)
            (cong (cdr even) (+ 1))))))

(claim add1-odd->even
  (Pi ([n Nat])
    (-> (Odd n)
        (Even (add1 n)))))
(define add1-odd->even
  (lambda (n)
    (lambda (odd)
      (cons (add1 (car odd))
            (cong (cdr odd) (+ 1))))))
