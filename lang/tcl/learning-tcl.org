#+TITLE:  learning tcl
#+AUTHOR: 謝宇恆 / XIE Yuheng

* note
  - 值與名的綁定
    用字符串實現
    而不用 symbol
    即
    簡化實現方式和一致性
    而犧牲速度
  - 我想 tcl 的設計
    可能是幾乎完全不考慮效率的
    其設計者本身就沒想要把其語言設計的高速
    因而就能採取一些有趣的設計決策
  - 關於名的語法設計
    就其作爲數據的本性而優化
    而不就其綁定的值而優化
  - 其函數作用語義以換行字符作爲邊界
    也就是說把 lisp 的
    可以控制的 明顯的 bar-ket 邊界
    變成了 無法控制的 隱式的 邊界
  - 當然
    有邊界就能重載函數作用的接口
    比如
    當 set 只有一個參數的時候 就取參數的值
  - 後果是
    佈置括號的方式
    要使得解釋器能夠
    把多行的代碼視爲一行
    在我看來
    這是很不好的性質
    相對中肯的評價是
    這種設計在表達某些特殊的語義時
    比 lisp 簡潔
    也就是說
    不同的語法適合與不同的場合
    正確的設計是 能夠在各種
    針對不同場合優化優化的語法之間 轉換

* function
  #+begin_src tcl
  # proc name { list_of_arguments } {
  #     body_expressions
  # }

  proc factorial {number} {
      if { $number == 0 } {
          return 1
      } else {
          return [expr $number * [factorial [expr $number - 1]]]
      }
  }

  puts factorial
  puts "[ factorial 13 ]"
  #+end_src

* datatype

*** note
    * 沒有良好的數據類型
      所有的值都是字符串
      跟類型有關的信息
      有時被編碼在函數名中
      比如 lappend 代表 list append
      有時使用所謂 subcommand
      比如 string length

*** string
    #+begin_src tcl
    # format prices with two digits after the point
    format "Price:  %0.2f" 17

    # pad some stuff out to fill 20 spaces
    format "%20s" "a long thing"

    format "%20s" "23"
    string length [format "%20s" "23"]

    # notice that the 20 spaces is a MINIMUM; use string range
    # if you might need to truncate
    format "%20s" "something way longer than 20 spaces"
    string length [format "%20s" "something way longer than 20 spaces"]
    # turn a number into an ASCII character
    format "%c" 65


    # turn an ASCII character into a number
    scan "A" "%c" the_ascii_value
    set the_ascii_value
    #+end_src

*** list
    #+begin_src tcl
    # create an empty list using the list command
    set user_preferences [list]
    # verify that we've created a 0-item list
    llength $user_preferences

    # lappend denotes list append
    lappend user_preferences "hiking"
    lappend user_preferences "biking"
    lappend user_preferences "whale watching"
    llength $user_preferences

    # lindex denotes list index
    lindex $user_preferences 0
    lindex $user_preferences 1
    lindex $user_preferences 2
    lindex $user_preferences 3
    lindex $user_preferences 5
    # indexing is 0-based
    # and lindex will return the empty string
    # rather than an error if you supply an out-of-range index

    if { [lsearch -exact $user_preferences "hiking"] != -1 } {
        puts "look for new articles related to hiking" }


    # use the multiple-argument form of list to create an N-element
    # list with one procedure call
    set spouse_preferences [list "programming" "computer games" "slashdot"]

    set household_preferences [concat $user_preferences $spouse_preferences]

    llength $household_preferences



    set einstein [list "A. Einstein" "Patent Office Clerk" "Formulated Theory of Relativity."]
    set mill [list "John Stuart Mill" "English Youth" "Was able to read Greek and Latin at age 3."]
    # let's build the big list of lists
    set average_folks [list $einstein $mill ...]
    # let's pull out Einstein's title
    set einsteins_title [lindex $einstein 1]


    proc define_person {name title accomplishment} {
        return [list $name $title $accomplishment]
    }

    proc person_name {person} {
        return [lindex $person 0]
    }

    proc person_title {person} {
        return [lindex $person 1]
    }

    proc person_accomplishment {person} {
        return [lindex $person 2]
    }

    set einstein [define_person "A. Einstein" "Patent Office Clerk" "Formulated Theory of Relativity."]
    set einsteins_title [person_title $einstein]




    # open the file for reading
    set addressees_stream [open "addressees.txt" r]

    # read entire file into a variable
    set contents_of_file [read $addressees_stream]

    close $addressees_stream

    # split the contents on newlines
    set list_of_lines [split $contents_of_file "\n"]

    # loop through the lines
    # 變量可以沒有初始值 此時取其值時 根據函數不同而不同
    foreach line $list_of_lines {
        if { [regexp {([^ ]*@[^ ]*)} $line one_address] } {
            lappend all_addresses $one_address
        }
    }

    # use the join command to mush the list together
    set bcc_line_for_mailer [join $all_addresses ", "]
    #+end_src

* pattern match
  #+begin_src tcl
  set something candelabra
  regexp a..a $something match
  set match

  set something candelabra
  regexp a(.*)a $something match
  set match

  # Note that
  # Tcl regexp by default behaves in a greedy fashion
  # There are three alternative substrings of "candelabra"
  # that match the regexp a(.*)a
  # "andelabra" "andela" "abra"
  # Tcl chose the longest substring
  # This is very painful when trying to pull HTML pages apart

  set simple_case "Normal folks might say <i>et cetera</i>"
  regexp {<i>(.+)</i>} $simple_case match italicized_phrase
  set match
  set italicized_phrase

  set some_html "Pedants say <i>sui generis</i> and <i>ipso facto</i>"
  regexp {<i>(.+)</i>} $some_html match italicized_phrase
  set match
  set italicized_phrase

  set date_typed_by_user "06/02"
  regexp {([0-9][0-9])/([0-9][0-9])} $date_typed_by_user match month year
  set match
  set month
  set year
  #+end_src

* control structure
  * Control structures let you say
    1. run this fragment of code if X is true
    2. do this a few times
    3. do this until something is no longer true
  * the available control structures in tcl
    may be grouped into the following categories
    1. conditional
    2. looping (iteration)
    3. error-handling
    4. miscellaneous (non-local exit)
  #+begin_src tcl
  # if boolean?then? body1?else??body2?
  if { $last_visit != "" } {
      # this is a return visitor
      append page "welcome back"
  }

  if { $state == "California" && $city == "Pico Rivera" && $status == "taxable" } {
      # order being shipped to Pico Rivera, California
      # AND (note use of logical operator "&&") item is taxable
      append page "We have to charge you the nation's highest sales tax rate, 9.75 percent"
  }

  if { $status == "subscriber" || $referred_by_google_news } {
      # the requestor is a subscriber OR was directed here by Google News
      # so bypass the paywall by setting "apply_paywall" to false
      set apply_paywall 0
  }


  # if {condition} {
  #    body
  # } elseif {other_condition} {
  #    alternate_body
  # } else {
  #    another_body
  # }
  #+end_src

* eval
  * building tcl commands with tcl
    and feeding them back to tcl
  * 同 lisp 一樣
    用以實現記解釋器的函數
    被重新作爲被解釋的函數而暴露給了用戶
  #+begin_src tcl
  puts stdout "Hello, World!"

  set cmd {puts stdout "Hello, World!"}
  eval $cmd


  set a "foo bar"
  puts {a=$a date=[exec date]}
  subst {a=$a date=[exec date]}
  #+end_src

* exec
  * building unix commands with tcl
    and feeding them to unix
  * 並且 看來 tcl 在搜索不到 command 時
    就會嘗試用 exec 去執行 unix 的程序
    也就是會搜索可執行程序路徑下的程序命
  #+begin_src tcl
  exec ls
  #+end_src
