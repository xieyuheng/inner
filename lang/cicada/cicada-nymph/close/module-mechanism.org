* 題解
  * 本身爲 加載機制
    最後得 模塊機制
* 討論 <2015-06-01>
  - x ::
       是實現 加載機制 的時候了
       我們剛纔把 undo 機制 做爲因子從 加載機制 中提取了出去
       現在看看還能不能提取出別的 因子
  - k ::
       但是 其實這種 對因子的提取 是在解決問題的過程中才被發現的
       我們還是試試看先去解決眼前的問題吧
  - x ::
       好的
       已經知道需要實現的東西的效果了
       試着描述一下步驟就行了
    1. 首先是讀文件
       有一些謂詞來聞訊 元碼 的情況
       元碼有問題就報錯
    2. 元碼中會包含 need 語句
       用來 聲明依賴關係
       當所依賴的 代碼 沒有被加載時
       need 會遞歸調用 load 來加載它們
    3. 然後就是對 代碼 的 eval
       這裏實際的對代碼的加載反而是最簡單的部分
  - k ::
       先忽略錯誤處理步驟的話
       那麼就是
       讀文件 返回兩個字符串 一個是 元碼 一個是 代碼
       分別傳遞給兩個語境來解釋
       元碼的語法可以和代碼完全不同
       那麼 元碼 的語境應該如何呢
       其語法應該如何設計
  - x ::
       也就是說 我們有
       <string> eval
       和
       <meta-code> eval
       前者並不切換語境
       後者切換語境
  - k ::
       我發現
       <meta-code> eval 應該在
       <string> eval 成功之後進行
       但是等等
       我們好像連元碼的具體作用是什麼還沒有搞清楚
       我們只知道它必要而已
       當加入這樣一些元數據在代碼的開頭之後
       我們應該如何利用這些元數據所包含的信息
  - x ::
       首先
       需要把這些元數據中的一部分保存在 loading-stack 中
       這些元數據中的其他部分可能只起到文檔作用還有註釋作用
       其次
       這些 元碼 中能夠包含一些東西
       在 <string> eval 之前和之後 被執行
       尤其是 我們需要檢驗 <string> eval 的執行效果 以避免洪水一般地報錯信息
  - k ::
       沒錯
       也就是說 文件頭部的這個 string 可能被掃描多次
       每次的用意都不同
       但是 對 <string> eval 的執行效果 的檢驗 可能是無法實現的
       因爲出錯的時候 並不能返回到 load 的函數體內部來
       所以只能放棄對錯誤的檢驗了
       而且你可以自己再反思一下 你所說的 前後 hook 有什麼不妥的地方
       我覺得這裏的某些錯誤是顯然的
  - x ::
       前後 hook 可能會影響對加載過程的理解
       增加認知的負擔
       也就是說 當一個讀者需要弄明白整個代碼的機理的時候
       這些前後被執行的代碼會讓這個過程更加困難
       但是
       我們也可以試着例舉一些用性
    1. 加載前後打印出某些信息
    2. 聲明函數的入口點
       或者測試點
       也就是說
       code 部分可以全然包含對函數的定義
       和少量的函數調用
       而這個 meta-code 中可以包含大量的函數調用
       這樣 爲了弄清楚這段代碼的運行和使用方式
       我就不必跑到文件的底部 去看所有的函數都定義完了之後
       這些已經被定義的函數是如何被調用的了
  - k ::
       這確實是個好的性質
       要知道我們評價好壞的標準是 "降低認知的負擔"
    1. 首先這個新的性狀不是壞的 因爲它沒有增加認知的負擔
       理解上只要想這些前面的函數調用是在所有函數都定義好了之後進行的就行了
    2. 其次這個新的性狀是好的 因爲它降低認知的負擔
       因爲我不用每每跑到文件的末尾了
  - x ::
       設計了一個好的性狀之後 休息一下吧
  - k ::
       好的
  -------------------------------
  - x ::
       我找來了我曾經喜歡的譯者所翻譯的法國小說
       惺辣的諷刺也漠然無味
       憂鬱的敘述也漠然無味
       漫無目的的 少年的閱讀時代已經過去了嗎
       金色的少年時代已經過去了嗎
  - k ::
       你還可以去讀 k 或者 k 或者 k
       但是
       好像你已經可以停止尋找了
       儘管所找尋的東西還沒被找到
  - x ::
       我們還是回到對之前的性狀的討論吧
  - k ::
       你說過你要讓這裏的 元碼 的語法變得可擴展
       你將如何實現這種擴展機制呢
  - x ::
       我先來試着說一下目前所確定了的
       基礎的 在元碼中需要實現的效果有那些
    1. 首先是 name:
    2. 其次是 need:
    3. 最後是 do:
       這三個是核心重要的了
       如果做一些限制 來把 形如 <word>: 的 string
       認爲是 元碼中 word 的保留形態
       那麼 我就可以 既把這類詞當作開頭詞 又把這類詞當作結尾詞
       而使得元數據部分非常易讀了
       name: 必須在最前面
       do: 必須在最後
       這樣 do: 中的字符串中所包含的 形如 <word>: 的這類詞
       就不會影響語法解析了
  - k ::
       沒錯
       易讀性確實是非常重要的
       那麼擴展機制呢
  - x ::
       我可以把這類詞稱作 元詞 meta-word 或者 meta-function
       通過增加 meta-word
       來實現對這個區域的語義的擴展
       在 core 文件裏
       我提供基本的 我所需要的 meta-word
       如果你定義了自己的 meta-word
       那麼在使用之前必須先定義他們
       不認識的 meta-word 會被忽略
       我發現了
       我所需要實現的效果是每當我需要 load 一個 code 的時候
       我單純的 load 這個 code 就行了
       這個 code 所依賴的東西會被自動加載
       這樣 如果你自己定義了新的 meta-word
       那麼 定義這些新的 meta-word 的 code 也應該被做爲依賴加載
       這樣
       need: 就必須出現在你所自己定義的 meta-word 之前了
       重要的是
       每次在 need: 中所聲明的依賴 必須都是充分必要的
       在這裏我想我們可以停下來思考一下這裏依賴關係所形成的數學結構
       以及這種數學結構應該如何在代碼中被體現出來
  - k ::
       好的
       在這之前 再休息一下吧
       是吃飯的時間了
  ------------------------------
  - x ::
       過了很長時間了我還是沒有真正記錄下數學結構
       但是我想到了新的返回結構化數據的方式
       就是讓子函數直接把返回值返回到父函數的棧裏
  - k ::
       我確實從來沒有見到過這種方式
       還需要更細緻的討論來覺得其是否可行
       還有這種方式的速度問題
       還有語法 等等
  - x ::
       確實還有很多的東西需要思考
       所以
       我們還是先回到 加載機制 上來吧
  - k ::
       好的
       首先是去畫那個數學結構
  - x ::
       有限格總可以被簡化成沒有多餘的邊表示其序關係
       link 是一條線
       格 是一個網
       我需要把網拆成線
  - x ::
       我發現了一個問題
       所有的函數都被定義到一個全局的命名空間中
       不同 code 中 可能會定義同名函數
       這種衝突不可調和
       其實
       我可以想一些辦法來自動處理這點
       但是這是不好的
       因爲
       你可能無意間覆蓋了別的名字而不自知
  - k ::
       解法其實很顯然 不是嘛
  - x ::
       沒錯
       解法很顯然
       正確的處理方式是 不允許一般的對函數的定義覆蓋已有的定義
       只有明確聲明需要重新定義的時候 才允許重新定義
       也就是 設計原則之一
       莫若以名
  - k ::
       那麼這個問題就過去了
       還有呢
  - x ::
       我還發現這個接口中需要做很多的異常處理
       比如 這裏必須設置一個 undo-point
       並且在遞歸調用 load 的過程中
       遇到失敗的情況的時候就要撤銷之前 load 的東西
       或者
       每每首先檢查 所聲明的 load 之網 是否存在
  - k ::
       哦
       我突然發現 顯式的 (redefine) 可能是不行的
       因爲 這樣就假設了 每個 code 的作者對 整個 code 之網中的名字的全知
  - x ::
       我們還是先不考慮這些
       而先考慮實現的步驟吧
    1. 設置準備函數 等待 exception
    2. 分配內存
    3. <file> read
    4. 分成兩個字符串
    5. 處理 need
       不成功則 報錯
       成功則 遞歸調用 load
       - 注意這裏其實這裏不能遞歸調用 load
         - 因爲異常處理機制 並不健全
         如果每次 load 都等待 exception
         那麼在遞歸調用 load 的過程中
         當遇到 exception 的時候
         就是局部退出了
         所以應該有兩個版本的 load
         1. 調用 exception
            而不等待 exception
            [這個函數是遞歸函數]
         2. 等待 exception
            而不調用 exception
            [這個函數本身不是遞歸函數 但是它調用上面的函數]
    6. 存元數據入 *loading-stack*
    7. eval-string
  - k ::
       現在就只有 如何在 *loading-stack* 中儲存元數據 了
  - x ::
       undo 其實是把 link 當成是 stack
       這裏的 *loading-stack* 其實和 link 的作用類似
       說 code 所形成的是一個 code 之網
       即 格 這個數據結構
       其實 function 何嘗不是同樣
       function 之間的依賴關係
       與 code 之間的依賴關係
       極其類似
  - k ::
       function 之間的關係不是 樹 而是 網
       這是我之前沒有觀察到的
  - x ::
       我們可以試着畫圖說明 爲什麼兩個層次的抽象結構要同時存在
       我們爲什需要他們
       首先要知道
       函數體是對算法的編碼
       而這裏所說的函數之間的依賴關係所形成的 網
       就是這種編碼 忘記函數體內 被依賴的函數的 順序
       在分析的時候
       需要注意 loop 和 recur 這兩個標記 對這個 網 的性質的影響
       其實沒有影響 是嗎
       我明白了
       這種雙層的結構完全沒有任何區別
       一個 code 就是 在 function 之網中
       視 多個點的子網 爲 一個點
  - k ::
       既然有相似性
       那麼在實現過程中我們就要把這種相似性反映出來
  - x ::
       沒錯
       但是先吃飯吧
  -------------------------------
  - x ::
       我發現必須再給每個名字增加一個前綴
       這個前綴就是 code 的名字
       code 中的函數 在 name-hash-table 中都有這個前綴
       然後
       我必須實現一個 import 機制 這個機制專門用來定義 alias 以省略前綴
       否則 如果只有一個全局命名空間的話 是根本沒辦法解決名稱之間的衝突的
       [我可以很容易製造出極端例子使得全局名命空間之弱點暴露無遺]
  - k ::
       我想到一個簡化接口的方法
       前綴可以不影響函數調用的接口
       [當然也不影響函數作用的接口]
       只要規定
       除非用 need 來 加載加載某個 code
       否則 沒有任何方法能夠讓你使用的這個 code 中的函數
       這個限制就簡化了接口
  - x ::
       這樣每次 need 所做的就是
    1. 如果還沒有加載 就加載
       如果已將加載就 不再次加載
       注意
       這裏的加載都包含前綴的
       也就是說 被加載的函數 在 name-hash-table 中的存在都是 有前綴的
    2. 給某個 code 製造 alias
  - k ::
       我建議術語上的一些改變
       name:
       need:
       宜被改成
       module:
       import:
       我還建議用 |module| 這種命名規則來做爲 module 的名字
       讓它看起來像一個小方塊一樣
       這個名字當讓是在函數調用接口上用的 也就是說是儲存在 name-hash-table 中的前綴
       但是
       我發現
       這樣就徹底改變了 網 做爲數學結構的性質
       同時也改變了 使用體驗
       比如
       m3 直接用到 m2 m1 中的函數名字
       m2 直接用到 m1 中的函數名字
       在 module 機制之後
       在定義 m3 的時候 必須說
       import: m2 m1
       module: m3
       雖然 m2 已經 import 了 m1
       但是這裏必須重新 import 才能用其函數名
    1. 使用體驗
       變地 更羅嗦了 或者說 更明顯了
       即 沒有隱含地 import
       這個模塊所用到的所有名字 都可以在 import 中找到
    2. 數學結構
       import 關係沒有傳遞性
       有傳遞性 有 "路" 可走
       沒有傳遞性 就只有 "邊" 有義了
  - x ::
       不錯不錯 正合我意
       兩層網同時存在的意義也可以明瞭了
       我的感覺是 module 這個層次的 網 中的邊 像是 "橋" 一樣
       把各個 module 中的函數聯起來了
       並且 各個 module 中的函數 如果想要聯合起來 就只有 利用這種 "橋"
       解法如此完美
       我想要息一下了
       之後我們可以總結一下這次的討論
       然後着手實現
  - k ::
       另外 我們的這種討論形式應該如何處理
       讓這些文字留在文檔中
       或者 刪除它們
       或者 給它們另外找地方保存
       或者 直接保留在版本管理器的版本信息裏
  - x ::
       我也不知道
       休息的時候考錄一下這個問題吧
* 討論 <2015-06-02>
  - x ::
       我已經決定把這些討論的所形成的文檔保存在一個 converse 這個文件夾中了
  - k ::
       好的
       我們現在明白了 name-hash-table 和 link 之間的關係是很密切的
       link 有可以被稱爲是 name-link
       name 和 link 的接口 應該得以統一
  - x ::
       這是確定了的
       但是我們應該明白所有這些
       珠 使用在函數體中的時候爲靜態
       名 使用在函數體中的時候爲動態
       我還不知道應該如何分析這兩種特性所造成的結果
       直覺告訴我這樣就使得命名機制非常複雜了
       但是我還沒不知道如何處理更好
  - k ::
       也許
       這就是正確的處理方式
       但是我們還不知道它爲什麼正確而已
       先把這個題目擱置吧
       重新回到 模塊機制
  - x ::
       好的
       我們已經知道了 模塊機制 的抽象意義
       函數之間的調用關係形成函數之網
       分網爲塊 聯之以橋
       即爲模塊機制
       我們還需要觀察這種想法如何體現在函數定義與函數調用之上
       定義新函數
       即 在函數之網中新增節點
       節點皆在某塊之中
       那麼就要求我們增加一個新的全局狀態 用以記錄當前的塊
       記錄這些信息的方式有兩種
    1. 信息做爲 load 的局部變量
    2. 使用一個 全局的 模塊棧
       因爲 這些信息是要在函數定義接口中使用的
       所以後者更爲簡單
  - k ::
       我看 這種對各種棧的使用也值得分析分析
       我們現在已經有很多這種棧了
       但是把這些分析留到以後再做
       你繼續說你的想法
  - x ::
       所有這一切都是對 name-hash-table 和 link 的處理
       我想出一個辦法
       利用 (alias) 來達到我們所需要的效果
       首先
       說 import
       每次 在定義一個 module 之前會先 import 其他 module
       這種 import 利用 alias 來實現
       比如 |m1| 中 有 k1 k2 兩個函數
       而 |m2| import |m1|
       就是先找保證 |m1| 已經被加載
       然後
       "|m1| k1" "k1" alias
       "|m1| k2" "k2" alias
       注意 alias 在向 name-hash-table 中保存 jo 的同時
       總會增加 link
       其次
       說 定義
       現在 import 已經結束
       需要對 module 的函數進行定義了
       我還是可以利用 alias 來實現這一點
       比如我需要定義 名爲 k3 的函數
       那麼我只要按照正常的方式調用 define-function
       在正常的 define-function 進行完畢之後
       define-function 會查看 module-stack
       發現 tos 是 |m1| 它就馬上 做
       "k3" "|m1| k3" alias
       這樣 如果之後 "k3" 被覆蓋了
       那麼我總能通過 "|m1| k3" 來找到這裏定義的 jo
       如果我要定義一個名爲 k2 的函數
       那麼 它就會覆蓋 import 來的 "k2"
       但是 不會影響 "|m2| k2"
  - k ::
       這種實現方式是如此簡單
       我發現它會大量地定義 alias
       而 如果想要把 module 機制實現正確
       我也找不出更好的方法了
  - x ::
       沒錯
       表面上看來 大量的 alias 是對內存的浪費
       而實際上 爲了性狀的良好 不可能避免以某種方式對內存的使用
       這裏
       很多用於命名的字符串是重複的
       但是 fasm 的能力很弱
       當我有自己的匯編器的時候
       我會統一用 name-hash-table 來實現命名
       而不再依賴字符串
       到時候 link 將被實現成一個 專門用來輔助 name-hash-table 的數組
       那時 大量的 alias 對內存的浪費就可以忽略不計了
       也許我現在就可以構建一個 專門用來輔助 name-hash-table 的數組
       在進入解釋器之後就完全拋棄 link
       但是需要注意的是
       匯編代碼中函數之間的依賴關係不是線性的
       這種非線性是可能的
       並且可能有的地方我依賴了這種非線性
       我需要重新組織 匯編代碼 以排除這種依賴
       然後我才能進行我所說的 完全放棄 link
       我確實應該這麼做
       之後所得到的效果是
       你沒法區分一次命名 是 alias 還是 不是 alias
  - k ::
       等一下再去進行這些打改動
       先看下面兩個問題
    1. 這個機制的接口使用特點如何
    2. core 與 module 的關係如何
    3. module-stack 爲空的時候如何
  - x ::
       首先
       說 這個機制的接口使用特點如何
       module 的 元數據 只能被 load 使用
       而不能在解釋器中直接輸入
       儘管如此
       在 load 一個 module 之後
       有兩組 alias 是被暴露出來的
       一是 這個 module 所 import 的 alias
       一是 這個 module 所 定義的函數 的 alias
       第二
       說 core 與 module 的關係
       core 本身有必須被實現爲一個 module
       否則
       對 core 中的函數的重命名 就沒法通過 import 恢復
       core 的特殊性將逐漸被消除
       但是它的特殊性還是非常顯著
       當有了自己的匯編器之後
       能否再分解 core 我也不知道
       但是
       假設 core 中有 2000 對 jo 的命名
       每個命名 消耗 3 * jo-size
       那麼每個 module 就至少要消耗 48 K 來 import core
       這樣 module 的代價就是非常大的了
       這是不合理的
       應該僅僅 對可能被 用到的 名字做 alias
       而不對全部的名字做 alias
       也就是說正確的處理方式是
       獲知需要 import 的 module 之後
       僅僅 爲所定義的 module 用到的 名字 做 alias
  - k ::
       還有 import 的 兩個 module 之間的命名衝突需要解決
       我想上面所發現的問題 必須和這個衝突問題一起解決才行
       也就是說 需要能夠對 import 的名字 重命名
  - x ::
       沒錯
       這還沒有涉及到第三個問題
       即 module-stack 爲空的時候如何
       上面所出現的問題如果不解決
       是沒法繼續討論下去的
       第一
       我們面臨了很多問題
       這在於
       我們通過 alias 來處理 module
       這些 alias 會在運行時佔用內存
       我們需要減少對內存的使用
       第二
       減少內存使用的方法很簡單
       在加載一個模塊的時候
       我們不應該把所有的命名都做 alias
       只給所需要的命名做 alias 就行
       我需要讓機器幫我 而不用自己聲明
       這就需要我們去分析整個 module 中所包含的函數定義
       也就是說
       在用最簡單的語法 import 一個 module 的時候
       默認的操作是 alias 用到的全部命名
       第三
       我們需要解決命名衝突
       比如 m3 import 了 m1 和 m2
       而 m3 確實用到了 k1
       但是 m1 和 m2 中都定義了 k1
       如果確實需要 import 這兩個函數
       就需要聲明應該如何解決名字的衝突
       在上面的靜態分析中遇到沒有解決的名字衝突時會報錯
       另外
       關於順序
       要知道
       import 的時候 不能保證 各個 module 被 load 的順序
       但是能夠控制 去給這些 module 做 alias 的順序
  - k ::
       你提到了
       這一切問題都來源於我們用 alias 處理 module
       既然認識到了問題之因
       那麼應該仔細分析一下其因
       看看能不能繞開問題
  - x ::
       沒錯
       用 alias 來處理 module 是我想到的最簡單的處理辦法
       我們可以來分析下它的優劣
       哦
       我明白了
       其實不應該用 這種方式來處理 module
       應該在 加載每個 module 的時候使用分離的臨時命名空間
       加載之後就把臨時命名空間回收
       考錄下面這個性狀就能明白爲什麼應該這樣做了
       只有在加載某個 模塊的過程中
       這個模塊所引入的其他模塊的名字才能夠被看見
       這裏只是臨時命名
       當結束對被加載的模塊的處理之後
       這些命名就不再生效了
       這樣
       每個模塊中所使用的名字就只能從它所加載的模塊中來
       編碼者不會不小心使用了某些命名而不自知
       即 降低認知的負擔
  - k ::
       看來這一切能夠實現
       都是因爲 我們能夠確知一個模塊的開始和結束
       因爲每個模塊就是一個文件
       所以說這其實是在利用編譯語義
       那麼
       既然在 加載代碼的時候 我們已經有看到整個代碼的機會了
       就應該好好利用此時所能踐行的編譯語義
       我們看看我們需要利用 編譯語義 中的那些性質
  - x ::
       這裏我聲明一個設計原則
       那就是 去保持線性
       沒有相互遞歸函數
       被使用的函數在使用之前必須被定義
  - k ::
       另外
       如果從一個 珠 內不包含它的名字
       那麼就沒法把一個函數打印出來了
       這是不行的
  - x ::
       哦沒錯
       我必須把名域留在珠子中
       在匯編代碼中 這個域是字符串
       之後就被處理爲 name
  - k ::
       那麼會編譯語義的應用呢
  - x ::
       我放棄對所謂 編譯語義 的應用
       而追求順序
       所謂編譯語義 就是打亂順序
       而打亂順序對我來說是沒有必要的
       在處理函數定義的過程中沒有必要
       在處理一個 module 中個很多函數定義時也沒有必要
       甚至現在
       在對實現模塊機制的時候我也不必用它
       因爲我根本沒有必要對命名做靜態的分析
       只要先按順序 import
       然後在處理完一個 module 之後 把命名撤銷就可以了
       並且我也沒有必要警告名稱的衝突
       衝突的時候 後面的覆蓋前面的
       你必須調整加載的順序 然後手動重命名以處理衝突
  - k ::
       看來是不錯的設計
       退一步去找問題的原因
       比起直面問題來 是更好的解決問題的辦法
  - x ::
       沒錯
       或者說
       在敲定一個問題的解法之前
       一定要保證透徹理解問題
       一切都是爲了更好的解法與更好的理解
  - k ::
       看來對抽象討論已經完畢了
       可以去討論如何具體實現了
  - x ::
       但是 在實現之前
       我還是想要停下來
       去整理一下文檔
       做爲一種緩衝
       因爲很大的改變將要進行了
       我們將要在進入解釋器之後就完全捨棄鍊
* 討論 <2015-06-03>
  - x ::
       再說 core 與 module 的關係如何
       還有 module-stack 爲空的時候如何
       提出這兩個問題
       只因擔心 module 機制會影響
       在解釋器中快速的開發和測試
  - k ::
       沒錯
       認識清楚問題之因 問題本身就無足輕重了
       那麼 應該如何處理 core 才能不影響快速開發
  - x ::
       我們可以先不考錄底層實現細節
       而假想使用解釋器
       需要能夠快速查看更改好了的代碼的效果
       [目前的 org-mode tangle 的速度太慢了 所以不能太依賴它]
       設置 undo-point
       加載 module
       更改之後 undo 然後重新加載
  - k ::
       更重要的是
       不能像 erlang 一樣削弱解釋器
  - x ::
       沒錯
       更改了一兩個小函數之後
       直接把這些函數複製到解釋器中
       就應該能查看其功效 而不用重新加載整個 module
       但是 之前的設想是 每個 module 嚴格地與 file 對應
       而這裏所需要的性狀無疑是說 需要打破這種對應
  - k ::
       嘗試回答下面的問題
    1. 是否要求所有的函數都在某個 module 中
    2. core 是否是一個 module
    3. 在 REPL 中所定義的函數是在 core 中
       還是在別的 module 中
    4. 是否要求 module 嚴格的與 file 對應
       是否允許在 REPL 中定義新的函數到已經加載的 module 中去
  - x ::
       我發現了
       編譯語義與 REPL 總是相互衝突的
       在有衝突的時候總是選取 編譯語義 而不遷就 REPL
       我嘗試做如下規定
    1. 每個函數都必須存在與某個 module
       每個 module 都嚴格地對應於一個文件
       要求 module 名與文件名匹配 [忽略後綴]
    2. REPL 中所定義的函數不可能在 module 中被加載
       module 的 import 完全決定它的依賴
       不會有意外的依賴
    3. 弱化 REPL 爲一個開發工具
       不再要求小函數直接被複製粘貼就能測試
       在 REPL 中所定義的函數
       都只爲加載別的 module
       把 REPL 當成一個 makefile 解釋器
  - k ::
       這種簡單模型的代價是
       每當需要測試一個新的函數的時候
       都必須改 module 所對應的文件
       也不可能逐個函數測試某個 module
  - x ::
       正確的處理方式是
       每時每刻 REPL 都在某個 module 中
       可以看到 這個 module 所 import 的函數
       也可以給這個 module 內添加函數
       我去實現一些切換 當前 module 的基本函數
       然後用這些基本函數來實現那個簡單的模型
       即 每個 module 都與 文件對應
  - k ::
       module-stack 爲空的時候
       解釋器就在 core 中
  - x ::
       但是
       我只能要一個 *name-record*
       而這種對 當前 module 的切換
       無疑是說
       一個 module 可以對應多個 file
       並且 一個 module 可以分散在 *name-record* 的各個地方
       這是可怕的性質
  - k ::
       那麼回到之前的設計
       觀察一下工作流程
       加載了一個 module 之後
       需要對 module 進行更改
       就去更改它所對應的文件
       然後 撤銷對這個 module 的加載
       然後 重新加載
       注意每次在 do: 之後所寫的東西就是測試所用的函數
       每次爲了一點新的測試都會撤銷並重新加載整個 module
  - x ::
       加載一個 module 的時候
       這個 module 可能 import 了別的 module
       撤銷的時候 是否 也撤銷它 import 的別的 module
  - k ::
       先都撤銷試試
       如果速度上難以接受 再做別的考慮
  - x ::
       我來重述一下
    1. 每個函數都必須存在與某個 module
       每個 module 都嚴格地對應於一個文件
       要求 module 名與文件名匹配 文件的後綴爲 cn
    2. module 的 import 完全決定它的依賴
    3. REPL 中所定義的函數 將不帶有 |module| 前綴
       因此不能爲任何 module 所依賴
    4. REPL 中所定義的函數 所能夠看見的
       只是全局的沒有 |module| 前綴的命名
       通過在解釋器中調用類似 import 的函數
       [即 做 alias]
       就能夠暴露出 module 中的函數
  - k ::
       這樣整個模型理解起來就很簡單了
       我發現術語有點不好
       我們來嘗試規整一下術語
       看看能不能更好
  - x ::
       看一下翻譯
       | 引入 | import |
       | 模塊 | module |
       | 加載 | load   |
       其中 引入 是模塊之間的關係
       重述如下
    1. 函數之間的調用關係形成函數之網
       分網爲塊 聯之以橋
       即爲模塊機制
       所聯之橋即爲模塊之間的引入關係
    2. 模塊對應文件
       REPL 中直接定義的函數不對應文件
       故而遊離與模塊之外
  - k ::
       討論了告一段落
       應該着手實現了
* 討論 <2015-06-07>
  - x ::
       關於 *loading-stack*
       設其中所保存者爲 module-info
       可擴展性如何實現
       是否要求這個 module-info 爲變長的數據結構
  - k ::
       可以是變長的數據結構
       只要用 get 和 set 以規範其接口即可
       另外
       是否讓每個語法關鍵詞本身來 存值入 *loading-stack*
  - x ::
       主要保存信息應該是字符串的形式
       並且被統一保存
       否則 每個 擴展出來的域的 offset 都找不到
       這樣
       保存信息 與
       前後兩次 處理語法關鍵詞
       就是分離的
  - k ::
       這樣 module-info 的結構就基本可以確定了
       還有一個問題是
       存入 module-info 的時機如何
  - x ::
       或者在將開始時
       或者在將結束時
       應該在開始時
       因爲 保存 module-info 就如同命名一樣
       在 處理函數體的時候 head 是先被存入的
       這樣就能進行遞歸調用
       這裏也一樣
       先存入 module-info
       在 import 之後
       在 eval 之前
       這樣就能在 eval 中看到當前的 module-info 了
       並且注意 loading-stack 並不用來處理循環引用
       是 importing-stack 在處理循環引用
* 討論 <2015-06-09>
  - x ::
       我發現一下子想要完成的東西太多了
       我們必須分步來進行
  - k ::
       那麼我們來看看什麼性狀在初步實現時可以省略
       不檢查是否加載
       不檢查循環引用
       不入相關數據入棧
       不設置語法關鍵詞
       單純加載一個文件
       然後處理 兩個命名棧
       這需要 根文件有關的操作 [知道文件的大小]
       還有 把字符串分離成 兩部分
  - x ::
       不能在 eval-string 之前入 *loading-stack*
       因爲 <module-info> 包含某些信息
       [即 name-record-begin 和 name-record-end]
       而這些信息只有在 eval-string 才能知道
* 討論 <2015-06-10>
  - x ::
       關於語法擴展還有一些問題
       我們是否應該讓 meta 使用 <basic-REPL> 的 *rule-set*
  - k ::
       如果是的話
       那麼就很靈活了
       在 meta 中可以胡作非爲
       如果不是
       則另寫一個 類似 REPL 的東西
       問題是
       是否允許 胡作非爲 呢
  - x ::
       我需要來考察一下有那些情形下我需要這種 胡作非爲
       重命名某些東西
       打印某些東西
       都是需要的
       還有最後的 do: 等等
       看來我們還是使用 <basic-REPL> 的 *rule-set* 吧
