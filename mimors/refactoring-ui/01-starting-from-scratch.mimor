<metadata
  theme-color="indigo"
  keywords="adam-wathan, refactoring-ui, design"
/>

<front-cover>
  Refactoring UI / Starting from Scratch
</front-cover>

<question>
  When you start the design for a new app idea,
  what do you design first?

  <answer>
    Start with a feature, not a layout.
  </answer>
</question>

<question>
  What is an app?

  <answer>
    An app is a collection of features.

    Before you've designed a few features,
    you don't even have the information you need
    to make a decision about the layout.
  </answer>
</question>

<question>
  Please give a good example of a "feature first" app?

  <answer>
    Google.

    The homepage is just a searchbar.
  </answer>
</question>

<cloze>
  In the earliest stages of designing a new feature,
  do NOT make low-level decisions about details such as:
  typefaces, shadows, icons, and <blank>colors</blank>.
</cloze>

<cloze>
  By designing in grayscale,
  you're forced to use
  <blank>spacing</blank>, contrast, and size
  to express yourself.
</cloze>

<cloze>
  In terms of fidelity,
  the browser is a <blank>high fidelity environment</blank>.
</cloze>

<question>
  What is a styling tool that can help you to
  prototype while ignoring details
  in high fidelity environment like the browser.

  <answer>
    Tailwind CSS.
  </answer>
</question>

<question>
  What is the point of designing in low-fidelity?

  <answer>
    To move fast.

    To get important feedback as soon as possible,
    and learn from them.
  </answer>
</question>

<question>
  Why you should NOT design every single feature in an app
  before you move on to implementation?

  <answer>
    Because figuring out
    how every feature in a product should interact
    and how every edge case should look is really hard,
    especially in the abstract.
  </answer>
</question>

<cloze>
  Instead of designing everything up front, <blank>work in short cycles</blank>.
</cloze>

<cloze>
  Don't <blank>imply functionality</blank> in your designs
  that you aren't ready to build.
</cloze>

<cloze>
  When you're designing a new feature, <blank>expect it to be hard to build</blank>.

  Designing the smallest useful version you can ship
  reduces that risk considerably.
</cloze>

<cloze>
  If part of a feature is <blank>a "nice-to-have"</blank>,
  design it later.

  Build the simple version first
  and you’ll always have something to fall back on.
</cloze>

<back-cover>
  - Start with a feature, not a layout

  - Detail comes later

  - Don’t design too much
</back-cover>
