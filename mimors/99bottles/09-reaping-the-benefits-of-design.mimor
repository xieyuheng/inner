9. Reaping the Benefits of Design


<question>
  What can tests do?

  <answer>
    Tests help us know if something breaks.

    It's important to know if something breaks, but tests can do far more.
    They give you the opportunity to explain the domain to future readers.

    They expose design problems that make code hard to reuse.

    Well-designed code is easy to test; when testing is hard,
    the code's design needs attention.

    It should be easy to create simple, intention-revealing tests.
    When it's not, the chief problem is often too much coupling.
    In such cases the solution is not to write complicated tests that overcome tight coupling,
    but rather to loosen the coupling so that you can write simple tests.

    The most cost-effective time to intervene in tightly coupled code is right now,
    before new requirements cause you to to start reusing these objects.

    Writing tests will uncover every bit of overlooked tight coupling
    and immediately reward you for fixing it.
  </answer>
</question>


<question>
  What should we test?

  <answer>
    Every class should have its own unit test, unless doing otherwise saves money.

    The allowed-to-skip-tests bar is high, but some code meets it.
  </answer>
</question>


<question>
  When we are allowed to skip tests?

  <answer>
    Creating a new class by following a recipe instead of by doing TDD is allowable,
    We are allowed to temporarily skip tests in this case.

    Private class should not be tested.

    We can also skip tests for the classes that are too simple and too small,
    to tell other programmers that they are too simple and too small.

    Tests should give you the freedom to improve code,
    not glue you to its current implementation.

    When they constrain rather than liberate,
    ask if they're worthwhile, and consider omitting them.
  </answer>
</question>


<question>
  How to justify skipped tests?

  <answer>
    In the rare case where you decide to forego giving a class its own unit test,
    you must be able to defend this decision with a clearly articulated justification.

    In addition to size and complexity, visibility is also an important consideration.

    Visibility is determined by the context in which the class is known.
  </answer>
</question>


<question>
  How to test Exp and Core class of a type system implementation?

  <answer>
    I do not know yet, I know two choices:

    1. depend on the syntax
    2. do not depend on the syntax

    If Exp class owns responsibilities of syntax and parsing, (1) would be simple.

    But (2) seems too expensive no matter how.
  </answer>
</question>


<question>
  Why unit tests for each class is important?

  <answer>
    Because integration test involves many objects in combination,
    the code could break quite far from the origin of the problem.
    This makes it hard to determine the cause of an error.
  </answer>
</question>


<question>
  Why integration tests are important?

  <answer>
    Integration tests are great at proving the correctness of
    the collaboration between groups of objects.
  </answer>
</question>


<question>
  How should we write unit tests?

  <answer>
    Unit tests ought to tell an illuminating story.

    They should demonstrate and confirm
    the class's direct responsibilities,
    and do nothing else.

    You should strive to write the fastest tests possible,
    in the fewest number necessary,
    using the most intention-revealing expectations,
    and the least amount of code.
  </answer>
</question>


<question>
  Why we should write tests first?

  <answer>
    It's far better to struggle with a test that you don't understand
    than to write code that you don't understand.

    Tests force you to clarify your intentions because they make explicit assertions.

    Code has no such pressure, and can be left a confusing mess forever.
  </answer>
</question>


<question>
  What is an object's context?

  <answer>
    An object's context is its surrounding environment,
    or the interrelated conditions under which it can exist.
  </answer>
</question>


<question>
  How to reduce a object's (or class') context?

  <answer>
    After refactoring, some classes might still reflect the context they come from.

    It might be helpful to remove some dependencies,
    generalize some methods,
    and rename the class after a more general concept.
  </answer>
</question>


<question>
  How should we name our classes when using design patterns?

  <answer>
    We should not include the name of a pattern in the name of a class.
    Because pattern names don't generally reflect concepts in your application.

    We should search for names that add semantic meaning.

    We should not give up too soon on the hard problem of naming.
  </answer>
</question>


<question>
  How to use interface in dynamicly typed language?

  <answer>
    Use test to test class has methods in the interface,
    maybe including number of arguments, and type of arguments.
  </answer>
</question>


<question>
  After coding of refactoring, what should we do at last?

  <answer>
    Check the code for one more time,
    to obliterating obsolete context.

    And peruse the complete listings and glory in your accomplishments.
  </answer>
</question>


<question>
  What features allow object-oriented to interact with unanticipated variants without having to change?

  <answer>
    When designed with the following features,
    object-oriented code can interact with new
    and unanticipated variants without having to change:

    1. Variants are isolated.

    They're usually isolated in some kind of object, often a new class.

    2. Variant selection is isolated.

    Selection happens in factories, which may be as simple as isolated conditionals that choose a class.

    3. Message senders and receivers are loosely coupled.

    This is commonly accomplished by injecting dependencies.

    4. Variants are interchangeable.

    Message senders treat injected objects as equivalent players of identical roles.
  </answer>
</question>
