<metadata theme-color="red" />

<question>
  What is a judgment?

  <answer>
    A judgment is an attitude that a person takes towards expressions.

    When we come to know something, we are making a judgment.
  </answer>
</question>

<question>
  Given a judgment, what we can say about it?

  <answer>
    About a judgment, we can say:

    - We have reason to believe ____.

    - We have no reason to believe ____.
  </answer>
</question>

<question>
  What is a form of judgment?

  <answer>
    A form of judgment is an observation
    with blank spaces in it, such as

    ____ is a ____.
  </answer>
</question>

<question>
  What are types?

  <answer>
    Expressions that describe other expressions are called types.

    Is not this definition simple?

    When we say "x is P", we mean "P" describe "x".
  </answer>
</question>

<question>
  What forms of judgment do we have in the language Pie?

  <answer>
    We have four forms of judgment.

    (1) ____ is a ____.

    (2) ____ is the same ____ as ____.

    (3) ____ is a type.

    (4) ____ and ____ are the same type.
  </answer>
</question>

<question>
  What is the relation between judgment and knowledge?

  <answer>
    Judgments are acts of knowing, and believing is part of knowing.
  </answer>
</question>

<question>
  What is the relation between judgment natural language?

  <answer>
    Judgments are sentences.

    Sentences get their meaning from those who understand them.

    The sentences capture thoughts that we have,
    and thoughts are more important than the words we use to express them.
  </answer>
</question>

<question>
  What are normal forms?

  <answer>
    Expressions that are written differently may nevertheless be the same.

    One way of writing these expressions is more direct than the others.

    The normal form of an expression is the most direct way of writing it.
  </answer>
</question>

<question>
  What is the use of the idea of normal forms?

  <answer>
    We can use the idea of normal forms to implement equivalence.

    Given a type, every expression described by that type
    has a normal form, which is the most direct way of writing it.

    If two expressions are the same, then they have identical normal forms,
    and if they have identical normal forms, then they are the same.
  </answer>
</question>

<question>
  Why we always need to specify the type,
  when talking about normal form of an expression?

  <answer>
    Because sameness is always according to a type,
    so normal forms are also determined by a type.

    Each type can specify its own notion of equality,
    and thus the syntax of its normal forms.

    -- "NbE Tutorial", David.
  </answer>
</question>

<question>
  What is a value?

  <answer>
    An expression with a constructor at the top is called a value.
  </answer>
</question>

<question>
  What is evaluation?

  <answer>
    Finding a value that is the same as
    some starting expression is called evaluation.
  </answer>
</question>

<question>
  What is a neutral expression?

  <answer>
    Expressions that are not values
    and cannot yet be evaluated due to a variable
    are called neutral.
  </answer>
</question>

<question>
  What is a constructor?

  <answer>
    Some expressions, such as Nat or (Pair Nat Atom), are types.

    Part of explaining a new type is to say what its constructors are.

    The constructor expressions are the direct ways
    of building expressions with the new type.

    Constructors build values, type constructors build types.
  </answer>
</question>

<question>
  What is the difference between value and normal form?

  <answer>
    Not every value is in normal form.

    This is because the arguments to a constructor need not be normal.

    Each expression has only one normal form,
    but it is sometimes possible to write it as a value in more than one way.

    A normal expression has no remaining opportunities for evaluation.
    Usually, expressions that are normal are easier to understand.

    Finding a value is often enough, however,
    because the top constructor can be used to determine what must happen next.
  </answer>
</question>

<question>
  Doesn't evaluation refer to
  finding the meaning of an expression,
  not just some simpler expression?

  <answer>
    Not here. Expressions do not refer to some external notion of meaning
    -- in Pie, there is nothing but expressions and what we judge about them.
  </answer>
</question>

<question>
  What is the idea of "everything is an expression"?

  <answer>
    In Pie, values are also expressions.
    Evaluation in Pie finds an expression,
    not some other kind of thing.
  </answer>
</question>

<question>
  How should we implement "everything is an expression"
  in a language with static type checking?

  <answer>
    We should NOT implement value and neutral as predicate functions over expression.

    We should make use of the type system by defining Exp as a recursive datatype,
    and also defining Value and Neutral as recursive datatypes.
  </answer>
</question>

<question>
  When defining Exp, Value and Neutral,
  why Neutral is embedded in Value as a variant TypedNeutral?

  <answer>
    The return type of evaluate is Value.

    Viewing Neutral as Value allow us to do partial evaluation under closure.
  </answer>
</question>

<question>
  What is an eliminator?

  <answer>
    Constructors build values,
    and eliminators take apart values built by constructors.

    Another way to see the difference is that
    values contain information, and eliminators
    allow that information to be used.

    All neutral expressions (if we do not include variables)
    are eliminator expressions.
  </answer>
</question>

<question>
  What are the constructors and eliminators of Sigma type?

  <answer>
    One constructor: cons.

    Two eliminators: car, cdr.
  </answer>
</question>

<question>
  What are the constructors and eliminators of Pi type?

  <answer>
    One constructor: function abstraction -- lambda.

    One eliminator: function application.
  </answer>
</question>

<question>
  What is substitution?

  <answer>
    Consistently replacing a variable with an expression
    is sometimes called substitution.
  </answer>
</question>

<question>
  What is a "same as" chart?

  <answer>
    When expressions are listed, assume that "is the same as" follows all but the last one.

    This kind of chart is called a "same as" chart.

    If a "same as" chart could show that two expressions are the same,
    then this fact can be used anywhere without further justification.

    "Same As" charts are only to help build understanding.
  </answer>
</question>

<question>
  What is a total function?

  <answer>
    A function that always assigns a value to every
    possible argument is called a total function.
  </answer>
</question>

<question>
  How to design total functions?

  <answer>
    We can make a function total
    by using a more specific type
    to rule out unwanted arguments.
  </answer>
</question>

<question>
  What is the eliminator of an inductive type?

  <answer>
    Remember that, eliminators expose the information in values.

    We can define an inductive type's eliminator as a recursive combinator
    (we only need one eliminator for the inductive type).

    The recursive combinator takes the target as the first argument,
    and one handler function argument for each constructor.

    Beside taking the destructured arguments,
    a handler function also takes the recursive elimination
    of the smaller values as the "almost" arguments.
  </answer>
</question>

<question>
  What is a dependent type?

  <answer>
    A type that is determined by
    something that is not a type
    is called a dependent.
  </answer>
</question>

<question>
  What is the motive of an eliminator?

  <answer>
    The motive explains why the target is to be eliminated.
  </answer>
</question>

<question>
  Why readable expressions are important?

  <answer>
    Because readable expressions help us understand.

    Getting the right answer is worthless
    if we do not know that it is correct.

    Understanding the answer is at least
    as important as having the correct answer.
  </answer>
</question>


<question>
  What is the relation between sameness the judgment and Equal the type constructor?

  <answer>
    Sameness is indeed a judgment.

    With the type constructor Equal,
    types can express the idea of equality.

    We can express two functions always find the same result.
  </answer>
</question>

<question>
  Why type constructed by Equal can be read as statement?

  <answer>
    Because all types can be read as statements (propositions).

    This is a new perspective on types.
  </answer>
</question>

<question>
  What recursive about the relation between judgment and type?

  <answer>
    A judgment is an attitude that a person takes towards expressions.

    Type expressions can express the idea of judgment.

    This is a recursion.
  </answer>
</question>

<question>
  What is the difference between judgment and type?

  <answer>
    A type is a judgment expressed formally.

    We should not mix the two terms "judgment" and "type",
    because in some moment, maybe we do not know
    how to express a form of judgment as type.
  </answer>
</question>

<question>
  What is internalizing the form of judgment?

  <answer>
    Creating expressions that capture the ideas behind a form of judgment
    is sometimes called internalizing the form of judgment.

    For example Equal internalize the sameness judgment.

    Beside Equal, we can also use Check to internalize the type checking judgment.
  </answer>
</question>

<question>
  In type theory, what do we mean
  when we judge a statement to be true?

  <answer>
    If a type can be read as a statement,
    then judging the statement to be true means that
    there is an expression with that type.

    Thus in this view,
    truth means that we have evidenced,
    and this evidence is called a proof.
  </answer>
</question>

<question>
  Define neutral expressions in a more precise way.

  <answer>
    A more precise way to define neutral
    expressions is to start with the simplest
    neutral expressions and build from there.

    Variables are neutral, unless they refer to definitions,
    because a defined name is the same as its definition.

    Also, if the target of an eliminator expression is neutral,
    then the entire expression is neutral.
  </answer>
</question>

<question>
  Why judgments are a suitable basis for knowledge?

  <answer>
    Because judgments often can be mechanically checked using relatively simple rules.

    Judgments are formal knowledge.
  </answer>
</question>

<question>
  What is a proof?

  <answer>
    A proof is any completely convincing argument.

    -- Errett Bishop
  </answer>
</question>

<question>
  What is a formal proof?

  <answer>
    A formal proof is a recording of steps of deduction.
  </answer>
</question>

<question>
  What is the relation between expression and proof?

  <answer>
    Expressions can encode interesting patterns of reasoning,
    such as using induction to try each possibility
    for the variable in a neutral expression.

    Expressions the syntax we designed to record the steps of deduction.

    Expressions are proofs.
  </answer>
</question>

<question>
  Why it is important that all functions should be total?

  <answer>
    Because only total functions can be viewed as proof.
  </answer>
</question>

<question>
  When in doubt, evaluate!

  <answer>
    Gain insight by finding the values of expressions in types
    and working out examples in "same-as" charts.
  </answer>
</question>

<question>
  Why we should choose definitions carefully?

  <answer>
    Because carefully-chosen definitions can greatly simplify later proofs.
  </answer>
</question>

<question>
  The Commandment of Absurdities

  <answer>
    Every expression of type Absurd is neutral, and all of them are the same.
  </answer>
</question>

<question>
  What are decidable statements?

  <answer>
    There are some statements that are either true or false.

    These statements are called decidable because there is a function
    that decides whether they are true or false.
  </answer>
</question>

<question>
  What is a type system?

  <answer>
    A Type system is a system for guiding human judgment.
  </answer>
</question>

<question>
  How to implement form of judgment in a functional language?

  <answer>
    Each form of judgment corresponds to a function
    that determines whether a particular judgment is believable.
  </answer>
</question>

<question>
  How to important form of judgment in a logic programming language?

  <answer>
    Each form of judgment corresponds to a relation
    that determines whether a particular judgment is believable.
  </answer>
</question>

<question>
  What is an inference rule?

  <answer>
    An inference rule consists of a horizontal line.
    Below the line is a conclusion,
    and above the line is any number of premises.

    Forms of judgment occur within the conclusion and premises of a inference rule.
  </answer>
</question>

<question>
  How to implement inference rules a logic programming language?

  <answer>
    Inference rules are clauses that define a form of judgment.

    Given a form of judgment (a relation),
    each inference rule whose conclusion is this form of judgment
    is a Horn clause of this relation.

    Reverse the "above" and "below" of an inference rule we get a Horn clause.
  </answer>
</question>

<question>
  What is the meaning of a inference rule?

  <answer>
    The meaning of a inference rule is that,
    if one believes in the premises,
    then one should also believe in the conclusion.
  </answer>
</question>

<question>
  Why belief in the premises cannot be derived from belief in the conclusion?

  <answer>
    Because the same conclusion can occur in multiple rules.
  </answer>
</question>

<question>
  What kind of relation is function?

  <answer>
    A function is a single-valued (univalent) relation,
    where an argument of the relation is viewed as output,
    and the output is uniquely determined by all other arguments (inputs).
  </answer>
</question>

<question>
  How to translate a relation to a function?

  <answer>
    To translate a relation to a function,
    we must observe which argument of the relation is its output,
    and writing them in form of (input, ...) -> output.

    The translation:

    - input of the conclusion  => arguments

    - output of the conclusion => return value

    - a promise                => a recursive call to a translated function

    - input of a promise       => arguments of recursive call

    - output of a promise      => return value of recursive call

    Note that, in logic programming, we in turn study
    "How to translate a function to a relation".
  </answer>
</question>

<question>
  Why we can not translate sameness judgment to function?

  <answer>
    Because inference rules whose conclusions are sameness judgments
    are specifications for a normalization algorithm,
    rather than a description of the algorithm itself.
  </answer>
</question>
