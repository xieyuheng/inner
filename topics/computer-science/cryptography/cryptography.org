#+title: cryptography

* journey into cryptography

*** links

    https://www.khanacademy.org/computing/computer-science/cryptography

    https://en.wikipedia.org/wiki/Cryptography

*** ancient cryptography

***** What is cryptography?

      - Imagine two people who share an important secret
        have to split up.
        This requires them to communicate private information
        from a distance.

      - However, an eavesdropper named Eve also wants this information,
        and has the ability to intercept their messages.
      - So, Alice decides to communicate using letters
        written in some kind of secret code.

      - The following analogy is helpful.

        - First, Alice locks her message in a box,
          using a lock that only she and Bob know the combination to.
          This is known as 'encryption.'

        - Then, the locked message is sent to Bob.
          When Bob receives the box,
          he opens it using the code they shared in advance.
          This is called 'decryption.'

      - Cryptography begins when we abandon physical locks
        and use 'ciphers' instead.

      - Think of [ciphers] as virtual locks.
        Ciphers allow Alice and Bob
        to scramble and descramble their messages
        so that they would appear meaningless
        if Eve intercepted them.

      - Cryptography has been around for thousands of years.
        It has decided wars, and is at the heart
        of the worldwide communication network today.

      - The fascinating story of cryptography
        requires us to understand two very old ideas
        related to number theory and probability theory.

***** The Caesar cipher

      - The first well known cipher,
        a substitution cipher,
        was used by Julius Caesar around 58 BC.

      - It is now referred to as the Caesar Cipher.
        Caesar shifted each letter in his military commands
        in order to make them appear meaningless
        should the enemy intercept it.

      - Imagine Alice and Bob decided to communicate
        using the Caesar Cipher First,
        they would need to agree in advance
        on a shift to use, -- say, three.
        So to encrypt her message,
        Alice would need to apply a shift of three
        to each letter in her original message.
        So A becomes D,
        B becomes E,
        C becomes F, and so on.

      - This unreadable, or encrypted message,
        is then sent to Bob openly.
        Then Bob simply subtracts the shift of three from each letter
        in order to read the original message.

      - Incredibly, this basic cipher was used by military leaders
        for hundreds of years after Caesar.

      - However, a lock is only as strong as its weakest point.
        A lock breaker may look for mechanical flaws.
        Or failing that, extract information
        in order to narrow down the correct combination.

      - The process of lock breaking and code breaking are very similar.
        The weakness of the Caesar Cipher was published 800 years later
        by an Arab mathematician named Al-Kindi.
        He broke the Caesar Cipher by using a clue
        based on an important property of the language
        a message is written in.

      - If you scan text from any book
        and count the frequency of each letter,
        you will find a fairly consistent pattern.
        For example, these are the letter frequencies of English.
        This can be thought of as a fingerprint of English.
        We leave this fingerprint when we communicate
        without realizing it.

      - This clue is one of the most valuable tools for a codebreaker.
        To break this cipher,
        they count up the frequencies of each letter
        in the encrypted text
        and check how far the fingerprint has shifted.
        For example,
        if H is the most popular letter
        in the encrypted message instead of E,
        then the shift was likely three.
        So they reverse the shift
        in order to reveal the original message.

      - This is called frequency analysis,
        and it was a blow to the security of the Caesar cipher.

*** ciphers

*** cryptography challenge 101

*** modern cryptography

***** the fundamental theorem of arithmetic

      - each number as a different lock,
        the unique key to each lock is its prime factorization.

      - no two locks share a key,
        no two numbers share a prime factorization.

      - it is easy to multiple the prime factorization to get a number.
        it is easy to open a lock, given the key.

      - it is hard to get the prime factorization of a given number,
        it is hard to create the key of a given lock.

***** public key cryptography -- sending identical keys in secure way

      - alice
        public-color
        alice-private-color
        alice-mixed-color = public-color + alice-private-color

      - bob
        public-color
        bob-private-color
        bob-mixed-color = public-color + bob-private-color

      ------

      - eve
        public-color
        bob-mixed-color
        alice-mixed-color

      ------

      - alice
        public-color
        alice-private-color
        alice-mixed-color = public-color + alice-private-color
        bob-mixed-color = public-color + bob-private-color
        secret-color
        = public-color + bob-private-color + alice-private-color
        = bob-private-color + alice-private-color

      - bob
        public-color
        bob-private-color
        bob-mixed-color = public-color + bob-private-color
        alice-mixed-color = public-color + alice-private-color
        secret-color
        = public-color + bob-private-color + alice-private-color
        = alice-mixed-color + bob-private-color

***** the discrete logarithm problem -- one way function

      - 3 is a primitive root modulo 17
        3^x mod 17 = y, has a solution for every x
        x -> y is easy
        y -> x is hard

      - https://en.wikipedia.org/wiki/Primitive_root_modulo_n

***** Diffie-hellman key exchange

      - alice and bob agree on : 3^x mod 17 = y

      - alice
        choose private 15
        3^15 mod 17 = 6
        send 6 to bob

      - bob
        choose private 13
        3^13 mod 17 = 12
        send 12 to alice

      ------

      - alice
        12^15 mod 17 = 10
        (3^13)^15 mod 17 = 10

      - bob
        6^13 mod 17 = 10
        (3^15)^13 mod 17 = 10

      - https://en.wikipedia.org/wiki/Diffieâ€“Hellman_key_exchange

***** symmetric vs asymmetric

******* sharing identical keys

        - alice want to send message to bob.

          alice encrypts the message using [k : key-t],
          bob decrypts the message using the identical [k : key-t].

        - ><
          #+begin_src cicada
          key-t   = (-> text-t -- ciphertext-t)
          k       : (-> text-t -- ciphertext-t)
          {k} rev : (-> ciphertext-t -- text-t)
          rev : (-> (-> text-t -- ciphertext-t)
                 -- (-> ciphertext-t -- text-t))
          #+end_src

        - x -
          we should not use a generaic function like 'rev'
          we should use type-class

          and note that
          a arrow-type can not occurs
          in fields of a type defined by (+type)
          thus the interface function might need special 'apply'

******* sending open locks

        - alice want to send message to bob.

          bob create a lock, keep the key, and send the open lock to alice,
          alice locks message and sends it back to bob.

        - lock and unlock are inverse operations
          locking needs the open lock
          unlocking needs the locked lock and the key
          or say
          locking needs the encryption key [the open lock]
          unlocking needs the the decryption key

        - james ellis
          https://en.wikipedia.org/wiki/James_H._Ellis

        - ><
          #+begin_src cicada
          (+class cipher-tc
            < (-> text-t : type-tt
                  ciphertext-t : type-tt
               -- type-tt)
            encrypt
            : (-> cipher-t :: cipher-tc
                  cipher : cipher-t
                  text : text-t
               -- ciphertext : ciphertext-t)
            decrypt
            : (-> cipher-t :: cipher-tc
                  cipher : cipher-t
                  ciphertext : ciphertext-t
               -- text : text-t))
          #+end_src

        - k -
          how about someone only can use the 'encrypt'
          but can not use the 'decrypt'?

        - x -
          ><><><

***** trapdoor one way function

      - a function which is hard to reverse
        unless you have the information call "the trapdoor"

      - clifford cocks
        https://en.wikipedia.org/wiki/Clifford_Cocks

      - the function is
        x^e mod N = y
        x :-> y

      - e and N is public
        and this function can be viewed as the mathematic lock

      - the trapdoor is d such that
        (x^e)^d mod N = x
        which is the same as
        x^(e*d) mod N = x

      - https://en.wikipedia.org/wiki/Trapdoor_function

***** generating e d pair

      - first find a pair of prime numbers p1 p2
        and use p1 * p2 as N
        [the N in x^(e*d) mod N = x]

      - the information about the factorization of N
        p1 * p2 = N
        is the information about the trapdoor

***** euler's totient function

      - phi (N) := the number of numbers,
        that less than or equal to N,
        and do not share any common factor with N.

      - phi (8) = 4, for [1 3 5 7]

        phi (p) = p - 1
        phi (7) = 6, for [1 2 3 4 5 6]

        phi (p^k) = p^(k-1) * (p - 1)
        phi (27) = phi (3^3) = 3^(3-1) * (3 - 1) = 18

        phi (a*b) = phi (a) * phi (b)
        ;; a b mul phi = a phi b phi mul

      - https://en.wikipedia.org/wiki/Euler's_totient_function

***** euler's theorem and RSA

      - factorization of N is a trapdoor for computing phi
        77 = 11 * 7
        phi (77) = phi (11) * phi (7) = 10 * 6 = 60

      - euler's theorem :
        x^(phi(N)) mod N = 1

      - RSA :
        x^(phi(N)*k + 1) mod N = x, for all k
        thus
        phi(N)*k + 1 = e * d

      - bob choose p1 * p2 = N
        and choose k e d, to let phi(N)*k + 1 = e * d
        bob keeps d private
        and makes e N public

      - to get e d N, to let x^(e*d) mod N = x
        and then use
        e N as public key
        d as private key

        we construct
        phi(N)*k + 1 = e * d
        p1 * p2 = N

      - x -
        how to choose k and e?
        or should we choose e first and then k?

***** example of RAS

      - p1 = 53
        p2 = 59
        N = 53*59 = 3127
        phi(N) = 52*58 = 3016
        e = 3
        k = 2
        d = (2*(3016) + 1) / 3 = 2011

      - suppose we have message :
        m = 89

      - encryption :
        c = m^e mod N = 1394

      - decryption :
        m = c^d mod N = 89

      - https://en.wikipedia.org/wiki/RSA_(cryptosystem)

*** modular arithmetic

*** primality test

*** randomized algorithms

* journey into information theory

*** links

    https://www.khanacademy.org/computing/computer-science/informationtheory#info-theory

*** ancient information theory

*** modern information theory

* hashcash

*** links

    https://en.wikipedia.org/wiki/Hashcash

    https://en.wikipedia.org/wiki/Base64

    https://en.wikipedia.org/wiki/Proof-of-work_system

*** interactive cost-functions

    #+begin_src cicada
    (+fun challenge
      : (-> server-t work-load-t -- challenge-t))

    (+fun mint
      : (-> challenge-t -- token-t))

    (+fun value
      : (-> token-t -- value-u))
    #+end_src

*** non-interactive cost-functions

    #+begin_src cicada
    (+fun mint
      : (-> server-t work-load-t -- token-t))

    (+fun value
      : (-> token-t -- value-u))
    #+end_src

*** the hashcash cost-functions

    - the service-name uniquely identifies the service

    - servers only accept tokens minted using their own service-name

    - hashcash is computed relative to a service-name,
      to prevent tokens minted for one server being used on another

    #+begin_src cicada

    #+end_src

* blockchain

*** integrity proof of blockchain

    - in traditional cryptography
      there is trusted entities who has the secret private key
      to digitally sign the data,
      integrity proof is easy with secret private key.

    - in blockchain,
      there are no known trusted entities,
      thus there are no secrets,
      by design it is very expensive to create integrity proof.

    - in traditional cryptography
      there is a designed computational gap
      between good guy -- with the secret private key
      and bad guy -- want to forge an integrity proof

    - in blockchain,
      there is no computation for good guy and bad guy are equal.

      - the security assumption of blockchain is that
        computational power are with good guy,
        the computational power are distributed among them.
        the ledger was so difficult to compute,
        when one block is computed,
        it is broadcasted to all others
        who trying to compute it but not yet success.

    - in blockchain,
      An integrity proof using no secrets,
      no known trusted entities.

*** bitcoin
