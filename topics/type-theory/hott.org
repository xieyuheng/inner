#+title: homotopy type theory note

* history

*** the groupoid model

    - types in intensional type theory with their identity types
      could be regarded as groupoids.

      - the 1998 paper of Hofmann and Streicher called
        "The groupoid interpretation of type theory"
        in which they showed that
        intensional type theory had a model in the category of groupoids.

      - "universe extensionality"
        and the univalence axiom of Vladimir Voevodsky

*** model categories and higher groupoids

    - The first higher-dimensional models of intensional type theory
      were constructed by Steve Awodey and his student Michael Warren in 2005
      using Quillen model categories.

      - Michael Warren, "Homotopy Models of Intensional Type Theory"

*** The univalence axiom, synthetic homotopy theory, and higher inductive types

    - The concept of a univalent fibration was introduced by Voevodsky in early 2006

      - Notes on homotopy lambda calculus, March 2006

* intro

*** type theory

    - [根據 bishop] 要定義一個集合
      首先 要說明如何構造這個集合中的元素
      其次 要說明如何判斷這個集合中的兩個元素相等
    - lambda calculus
    - 則式演算
    - 棧 與 函數複合
    - 函數 以 類型 爲元數據

*** homotopy theory

    * 首先
      考慮空間之間的一些連續映射
      f : (X -> Y)
      g : (X -> Y)
      可以被看成是 空間 Y 被 X 參數化
      同樣的 X 當 f 和 g 分別跑遍 義域 時
      在 Y 中 所得到的像不同
      而 映射的像 通常就是 Y 中幾何體的表示
      這樣 f 和 g 就可以看成是對 Y 中兩個不同幾何體的表示了
    * 空間的連續映射 之間的 同倫[homotopy]
      就是 連續映射 h : (X [0, 1] -> Y)
      滿足
      x 0 h = x f
      x 1 h = x g
      h 稱作是 x 到 y 的連續形變[continuous deformation]
    * 其次
      考慮 同倫等價[homotopy equivalent] 的概念
      兩個空間 X Y
      若有
      a : (X -> Y)
      b : (Y -> X)
      滿足
      a b 和 X id 之間有 homotopy
      b a 和 Y id 之間有 homotopy
      稱 X Y 是 同倫等價 的
      即 兩個空間相互參數化之後
      得到的兩個參數映射之兩種複合
      可以變形到兩個空間的恆同函數
    * 同倫等價的空間 具有相同的 代數不變量[algebraic invariant]
      比如 同調[homology]
      和 基本羣[fundamental group]
      等價關係給出了分類方式
      稱此分類爲 同倫類型[同倫類][同倫型][homotopy type]
*** homotopy type theory
    * 我們需要使用 type 這個術語
      然而已經有了術語 homotopy type
      古典意義下 它指 同倫等價的空間的等價類
      但是
      構造主義 不用 等價類 這個技術
      而是使用 等價類的編碼
      我們的 type
      其實是對 同倫等價的空間所形成的等價類 的編碼
      可以用 等價類的代表元素[此處是代表空間] 來理解這類編碼
      所以當說 a 是 [homotopy] type A 的元素的時候
      所說的是 a 同倫等價類的 代表空間 A 中的點
      而不是 等價類 A 之中的一個代表空間 a
    * 前面說過
      首先 需要考慮兩個空間之間的各個連續映射
      其次 需要利用 連續映射 和 連續形變 來定義空間的 同倫等價
      type 就可以被看成是 對 同倫等價 的空間的等價類的代表空間 的編碼
      a : A 是說 a 是代表空間 A 中的點
      那麼
      反過來
      連續映射 和 連續形變 的意義是什麼呢
      首先 連續映射 的概念也變了
      f : A -> B 是模掉 連續形變 之後的 連續映射
      即 對連續映射的同倫等價類的編碼
      而 連續形變 就內蘊在 這種編碼中了
      可以發現
      連續形變所帶來的幾何體的差異
      已經被我們的編碼完全抽象掉了
    * type = space [with homotopy equivalent] = higher groupoid
    * type constructor = space constructor [respect homotopy equivalent]
    * 只考慮同倫性質
      而不考慮拓撲性質
      比如 不考慮 開集 與 點列的極線點
    * 比如
      每個類型 A
      都有 判斷這個類型的兩個元素 a b 相等 的方式
      這樣一個對相等的證明 p : a == b 就是 A 中的一條 path
      或者記爲 p : a =A= b
      或者記爲 p : a b A id
      而 這裏的 A id 就是 A 中所有 path 所組成的空間
*** univalence axiom
    * 對於 所有[小]空間的空間 U 這個集合 [常稱爲 universe]
      其元素 A B 爲[小]空間
      我們指定其等詞爲 A B 之間存在雙射
      這就是 univalence axiom
    * p : A B U id 即 在 U 中 A B 之間有路 p
      即 p : A =U= B
      定義爲
      A B 之間存在雙射
    * 其合理性可考慮如下
      觀察古典的 同倫等價[homotopy equivalent] 這個概念
      在類型論中的變化
      兩個空間 X Y 同倫等價 當爲判定二者相等之等詞
      即有
      a : (X -> Y)
      b : (Y -> X)
      因爲 a b 只是對 連續函數的編碼
      所以 此時 在編碼意義上 同倫等價的條件就成了
      a b 和 X id 相等
      b a 和 Y id 相等
      X Y 同倫等價的條件 就被轉化爲了雙射存在
    * 在編程的時候
      ua [denotes univalence axiom]
      可以把 A B 之間的雙射 bi : A B exist-bijection?
      轉化成 兩個空間 A B 相等的證明 f ua : A B U id
      而 transport 可以把這樣一個證明轉化爲
      相等元素在 任何語境下的代換
      f ua context transport : A context -> B context
    * 引入此公理的動機
      是爲了在形式體系的規範下
      證明 homotopy theory 中的定理時
      能夠 更簡練 更接近非形式數學
*** 記 bishop 如是說
    * 要定義一個集合
      首先 要說明如何構造這個集合中的元素
      其次 要說明如何判斷這個集合中的兩個元素相等
    * 看來 hott 就是 bishop 之誡 的實踐
      univalence axiom 只不過是
      對於某個特殊的集合 強調 bishop 之誡 而已
    * 那麼
      在設計程序語言的時候
      我們先考慮如何把 bishop bishop 之誡
      實現爲語言的核心性狀
      也就是說
      每個類型都要配以基本等詞
      而 type 這個類型的等詞就是[小]類型之間的雙射
      注意
      保持等詞的類型之間的操作纔稱函數
    * 要把 quotient type 做爲核心性狀
      可以通過改變 一個類型的基本等詞
      來構造新的類型
*** 記 hott 計算模型的缺失
    * hott 之缺失計算模型
      就像是 bishop 的 constructive analysis 之缺失計算模型
    * univalence axiom 捕捉了能夠在有限步驟內能夠完成的所有計算
      但是 某些計算並沒有高效的算法實現
      正如 bishop 聲明自己的 constructive analysis
      考慮的是所有有限步驟內能夠完成的計算的一般理論
      而暫時忽略效率問題
    * 我想
      可以像在 constructivism 中論證 中值定理 缺乏構造性 一般
      我也可以構建一個計算模型
      來用反證法論證
      univalence axiom
      還有 bishop 的實數
      都 缺乏有效可計算性
      我可以證明
      如果 univalence axiom 和 constructive analysis
      具有可以被估計的時間複雜度
      那麼
      關於時間複雜的的很多疑難問題 就都將被解決了
*** higher inductive type
    * 這裏指的是如下對幾何體的定義
      類似 CW complexes 中幾何體的生成法
      1-sphere
        base : 1-sphere
        loop : base == base
      2-sphere
        base : 2-sphere
        2-loop : (base == base) == (base == base)
      2-torus
        base : 2-torus
        warp : (base == base)
        weft : (base == base)
        2-loop : (weft warp == warp weft)
*** 記 算數的分級
    * 注意
      natural 就是以 inductive type 的方式定義的
      natural
        base : natural
        succ : natural -> natural
      而且
      由 natural 擴展而來的 integer 與 1-sphere 等價
      所以說 算數的分級 也許可以在 這種遞歸定義中考慮
      也就是說 這種遞歸定義 給出有趣的代數結構
      也許 可以用以給出新的 '算數' 從而用以研究 算數的分級
      而 他們給出的幾何直覺 可以幫助我們理解 算數的分級
*** sets in univalent foundations
    * 野心是 代替 集合論 做爲當前數學基礎的地位
    * 但是
      想要恢復集合論 就要用到 完全離散的空間
      加上空間 A 的離散性的證明之後
      a : A 就可以被解釋爲 a 屬於集合 A 了
*** informal type theory
    * 語言設計上 想要貼近傳統的數學語言
*** constructivity
    * proof relevance
      according to which
      mathematical statements, and even their proofs
      become first-class mathematical objects
* 1 type theory
*** type theory versus set theory
    * 一個集合必須有等詞
      聲明兩個元素相等時 必須給出證明
      對兩個元素相等 可以有很多證明
      就像是兩個點之間可以有多條路
      對兩元素相等的證明 就是對路的構造
    * 等詞的分類
      propositionally equal
      judgmental equality [definitional equality]
      後者其實是說 有基本等詞
      這種基本等詞應該消除
      所有的等詞之間的關係都是相對的
      基本等詞的產生
      是因爲有基本數據結構 在 agda 中 即 tree of symbol
    * definitional equality
      爲了解決全局命名所帶來的
      不同名字所構造的結構之間的相等
      全局命名只是在給所構造出來的結構貼標籤做引用而已
*** function types
    * 在我的類型系統中 只有一種類型
      即 則式
      (... -> ...)
      這種語法更方便函數複合
      但是
      在古典的類型系統中
      卻可以把 各種邏輯連詞做爲類型構造子引入
      其實 在蟬語中
      則式 也可以被類型構造子引入
      只不過 所有的語法都是圍繞 則式 優化的
      所不容易發現這一點
      就像是
      面向對象的語言 用 associate list 來實現對象時
      所有的 語法都是圍繞 關於 associate list 的操作 而優化的
      所以 看不出 associate list 了 一樣
    * 可以看出 definitional equality
      就是 agda 所選取的相當任意的一個基本等詞
      爲所有 term 所共用
    * function type
      * formation
        (... -> ...)
        (A -> B)
      * introduction [constructors]
        []
        [(A -> B) ...]
        or
        pattern matching
      * elimination [eliminators]
        apply
        (A (A -> B) -> B)
      * computation [reduction]
        a [(A -> B) ...] apply
      * uniqueness principle [expansion]
        f
        [f]
*** 記 如何定義集合
    * 我之前說
      定義一個新集合的時候
      需要指定如何判定其中二元素相等
      而引入類型的方式有二
      一是
      先構造然後再命名
      二是
      給出名字之後做遞歸定義
      遞歸定義 就是指明這個數據類型的 構造子[指定其接口函數]
      那麼
      這兩種方式之所以能用以引入新的集合
      就是因爲它們滿足定義集合的兩個條件
      如何滿足呢
      說 則式 是特殊的類型構造子 又如何如此呢
    * 先構造然後再命名
      就涉及到類型構造子[返回類型的函數]
      既然這個函數代表一族類型
      那麼它也要給出一族等詞
      比如 有函數的類型爲 (set set -> set)
      它所構造的集合的等詞
      就一定是用它的兩個參數集合的等詞構造的
    * 遞歸定義又如何呢
      我可以讓觀察具體一點
      遞歸定義 給出了構造屬於這個類型的元素的方式
      [或者說 規定了這個類型的元素的表達式的語法]
      也就是給出一個遞歸定義的謂詞
      來判斷 一般表達式是否表達這個類型的元素
      那麼
      等詞也一樣是這樣一種遞歸函數
    * 我覺得最重要等詞相關的概念被忽略了
      或者說被以隱含方式處理了
      設想一下如果要給語言加入 商類型 這種新的類型構造子的話 將如何
      根本沒法良好定義這個新的引入類型的方式
      因爲每次定義類定的時候 [比如 使用歸納定義的時候]
      給出集合的等詞的方式太平凡了
      就是 使用基本的數據結構的等詞而已
      對於 商類型 來說 這是不充分的
      比如
      quotient (? set -> set)
      如果這樣聲明類型發現根本就沒法定義 quotient 的函數體
      #+begin_src cicada
      set
      ({(term -> bool) #predicate}
       {(term #term1 term #term2
         {:term1 :predicate apply true?}
         {:term2 :predicate apply true?} -> bool) #equality}
       -> :predicate :equality)
      #+end_src
      如若如此
      quotient (predicate equality quotient-function -> predicate equality)
      看起來也不是很正確
      因爲
      在現有的語言中 實現 set 的方式都不是如此
      而且
      {} 成了一個對真假的判斷
      這正是基本原理所反對的
      如果 用兩個 term 空間的函數來定義 set
      那麼 類型構造子[返回類型的函數]
      就成了返回函數的函數
      這正是我的基本原理所反對的
    * 我發現 要求給出等詞 可能太強了
      比如 在 lambda term 的空間中
      考慮 由 reduction 所生成的等價關係所義的等詞
      有了等詞之後
      相當於是給出了一個判別任何連個元素是否相等的算法
      也就是自動生成證明的算法
      所生成的證明 其實就是把計算過程記錄下來
      這個計算過程代表了如何從一點走到另一點
      因此就是一條路
    * 定義等詞的不應該是一個返回布爾值的謂詞
      而應該是 一個對返回類型的函數的遞歸定義
      每個這種遞歸定義都能生成一個判別函數
      來判別 term 是否滿足這個遞歸定義
      滿足這個遞歸定義的 term 就是對相等的證明
      也就是說
      我們並沒有給出 對兩個[某類]元素是否相等的判別
      我們給出的是 對一個證明 是否是 對相等的證明的判別
      這樣要求就弱多了
      [所有的謂詞 都以這種方式處理]
      cicada:equal? (cicada cicada -> proposition)
    * 但是 此時 cicada:equal? 又是一個類型構造子了
      [因爲它是一個返回類型的函數]
      如果要求所有的集合都帶有等詞
      我們又需要給出這個高階集合的等詞
      那將是
      #+begin_src cicada
      cicada:equal2?
      ({cicada #cicada1 #cicada2}
       :cicada1 :cicada2 cicada:equal?
       :cicada1 :cicada2 cicada:equal? -> proposition)

      cicada:equal3?
      ({cicada #cicada1 #cicada2}
       {:cicada1 :cicada2 cicada:equal? #cicada11 #cicada12}
       :cicada11 :cicada12 cicada:equal2?
       :cicada11 :cicada12 cicada:equal2? -> proposition)
      #+end_src
      這是沒完沒了的
      也就是說
      如果想要把等詞處理爲 path 的集合
      而又要求 對每個集合都要給以等詞
      那麼對等詞的定義將是沒完沒了的
    * 也就是說 連個基本原理之間發生衝突了
      其一是
      應該把所有的謂詞都實現爲返回類型[命題][集合]的函數
      而不是返回真假值的函數
      其二是
      定義每個集合的時候都要給以等詞
      其矛盾在於
      等詞是謂詞
      如果把等詞實現爲返回集合的函數
      那麼又要定義新的等詞了
    * 如何調和這兩個基本原理之間的矛盾
      只有一種方法
      那就是 在定義了第一個層次的等詞之後
      其他層次的等詞 應該做爲一個潛在無窮的集合
      而被自動生成
      也就是說要給出生成這個潛在無窮集合的方式
      也許有不同的方式呢
      對於 lambda term 的空間來說 確實如此
      但是 定義高階路徑的時候 有多種方式
      也許我們每次給出等詞時都要給出這個潛在無窮等詞列
      但是 通常只有第一項是非平凡的
      所以 當之給出這個無窮列的前幾項[比如 第一項]時
      就假設其其他項是由前幾項 以默認方式生成的
    * 也就是說
      這兩個看似矛盾的基本原則合在一起
      使得我們在定義集合時
      要聲明的東西更多
      所聲明的信息 甚至可以是潛在無窮多
    * 注意
      還有一種解決矛盾的方式
      就是發現基本原則之一是錯誤的
      在 bishop 的基本原則下
      等詞是唯一特殊的謂詞
      其他的謂詞都不必如此
      正是這種特殊性導致了衝突
      我想
      可以通過消除這種特殊性來化解衝突
      可以稍稍改變一下 bishop 的原則
      定義一個集合時
      需要指明構造這個集合的元素的方式
      還需要至少給出一個基本謂詞
      給出基本謂詞的方式是
      給出一個涉及所定義的集合的返回類型[集合]的函數
      這樣
      關於函數的定義也要調整
      函數[證明]是一個能夠在有限步驟內完成的操作
      函數所保持的可以不是等詞
      而是那個集合的基本謂詞
    * 注意
      典型的難以定義等詞的集合就是 函數的集合
      p : f1 f2 (A -> A) id
      p 是一個證明
      它證明了 兩個以 (A -> A) 爲類型的函數 f1 與 f2 相等
      其實在 typed lambda-calculus 裏是可以有函數的等詞的
    * 這種默認生成
      可以說是 對等詞的繼承
      hott 中所有的地方都使用了這種默認的對等詞的繼承
      只有一個地方沒有使用就是 ua 的地方
      不知道這樣的說法對不對
      ><><><
    * 如果是繼承
      那麼 就是對接口的繼承
      那麼 就是子類型的概念了
      如果是不要求等詞
      那麼 有什麼數據類型是沒有等詞的呢
      數值分析邪 概率論邪
      ><><><
*** universes and families
    * cumulative
      sub-type [sub-set]
    * families of types [dependent types]
      B (A -> U)
      or
      B (A -> set)
*** dependent function types
    * dependent function type
      * formation
        (... -> ...)
        (A #a -> :a B)
      * introduction [constructors]
        []
        [(A #a -> :a B) ...]
        or
        dependent pattern matching
      * elimination [eliminators]
        apply
        (A (A #a -> :a B) -> :a B)
      * computation [reduction]
        a [(A #a -> :a B) ...] apply
      * uniqueness principle [expansion]
        f
        [f]
*** >< product types
    * product in stack
      * formation
        (... -> ...)
        (-> A B)
      * introduction [constructors]
        f (-> A)
        g (-> B)
        f g (-> A B)
        or
        function composition
      * elimination [eliminators]
        f (-> A B)
        f drop (-> A)
        f swap drop (-> B)
      * computation [reduction]
      * uniqueness principle [expansion]
    * cicada
      #+begin_src cicada
      * list
        (type -> type)
        * null
          ({type #type} -> :type list)
        * cons
          ({type #type} :type list :type -> :type list)
        * car
          ({type #type} :type list -> :type)
        * cdr
          ({type #type} :type list -> :type list)

      * list
        (type #type -> type)
        * null
          (-> :type list)
        * cons
          (:type list :type -> :type list)
        * car
          (:type list -> :type)
        * cdr
          (:type list -> :type list)

      * pair
        (type type -> type)
        * pair:cons
        * first
        * second
      #+end_src
    * 爲了使得依賴性可以被表達
      product type 是用 lambda abstraction 定義的
      這是因爲 沒有多值函數 也沒有返回多值的函數
      參數之間的依賴性 和 返回值之間的依賴性
      就必須用 curry 來處理
    * product in memory
      * formation
      * introduction
      * elimination
      * computation
      * uniqueness
*** dependent pair types
    * in stack
      *
      *
      *
      *
    * in memory
      *
      *
      *
      *
*** coproduct types
    *
*** the type of booleans
*** the natural numbers
*** pattern matching and recursion
*** propositions as types
*** 記 商空間
    * 假設 集合都配以等詞爲基本接口性質
      那麼 做商空間的方式就是
      以一個更強的 等詞代替 原有等詞
    * 然而 對於原集合
      定義與其上的變換分兩種
      保持等詞者稱函數
      不保持等詞者稱操作
      當做 商空間 的時候
      所有函數的性質都改變了
      所以需要重新定義接口函數
      或者重新證明接口函數保持新的等詞
    * 如果 對等詞可以有如此繼承
      那麼 對別的接口也可以
      商空間 和 子類型 還有 類型類
      說的都是這種對接口函數的繼承與修改
      注意 商空間修改等詞之後 集合的元素就不同了
      所以 商空間與子空間是很不同的
*** identity types
    * 怎麼可能對任何型都有一致的方式引入等詞呢
      如果這樣的話 根本就沒有 商類型可言了
      這確實做到了 對於每個類型 都有一個等詞
      但是放起了對這個等詞的操作
* 2 homotopy type theory
* 3 sets and logic
* 4 equivalences
* 5 induction
* 6 higher inductive types
* 7 homotopy n-types
* 8 homotopy theory
* 9 category theory
* 10 set theory
* 11 real numbers
* 新記
*** 引
    1. 所有 lambda-term 所構成的有向圖中
       等詞 =b= 是一個無向路
       對等詞的肯定是對一條具體的路的展示[一段[或多段]計算]
    2. 每個路的性質是不同的
       並且其實其不同的性質是需要被注意的
       因爲每一條路都代表計算
    3. M =b= N 是無向路的集合[一個類型]
       所以
       對這個等詞的證明就是
       去找到這個類型中的一個元素
    4. 自然數 是一個集合[一個類型]
       所以
       對自然數的證明就是
       去找到這個類型中的一個元素
*** 類型
    1. 帶有類型的 lambda-calculus 能夠形成層次
       而無類型的 lambda-calculus 在沒有層次結構的條件下
       也能編碼自然數和自然數上的基本運算
*** as type system
    * with functor builtin
    * ua
      給出兩個 類型之間的 雙射 -> 給出兩個類型相等的證明
      不同的雙射 可能給出同樣類型的證明[對同一個命題的證明]
      雙射就是兩個方向的函數
      它是有計算語義的
      也就是說 對等詞的證明是有計算語義的
    * transport
      兩個類型相等的證明 -> 兩個類型的元素 可以在任何地方相互代換
      但是具體的代換必須用具體的函數來完成
      如何從對相等的證明中選取出函數來實行代換
*** 關於等詞
    * ua 成了等詞的引入
      但是其實應該可以有不同的等詞
      每個 type 都必須有等詞做爲其基本接口函數
      注意
      等詞並不是一個函數 而是一個類型
      也就是說 等詞返回的不是 bool 而是 type
*** 同構
    * 證明 兩個數據類型某種意義上同構
      其中一種數據類型 可能適合證明
      而另一種 可能適合計算
      這樣就能在不同的場合使用同構不同數據類型了
*** quotient
    * 以 bishop 的方式定義集合
      然後再加上 quotient 之後
      是否就達到 hott 的效果了呢
      畢竟
      在 bishop 的概念下
      集合的意義已經深刻改變了
      但是
      如果沒有 帶到 hott 的效果
      那還差什麼呢
*** 等詞與則式之間的關係是什麼
    * 有了則是 是否就不需要等詞了
      有 (A -> B)
      且有 (B -> A)
      就是 (A == B)
*** >< 則式 的 幾何解釋 是什麼
    * 如果想要用 則式 來處理等詞
      那麼 則式 的意義有該如何
* notes on homotopy λ-calculus [vladimir voevodsky]
*** 引
    1. 數學基礎的相對性
       只要理論本身的複雜性
       還沒有發展到 讓直覺性的[半直覺性的]論證進行不下去
       那麼人們通常根本就不考慮數學基礎這個問題
    2. 然而
       當考慮到同行對證明的驗證
       而意識到 在技術細節上 需要機器輔助證明[驗證]的時候
       徹底的形式化就勢在必行了
* 動機
  1. 去以構建一個機器輔助證明系統爲目的
     也許能幫助人理解這裏的工作
  2. 想要提供一個更好的對數學基礎的形式化的動機是
     希望能夠設計出可用性更強的機器輔助證明系統
* 關於邏輯
  1. 在構造性的數學中
     如果我有一個數學結構
     - 按經典的集合論語義來理解
       我所使用的基本集合是我用歸納定義來得到的
     然後如果我定義等價關係
     作爲歸納定義有向樹中的無向路
     對於基本集中的兩個具體元素
     我已經有一種方法來判斷它們之間是否具有某個等價關係了
  2. 在舊的筆記中 形式理論 是一個重要的名詞
     但是其實也許我應該完全廢棄這個名詞
     而在 curry-howard-correspondence 的幫助下
     用 lambda-calculus 來理解邏輯
  3. ><><>< [舊筆記]
     我再引入一些推理規則是什麼意思?
     首先
     當引入一些推理規則的時候
     我就得到形式理論
     這時在這個形式理論和我的數學結構之間
     可以問
     1 一致性)[協調性 相容性]
     2) 完備性
     這兩個主要問題
  4. 形式理論與數學結構之間的關係
     就是 形式理論的推理規則
     與 數學結構的基本集中的基本等詞之間的關係
     - 但是它們的關係好像都是虛的
       爲了從 基本等詞
       形成各種關於理論的命題
       我只需要用基本等詞定義謂詞[到0和1的映射]而已
     - 但是
       有些謂詞 雖然存在 但是 不可計算?
       所以需要高階理論?
  5. 當我把形式理論與數學結構之間的一般關係明確了
     我就可以
     1) 自由地引入推理規則對某個數學結構形成形式理論
     2) 把所能形成的各種形式理論
        作爲描述我的數學結構中的那些一般性質的語言
  6. 要知道
     能形成什麼樣的命題都是和形式理論有關的
  7. 甚至
     如果我說
     "形式理論爲我提供了證明的工具"
     那都是不恰當的
     因爲
     1) "證明" 的意義包含於形式理論本身
        因爲是推理規則在構建以命題爲節點的有向圖
     2) "去證明什麼樣的東西" 也包含於形式理論本身
        因爲是推理規則在決定以基本命題爲基礎
        形式理論中的其它命題長什麼樣
        即 如何由基礎命題引入複合命題
* 等詞的意義
  1. 說兩個集合等勢時
     它們之間的雙射可以是多種多樣的
  2. 說兩個拓撲空間對同倫等價時
     它們之間的同倫變換可能是多種多樣的
  3. 當我說等詞 M =b= N 成立的時候
     在有向圖中
     我可能能以很多的方式找到
     來對這個等詞形成判定的無向路
  4. 除了基本等詞的判定方式可能是單一的之外
     對其它的等詞的判定都是不單一的
  5. 重要的是要理解到
     對非基本等詞的判定是要找一條路
* type theory [the book]
*** 動機
    類型論內 每個變元都被指定類型
    作下面的考慮就知道這是自然的:
    集合論構建在一階邏輯的形式理論的基礎上
    而在實際的數學事件中
    人們卻直接使用集合論和一階邏輯所構成的
    一種混雜形式語言
    也就是在用量詞引入約束變元的同時規定約束變元所在的集合
    也就是說量詞不是被單獨使用的 而總是與集合一同使用的
    這種擴展了的量詞的使用可以被看成是
    之使用單純量詞的一階邏輯語言的"語法糖"
    + >< 類型論處理了這個問題嗎?
      也就是要給這種混雜語言一個理論基礎?
*** 類型有兩種語義:
    1. 集合
    2. 命題
       (a:A是a對A所代表的命題的可證性的見證)

    "一個變元對一個類型的屬於"
    與"一個元素對一個集合的屬於不同"
    後者是一個一階邏輯中的命題
    前者是一個證明論層次上的元命題
*** as languages
    一階邏輯與集合論
    類型論
    它們都作爲數學基礎的兩種形式語言
    它們之間的關係是什麼?
    + 就像德語與中文之間的關係一樣
      一種語言可以用來介紹另一種語言嗎?
*** functions not are as relations
    but are a primary concept in type-theory
*** 推理規則 v.s. 公理
    - 類型論:
      動態的推理規則
    - 一階邏輯 + 集合論:
      一階邏輯的推理規則 + 集合論的靜態公理
*** polymorphic identity function:
    id :== λ(A:U).λ(x:A).x

    也就是說表達式中類型所在位置也可以用來作符號代入
    但是問題也跟着來了:
    後面的λ(x:A)對前面代入的A有依賴性
    即只有代入A之後才知道後面的東西的類型是什麼
    使得沒法用正常的記號寫出這個λ-abstraction的類型

    只能引入記號∏:
    id : ∏(A:U).A -> A

    ∏(A:U).A is just like λ(A:U).A
    it is ∏-abstraction,
    the type of a ∏-abstraction is not important,
    ∏-abstraction is for to help people to describe
    the type of λ-terms like λ(A:U).λ(x:A).x

    所作出來的函數的 前面所需要帶入的類型可以被看做是
    對後面所輸入的函數的類型的要求
*** universes and families
    同集合論中一樣
    這裏需要用類型的universes的層次結構來避免
    U∞:U∞所能引起的悖論
    1. 每一層次的universes對於cartesian-product封閉
       observing that:
       ordered pairs are a primitive concept,
       as are functions.
    2. 每一層次的universes包含前一層次
       這樣規定的不好之處在於
       一個變元所屬的類型不再是唯一的了

    同樣也有families的概念
    但是既然families是函數那就也應該可以用
    類似λ-abstraction的東西來把它們寫出來
    這樣就產生了∏-abstraction和上面的
    對λ(A:U).λ(x:A).x的類型的記法
*** >< 語言
    對比 人類交流語言 程序語言 數學語言 的基本功能

    要創造一個人造人類交流語言
    我需更要實現的核心功能有那些?

    要設計一個新的(一般目的的)程序語言
    我需要實現的核心語義有那些?

    要給數學基礎設計一個新的形式語言
    我需要獲得的核心語義有那些?

    這三種語言之間有什麼區別?
    首先原料不同
    比如語音的需要不同
    普通的人類交流語言需要語音
    而數學語言完全不需要語音
    一個數學家在家安靜地看書 然後給朋友寫信就行了
    程序語言也不需要語音

    數學語言的基本語義在於能夠聲明我證明了某個東西是真理
    也就是說其核心語義在於證明
    在於讓將思想概念之間的關係完全形式化
    不管是
    一階邏輯+集合論
    範疇論
    類型論
    都有推理規則來作證明

    發明一種新的推理規則之後
    這種推理規則所產生的理論的整體性質是什麼?
    那種有向圖的結構所能形成的幾何的幾何性質是什麼?
    + >< 這是我感興趣的
      也許第四級運算的不可能性就是一個整體性質呢?!!!

    與類型論相比
    一階邏輯與集合論所構成的數學的基礎語言就像一種混雜語
    因爲此時公理是在集合論中的
    而推演規則是在一階邏輯中的
*** dependent pair types
    ∑(x:A).B(x)
    這個式子作爲類似λ-abstraction的東西
    帶入a:A後 在類型公式中的得到的類型是:
    A×B(a)

    而∏(x:A).B(x)
    被帶入a:A後 在類型公式中的得到的類型是:
    B(a)
*** how to define functions
    to define a function
    is to construct elements of A->B

    to define a function
    is to show the rewrite-rule of it
    by some equations
*** natural numbers
    the essential property of the natural numbers
    is that we can
    define functions by recursion
    and perform proofs by induction
*** propositions as types
    translation of logical connectives into
    type-forming operations

    The basic principle of the logic of type theory
    is that a proposition is not merely true or false
    but rather can be seen as the collection of
    all possible witnesses of its truth

    since types classify the available mathematical objects
    and govern how they interact
    propositions are nothing but special types
    namely, types whose elements are proofs

    這裏反證法的語義是"直覺主義"的 或 "構造性的"
    ¬¬A == (A->0)->0
    =/= A

    the propositions-as-types versions of "or" and "there exists"
    can include more information than
    just the fact that the proposition is true
*** >< 類型之間的依賴性爲什麼是重要的?
    據說這還是各種形式理論中一直以來所確實的
*** >< 關於應用
    機器證明被用來作爲對代碼進行靜態分析的工具
    並且已經形成了相關的產業
* formalization [觀點來自俄國人VV的演講]
  1. 好的形式體化
     應該使得各種層次的 "等價" 都成爲可能
  2. 用同倫理論來編碼數學對象就可以實現這一點
     這在於證明
     formalism of higher equivalences
     (theory of higher groupoids)(範疇論)
     ==
     homoptopy theory
     但是這種編碼是不可用的
     因爲同倫理論本身就是複雜的數學理論
  3. 類型論可以在這裏起到作用
     以幫助同倫理論 對其它數學對象的編碼
  4. 因爲類型論提供了直接面向同倫理論的形式語言
  5. 關於 "不接受"
     用編程界的術語來打比方
     數學家的社區不接受某種東西
     可能是因爲
     這種東西的 syntax 沒有良好對應的 semantics
     - 比如類型論剛產生時候的處境
* syntax
  t ::= x | c | f | λx.t | t(t')

  f as defined constant
  each defined constant has zero, one or more *defining equations*

  f(x1,...,xn) :== t
  where t does not involve f

  f就是rewrite-rule
  或者說f用來微觀地定義一個代數結構
  + 比如SKI就是f的代表
* contexts
  A context is a list
  x1:A1, x2:A2, ..., xn:An
  which indicates that the distinct variables
  x1, ..., xn are assumed to have types
  A1, ..., An, respectively

  the context holds assumptions

  (x1:A1, ..., xn:An) ctx
  ------------------------------------Vble
  x1:A1 , ..., xn:An ͱ xi:Ai
* methodology
*** note
    每個基本的東西:
    笛卡爾積,等詞,不交併 等等
    都是通過給出一個類型而給出的
    + propositions as types是什麼?
      是兩個形式語言之間的關係嗎?
      一階邏輯與類型論??
      兩個形式語言之間的關係是通過模型法而被探索出的嗎??
      當同時爲同一個模型構造兩種形式語言的時候就會出現這種問題了

    >< 每次補充定義類型都會增加新的推演規則??
    這使得這種語言更加靈活
*** formation rule
 stating when the type former can be applied

 Γ ͱ A:Ui    Γ, x:A ͱ B:Ui
 ---------------------------Π-FORM
 Γ ͱ ∏(x:A).B:Ui

 每個證明論意義下的論斷
 都必須用"ͱ"來明確其語境(條件)
 因此推演規則就是在"ͱ"語句之間的作推演

 ∏(x:A).B
 是這種語言提供的描述類型之間依賴關係的方法之一
 比如Γ, x:A ͱ B:Ui
 就是包含了對一種對類似的依賴性的描述
 也可以理解爲B:A->U
*** introduction rules
 stating how to inhabit the type

 Γ, x:A ͱ b:B
 ----------------------Π-INTRO
 Γ ͱ λ(x:A).b:∏(x:A).B
*** elimination rules
 or an induction principle
 stating how to use an element of the type

 Γ ͱ f:∏(x:A).B    Γ ͱ a:A
 ---------------------------Π-ELIM
 Γ ͱ f(a):B[a/x]
*** computation rules
 which are judgmental equalities
 explaining what happens
 when elimination rules are applied to results of introduction rules

 Γ, x:A ͱ b:B    Γ ͱ a:A
 -----------------------------------Π-COMP
 Γ ͱ (λ(x:A).b)(a) == b[a/x] : B[a/x]
*** uniqueness principles
 (optional)
 which are judgmental equalities
 explaining how every element of the type
 is uniquely determined by the results of
 elimination rules applied to it

 Γ ͱ f:∏(x:A).B
 ------------------------------Π-UNIQ
 Γ ͱ f == (λx.f(x)) : ∏(x:A).B
* from-video
*** note
    1. types are ∞-groupoids
       ∞-groupoid is a algebra-structure of category theory
    2. workflow
       數學給類型論提供新想法
       類型論給數學提供新形式證明方式
    3. type的兩個基本語義
       - spaces as types
       - propositions as types
    4. 同倫不變性對這個形式語言來說是內蘊的
       空間的同倫類就是這個語言的基本元素
*** π...1(S^1) = Z(Zahl)
 Circle is inductively generated by:
 (point) base : Circle.
 (path) loop : base = base.

 we get free ∞-groupoid with these generators
 id
 loop^[-1]
 loop o loop
 inv : loop o loop^[-1] = id
 ...
***** Circle recursion
  function:
  f : Circle ->  X
  is determined by:
  base' : X
  loop' : base' = base'
***** Circle induction
  to prove ∀x:Circle,P(x)
  suffices to prove
  1. prove P(base)
  2. the proof you give is continuously in the loop
***** π_1(S^1)
  π_1(S^1) == 0-truncation of Ω(S^1)
  == set of connected componets of Ω(S^1)

  to prove:
  Ω(S^1) = Z(Zahl)

  is to define:
  + 即找同構映射
  winding : Ω(S^1) -> Z(Zahl)

  is to represent the universal cover in type theory
  the universal cover is fibration
  in type theory fibration is familiy of types
  對fibration的經典定義是保持道路的連續映射
  + path-lifting
    proj : E -> B
    B中的path:
    path-of-B : p(e) =B= y
    的逆像是E中的path:
    proj^[-1](path-of-B) : e =E= p^[-1](y)
    主意這裏通過固定一個E中的e點來簡化說明

  語義上映射的像集被映射的定義域纖維化
  實際上是一個空間被令一個空間參數化
  這就自然得到了fibration在type-theory中的表示

  fibration = familiy of types
  + 也就是說fibration是familiy of types的語義之一
    familiy of types還有邏輯學上的語義
  notation:
  (E(x))_x:B
  + 語義上 即B對空間E的參數化
    給出一個參數b:B後E(b)是E的子空間
    因此E(x)所描述的依賴關係就是上面的proj^[-1]
  Π x:B . E(x)
  ((Π x:B . E(x)) b) --> E(b) == proj^[-1](b)
  where E(b) is a type (a fiber)

  語義中對path的保持性由下面的式子捕捉:(transport)
  ∀ path : b1 =B= b2
  gives equivalence E(b1) == E(b2)
  什麼意思?
  B中的道路給出高維度的道路嗎?

  so here we have the universal cover:
  (Cover(x))_x:S1
  DEFINE:
  Cover(base) :== Z(Zahl)
  transport_Cover(loop) :== successor
  即定義纖維化就是去
  定義纖維
  + 這裏是:Cover(base) :== Z(Zahl)
  然後定義lifting the path的時候所給出的纖維上的變換是什麼
  + 這裏是:transport_Cover(loop) :== successor
    transport_Cover(loop o loop) :== successor o successor
    等等
  DEFINE:
  winding : Ω(S^1) -> Z(Zahl)
  (winding path) :== ((transport_Cover path) 0)
  + 我用lisp的語法了要不然歧義太大

  https://video.ias.edu/sites/video/files/ams/2012.restore/2012/MembersSeminar/Licata-2012-11-26.hi.mp4
  and about group
  https://video.ias.edu/members/rivin

*** >< the hopf fibration
*** constructive-type-theory-and-homotopy
***** about equivalence
  在我對λ-cal的理解中
  t:Λ這樣一個類型聲明甚至都是構造性的
  它說明t是無窮有向圖graph(Λ;-sβ->)中的一個節點
  而p:Id_Λ(a,b)說明
  p是graph(Λ;-sβ->)中的兩點a,b間的一條有向路
  + 或者寫成p:a =β= b這樣寫的話就更明確了"Id_Λ"的意義
    因爲對每個類型(比如這裏的Λ)可能可以定義不同的等詞
    比如我可以寫α:Id_(Id_Λ)(p,q)
    但是這裏我需要知道類型(或空間)Id_Λ中的等詞是什麼
    當Λ是一個拓撲空間時α:Id_(Id_Λ)(p,q)就是
    道路p,q之間的homotopy
    但是當Λ是λ-term的集合時上面的類型(Id_Λ)(p,q)中的等詞又是什麼呢?
    考慮這樣一個有向圖:N
    它的節點是二維平面上的所有整數點
    有向邊是橫座標或者縱座標上的後繼關係
    這樣的圖中顯然(Id_N)(p,q)中的等詞是有自然定義的
    因爲我可以相像一條無向邊在這個圖中的"連續移動"
    對於圖graph(Λ;-sβ->)來說當然也可以有這樣的理解
    太棒了

  但是問題是在類型論中對t:Λ這樣的聲明是如何理解的?
  是先驗的嗎?
  是隨意引入的嗎?
  是構造性的嗎?
  來形式化Id概唸的推理規則是下面這樣的:

  A:type
  ----------------------- Id formation
  x,y:A ͱ Id_A(x,y):type
  + 那麼對應於Id_A的等詞只能是單一的了???
    這樣的情況是可以接受的嗎??

  a:A
  ---------------- Id introduction
  r(a):Id_A(a,a)
  + r denotes reflexivity

  x,y:A, z:Id_A(x,y) ͱ B(x,y,z):type
  x:A ͱ b(x):B(x,x,r(x))
  ---------------------------------------- Id elimination
  x,y:A, z:Id_A(x,y) ͱ J(b,x,y,z):B(x,y,z)
  + heuristic:
    x = y
    B(x,x)
    -------
    B(x,y)

  a:A
  ----------------------------------- Id computation
  J(b,a,a,r(a)) = b(a) : B(a,a,r(a))
  + "bookkeeping of witness-terms"
    什麼意思???

***** about dependent
  dependent types are fivrations
  so x:A ͱ B(x) has the following lifting-property

  x:A ͱ B(x)
  ---------------------
  x:A y:B(x) ͱ y:B(x)
  -------------------------------
  x:A ͱ (λ y.y) : (B(x) -> B(x))

  p:Id_A(a,b), x:A ͱ (λ y.y) : (B(x) -> B(x))
  ----------------------------------------------??用到Id-elim嗎??
  p*:B(a)->B(b)

  A中的路p:Id_A(a,b)
  被舉到B空間族裏
  就成了兩個纖維B(a),B(b)之間的映射

  p*:B(a)->B(b)
  a^:B(a)
  -----------------
  p*(a^):B(b)

***** homotopy interpretation of type theory
  concrete:
  |-------------------+------+-----------------------------|
  | type              | <==> | space (homotopy type)       |
  |-------------------+------+-----------------------------|
  | term              | <==> | map                         |
  |-------------------+------+-----------------------------|
  | a:A               | <==> | point a:1->A (a map)        |
  |-------------------+------+-----------------------------|
  | p:Id_A(a,b)       | <==> | path p from a to b in A     |
  |-------------------+------+-----------------------------|
  | h:Id_(Id_A)(p,q)  | <==> | homotopy h from p to q in A |
  |-------------------+------+-----------------------------|
  | dependent type    | <==> | fibration                   |
  | x:A ͱ B(x)        |      | map:B -> A                  |
  |-------------------+------+-----------------------------|
  | identity type     | <==> | fibration                   |
  | x,y:A ͱ Id_A(x,y) |      | map:Id_A -> (A x A)         |
  |-------------------+------+-----------------------------|

  >< abstract:
  even better
  we have abstract axiomatic description
  via Quillen model categories
  only need weak factorization system of it

  沒有範疇論的基礎weak factorization system我還沒法理解
  只知道weak factorization system與上面的四個推理規則完全契合
