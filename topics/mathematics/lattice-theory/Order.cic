class PreOrder {
  Element: Type
  Below: (Element, Element) -> Type
  reflexive: (x: Element) -> Below(x, x)

  @given x, y, z: Element
  transitive: (Below(x, y), Below(y, z)) -> Below(x, z)
}

class Order extends PreOrder {
  @given x, y: Element
  antisymmetric: (Below(x, y), Below(y, x)) -> Equal(x, y)
}

class TotalOrder extends Order {
  totality: (x, y: Element) -> Either(Below(x, y), Below(y, x))
}
