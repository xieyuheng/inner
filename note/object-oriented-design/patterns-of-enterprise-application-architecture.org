#+title: Patterns of Enterprise Application Architecture
#+author: Martin Fowler
#+date: 2003

* Preface

** What is Enterprise application?

Enterprise applications are about
the display, manipulation, and storage
of large amounts of often complex data
and the support or automation
of business processes with that data.

** What is iterative development?

At the heart of iterative development
is the notion that you should deliver software
as soon as you have something useful to the user,
even if it's not complete.

* Introduction

** What are examples of Enterprise applications?

- payroll
- patient records
- shipping tracking
- cost analysis
- credit scoring
- insurance
- supply chain
- accounting
- customer service
- foreign exchange trading

** What are NOT examples of Enterprise applications?

- automobile fuel injection
- word processors
- elevator controllers
- chemical plant controllers
- telephone switches
- operating systems
- compilers
- games

** About Enterprise applications

Enterprise applications usually involve {persistent} data.

Usually many people {access} data {concurrently}.

Usually they need to {integrate} with other enterprise applications scattered around the enterprise.

If meanings of data are not well managed, as it changes,
we will run into problems of {conceptual dissonance} with the data.

{Differences in business process} will bring conceptual dissonance to the data.

One of the best things you can do to a large system is turn it into a small one
by {simplifying its architecture and process}.

* Chapter 3: Mapping to Relational Databases

** Row Data Gateway

- to be used with [Transaction Scripts]
- one instance per row
- without domain logic

** Table Data Gateway

- to be used with [Transaction Scripts]
- one instance per table
- without domain logic
- return logic-less record

** Active Record

- [Row Data Gateway] with domain logic -- to dry or replace [Transaction Scripts]
- The one-to-one match of domain classes to tables starts to fail as you factor domain logic into smaller classes.

** Data Mapper

- like [Table Data Gateway] but with only simple methods -- such as `create`, `load` and `save`

** Unit of Work

- TODO

** Identity Map

As you load objects, you have to be wary about loading the same one twice.
If you do that, you’ll have two in-memory objects that correspond to a single
database row. Update them both, and everything gets very confusing.

To deal with this you need to keep a record of every row you read in an Identity Map (195).
Each time you read in some data, you check the Identity Map (195) first
to make sure that you don’t already have it.
If the data is already loaded, you can return a second reference to it.

As a benefit you may also be able to avoid a database call since the
Identity Map (195) also doubles as a cache for the database.

Don’t forget, however, that the primary purpose of an Identity Map (195)
is to maintain correct identities, not to boost performance.

* Chapter 10: Data Source Architectural Patterns

** Table Data Gateway

** Row Data Gateway

** Active Record

** Data Mapper
