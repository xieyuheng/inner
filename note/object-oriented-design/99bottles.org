#+title: 99 bottles
#+author: Sandi Marts
#+date: 2021

* 1. Rediscovering Simplicity

Write Shameless Green code first.
- TDD will teach us how to do this.
- abstraction should be guided by new requirements, keep it simple when there is no new requirements
- new design with new abstraction should achieved by refactoring

ABC Metric -- Assignments, Branches and Conditions,
is a good quantitative measure of code quality.

Questions about cost and value of code:
1. How difficult was it to write? (past)
2. How hard is it to understand? (now)
3. How expensive will it be to change? (future)

Among the above (now) is the most import question.

Beside the above, domain questions is another important kind of questions.
- Which is about understanding.

* 2. Test Driving Shameless Green

Getting green first, Shameless Green maximum understandability
but is generally unconcerned with changeability.

Because we'd better achieve understandability and changeability in steps.

To achieve understandability and changeability,
we, little by little, separate the things that change
from the things that remain the same.

Like reversing the distribution of multiplication over addition:

x * y + x * z => x * (y + z)

Delay abstraction, wait for more information.
It's better to tolerate duplication
than to anticipate the wrong abstraction.

Ask the following questions, before making an abstraction:

1. Does the change Iâ€™m contemplating make the code harder to understand?
2. What is the future cost of doing nothing now?
3. When will the future arrive, or how soon will I get more information?

- During the search for Shameless Green,
  We should tolerate what kind of duplication?

  When it isolates a new independent example,
  for which the underlying abstraction is not clear yet.

- And, we should not tolerate what kind of duplication?

  Those kind of duplication that blurs the responsibility.

- When should we jump over the small steps of TDD?

  Never.

  Because you do not always know what is actually right.
