* dependent type

  - dependent type system 模糊了計算於類型檢查的界限
    比如
    給 joy 加類型系統
    類型檢查如計算
    設想
    給 minikanren 加類型系統
    計算和類型檢查都是以 unification 實現
    並且都可帶有不定元
    這種一致性纔是上策

* 實驗實現方式

  - 我可以實驗各種實現方式
    而不是把語言嵌入在 scheme 中
    比如
    1. 另寫解釋器
    2. 另設計 VM
    3. 寄生在有 GC 的語言中

  - 把 minikanren 嵌入在 scheme 其實造成了命名的負擔
    因爲語義有重載
    命名需要在詞尾加 o [就像拉丁語的曲折變化]

  - 我還可以 簡化實現方式
    我記得
    在 scheme 中實現 minikanren 的時候
    需要一些特殊的使用 lambda 的技巧
    好像主要是爲了 lazy-list

  - 我還發現很多謂詞[融合子]常常想要被當作函數使用
    此時只能用局部變元來融合計算結果 [所謂 unnested]
    這樣就浪費了命名
    但是想要表達如此多的信息 並無它法
