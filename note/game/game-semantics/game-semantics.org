#+title: game semantic

* [note]

*** type as game

    - type == proposition == game of argument between defender and prosecutor

    - object [or function] == proof == winning strategy of defender
      - the prosecutor is allowed to replay the game
        and attack in all the ways
      - true proposition can endure all attacks

    - for propositional logic
      we reduce cards on both side
      and at the end, compare cards of both side

      this is a game
      because it involves choices of both players
      when dealing with disjunction

    - if we view disjunction as sum of game
      we can say
      proof == a winning play of defender

      - x -
        the "sum of game" is not disjunctive sum of normal play game
        because we are using cards to calculate winning

*** 遊戲語義

    - 這段學習的目的是要探究
      一個邏輯命題如何被視爲一個遊戲

    - 正如在嘗試證明一個命題的時候
      需要先仔細地研究其前提
      爲了回答這個問題我們首先要明確 什麼是邏輯命題

    - 這裏的 邏輯命題 指的是數學中的邏輯命題
      邏輯命題是表述數學領域的成果的形式
      數學領域所研究的是計算
      - 計算 包括 分類處理 轉寫 以及遞歸
      而其研究成果所描述的是人們關於計算的 信念 [belief]
      這些 信念 使得我們可以預測計算的結果的各種性質

    - 或者說
      數學領域所研究的是函數
      表達數學領域研究成果的是類型
      - 蝉语为伪码 [cicada as pseudocode]

    - 也就是說
      一個邏輯命題如何被視爲一個遊戲
      這個問題
      被轉化爲
      如何利用遊戲來實現一個程序語言的類型系統
      利用遊戲的術語來豐富 人們對 類型系統 的理解

*** 等詞

    - 等詞有三類

      - 基本等詞
        帶有不定元的物之間的融合 [unification]

      - 函數等詞
        兩函數相等 被定義對相同的輸入 有相同的輸出
        需要分解輸入類型之後 利用基本等詞來完成證明

      - 高階等詞
        複形中的高階元素

*** 子類型關係

    - 一個函數若可接受某個子類型關係中的父類型
      這個函數就也可接受這個子類型關係中的子類型

    - 子類型關係有兩種

      - disj
        拿到 disj 式的父類型爲輸入時 可以分類處理

      - heir
        一個 heir 式的父類型並不知道自己有哪些子類型

* (2019) (xie yuheng) investigations into game semantics of logic

  - proposition as game, proof as winning strategy

*** a formal language for designing games

*** disjunction and conjunction

*** dependency, forall and exists

*** note about curry-howard correspondence (chiso)

    - type as proposition, object and function as proof

*** higher order logic games

    - topological interpretation of type system

    - boundary as type, topological space as object or function

* (kuno lorenz)

* (1965) (paul lorenzen) formal logic

* (1979) (jaakko hintikka) game-theoretical semantics

*** [note]

    - more on the use of game-theoretical semantics
      on natural language

* (1985) (jaakko hintikka) anaphora and definite descriptions

* (1996) (jaakko hintikka) the principles of mathematics revisited

*** 1 The Functions of Logic and the Problem of Truth Definition

    - Uninterpreted nonlogical axiom systems might be thought of as
      pertaining to certain structures as such,
      while the corresponding interpreted systems
      deal with the actual instantiations of these structures.

      - interpreted:
        thermodynamics
        geometry

      - uninterpreted:
        group theory
        field theory
        lattice theory

    - x -
      this is the difference between class and object

      but is Hilbert's "Foundations of Geometry" a class or an object?
      - it is said to be a nonlogical axiom system by the author.

      maybe we should think of it as being
      directly constructing an object without abstracting it to a class

    - two functions of logic

      - descriptive function
        -- an unambiguous language
        -- model theory or logical semantics

      - deductive function
        -- fixation of beliefs
        -- proof theory

    - x -
      Tarski's model theory dependents on set theory
      how about game semantics?

    - x -
      what is an interpretation?
      - an object instantiating a class?
      - or an morphism from one class to another?

    - critics of Tarski's truth-conditional semantics
      https://plato.stanford.edu/entries/tarski-truth/
      in favor of verificationist semantics
      https://en.wikipedia.org/wiki/Verificationism

*** 2 The Game of Logic

    - x -
      the choice of falsifier lies in "forall"
      which is a dependent arrow type in our language

    - game rule of FOL

      - with a model
        this means
        atomic sentences are interpreted to true or false

      - with quantifier with typed domains

      - instead of explicit semantics mapping
        I simply view a sentence as a game

      - L is verifier, R is falsifier

***** or

      #+begin_src cicada
      S1 or S2

      L_choices (S1 or S2) = [
        "first of or",
        "second of or",
      ]

      L_move ("first of or", S1 or S2) = S1
      L_move ("second of or", S1 or S2) = S2
      #+end_src

***** and

      #+begin_src cicada
      S1 and S2

      R_choices (S1 and S2) = [
        "first of and",
        "second of and",
      ]

      R_move ("first of and", S1 and S2) = S1
      R_move ("second of and", S1 and S2) = S2
      #+end_src

***** exists

      #+begin_src cicada
      exists (x : N) S (x)

      L_choices (exists (x : N) S (x)) = [
        // list of all elements of N
      ]

      L_move (b, exists (x : N) S (x)) = S (b)
      #+end_src

***** forall

      #+begin_src cicada
      forall (x : N) S (x)

      R_choices (forall (x : N) S (x)) = [
        // list of all elements of N
      ]

      R_move (b, forall (x : N) S (x)) = S (b)
      #+end_src

***** not

      not S is a new game
      S -- where the role of verifier and falsifier are switched

      - if we were to allow interpreting negation like this
        it means a sentences or a type must be modeled as a game
        instead of a position of a game
        for we a position does not contain
        the information about players

      - we might also add a sign to position
        and use this sign and the game type
        to decide which player is to make move

***** atomic sentence

      A is true -- verifier win
      A is false -- falsifier win

*** object introduced by falsifier can be used by the verifier

    - how should we understand the following:

      in game semantics of FOL
      once the game moves beyond a "forall"
      substitution happens to the succedent type

      it is also the case in our language
      but it happens in the type

      but what happens in the function body
      is different from FOL

      in the function body
      once the falsifier made his choose on a "forall"
      this is recorded by an object of the antecedent type
      and the object can be used by the verifier
      to construct a return value of the succedent type

*** falsifier indeed has meaningful choices

    - it might be clear that
      falsifier indeed has meaningful choices
      in conjunctions

      if we write all "exists" explicitly
      hence enforcing an order on how the game ought to be played

      - which means before the argument-subgame
        in "exists" is played out
        we can not play the body-subgame of "exists"

      in this view, in the following game
      there will no longer be any seemingly contradictory

      #+begin_src cicada
      exists (x : N) even_t (x) and odd_t (x)
      #+end_src

      it means, to view a conjunctions as a game,
      further analysis of the conjunction,
      by means of quantifiers like "exists", is needed

      #+begin_src cicada
      conj {
        x : N
        even : even_t (x)
        odd : odd_t (x)
      }
      #+end_src

    - x -
      it seems game semantics is specially applicable
      for defining the semantics of quantifiers

*** about logic variables

    - a logic variable is an implicit argument

    - is it true that
      every implicit argument can be made explicit?

      - even in the case of antecedent subgame of arrow?

*** about truth

    - x -
      the author worries about that
      game semantics did not capture the concept of truth

      this can be released by viewing "truth" as "to be sure"
      i.e. winning strategy

      a player is sure about herself when playing a game
      if she has a winning strategy

*** about constructive-ness

    - if game semantics can handle negation
      is game semantics constructive?
      what is constructive-ness?

    - or why in game semantics,
      we can simply handle negation by switching players?

      maybe this do not hurt constructive-ness
      because if falsifier indeed has a winning strategy
      it will can be viewed a function of type (P) -> void_t

    - also note that
      excluded middle does not hold in game semantics
      because not all game has winning strategy
      for one of its player

    - x -
      example of combinatorial games
      that do not have winning strategy for one of its player

*** fool's paradise

    - ordinary first-order logic is a fool's paradise in that
      it offers a poor and indeed misleading sample of
      the variety of things that can happen in logic in general.

*** 3 Frege's Fallacy Foiled: Independence-Friendly Logic

* (shahid rahman)

* (walter felscher) dialogues as a foundation for intuitionistic logic

  - x -
    作者把邏輯命題視爲遊戲的方式我並不滿意
    其遊戲規則模擬了對話體論戰
    而我想要用類似二人撲克的遊戲規則

    想用撲克是因爲 player 的多種 choices
    並不來源於一個 quantifier

    但是實用一般的 quantifier theory 之後應該可以免除這種情況
