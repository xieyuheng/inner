#+title: net

* *links*

  - standard library
    http://docs.python.org/3/library/

  - tutorial
    https://docs.python.org/3/tutorial/

  - full stack python
    https://www.fullstackpython.com/

  - sicp in pyhton
    http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/
    https://wizardforcel.gitbooks.io/sicp-in-python/content/1.html

  - python 3 module of the week
    https://pymotw.com/3/

  - python package index
    https://pypi.python.org/

* unix network programming -- volume 1 -- the sockets networking api
* tcp/ip illustrated, volume 1: the protocols
* beej's guide to network programming -- using internet sockets

*** 5. system calls or bust

***** 5.1. getaddrinfo()—Prepare to launch!

      #+begin_src c
      #include <sys/types.h>
      #include <sys/socket.h>
      #include <netdb.h>

      int getaddrinfo(const char *node,     // e.g. "www.example.com" or IP
                      const char *service,  // e.g. "http" or port number
                      const struct addrinfo *hints,
                      struct addrinfo **res);


      struct addrinfo {
        int              ai_flags;     // AI_PASSIVE, AI_CANONNAME, etc.
        int              ai_family;    // AF_INET, AF_INET6, AF_UNSPEC
        int              ai_socktype;  // SOCK_STREAM, SOCK_DGRAM
        int              ai_protocol;  // use 0 for "any"
        size_t           ai_addrlen;   // size of ai_addr in bytes
        struct sockaddr *ai_addr;      // struct sockaddr_in or _in6
        char            *ai_canonname; // full canonical hostname

        struct addrinfo *ai_next;      // linked list, next node
      };


      struct sockaddr {
        unsigned short    sa_family;    // address family, AF_xxx
        char              sa_data[14];  // 14 bytes of protocol address
      };
      #+end_src

      - example :
        server listen on host's IP address, port 3490.

      #+begin_src c
      int status;
      struct addrinfo hints;
      struct addrinfo *servinfo;  // will point to the results

      memset(&hints, 0, sizeof hints); // make sure the struct is empty
      hints.ai_family = AF_UNSPEC;     // don't care IPv4 or IPv6
      hints.ai_socktype = SOCK_STREAM; // TCP stream sockets
      hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

      if ((status = getaddrinfo(NULL, "3490", &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(status));
        exit(1);
       }

      // getaddrinfo() returns non-zero on error
      // print it out by gai_strerror(),

      // servinfo now points to a linked list of 1 or more struct addrinfos

      // ... do everything until you don't need servinfo anymore ....

      freeaddrinfo(servinfo); // free the linked-list
      #+end_src

      - example :
        client connect to a particular server,
        say "www.example.net"
        port 3490.

      #+begin_src c
      int status;
      struct addrinfo hints;
      struct addrinfo *servinfo;  // will point to the results

      memset(&hints, 0, sizeof hints); // make sure the struct is empty
      hints.ai_family = AF_UNSPEC;     // don't care IPv4 or IPv6
      hints.ai_socktype = SOCK_STREAM; // TCP stream sockets

      // get ready to connect
      status = getaddrinfo("www.example.net", "3490", &hints, &servinfo);

      // servinfo now points to a linked list of 1 or more struct addrinfos

      // etc.
      #+end_src

***** 5.2. socket()—Get the File Descriptor!

      #+begin_src c
      #include <sys/types.h>
      #include <sys/socket.h>

      int socket(int domain, int type, int protocol);
      #+end_src

      - example :

      #+begin_src c
      int s;
      struct addrinfo hints, *res;

      // do the lookup
      // [pretend we already filled out the "hints" struct]
      getaddrinfo("www.example.com", "http", &hints, &res);

      // [again, you should do error-checking on getaddrinfo(), and walk
      // the "res" linked list looking for valid entries instead of just
      // assuming the first one is good (like many of these examples do.)
      // See the section on client/server for real examples.]

      s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
      #+end_src

***** 5.3. bind()—What port am I on?

      #+begin_src c
      #include <sys/types.h>
      #include <sys/socket.h>

      int bind(int sockfd, struct sockaddr *my_addr, int addrlen);
      #+end_src

      - example :

      #+begin_src c
      struct addrinfo hints, *res;
      int sockfd;

      // first, load up address structs with getaddrinfo():

      memset(&hints, 0, sizeof hints);
      hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
      hints.ai_socktype = SOCK_STREAM;
      hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

      getaddrinfo(NULL, "3490", &hints, &res);

      // make a socket:

      sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

      // bind it to the port we passed in to getaddrinfo():

      bind(sockfd, res->ai_addr, res->ai_addrlen);
      #+end_src

***** 5.4. connect()—Hey, you!

      #+begin_src c
      #include <sys/types.h>
      #include <sys/socket.h>

      int connect(int sockfd, struct sockaddr *serv_addr, int addrlen);
      #+end_src

      - example :
        make a socket connection to "www.example.com", port 3490

      #+begin_src c
      struct addrinfo hints, *res;
      int sockfd;

      // first, load up address structs with getaddrinfo():

      memset(&hints, 0, sizeof hints);
      hints.ai_family = AF_UNSPEC;
      hints.ai_socktype = SOCK_STREAM;

      getaddrinfo("www.example.com", "3490", &hints, &res);

      // make a socket:

      sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

      // connect!

      connect(sockfd, res->ai_addr, res->ai_addrlen);
      #+end_src

***** 5.5. listen()—Will somebody please call me?

      #+begin_src c
      int listen(int sockfd, int backlog);
      #+end_src

***** 5.6. accept()—"Thank you for calling port 3490."

      #+begin_src c
      #include <sys/types.h>
      #include <sys/socket.h>

      int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
      #+end_src

      - example :

      #+begin_src c
      #include <string.h>
      #include <sys/types.h>
      #include <sys/socket.h>
      #include <netinet/in.h>

      #define MYPORT "3490"  // the port users will be connecting to
      #define BACKLOG 10     // how many pending connections queue will hold

      int main(void) {
        struct sockaddr_storage their_addr;
        socklen_t addr_size;
        struct addrinfo hints, *res;
        int sockfd, new_fd;

        // !! don't forget your error checking for these calls !!

        // first, load up address structs with getaddrinfo():

        memset(&hints, 0, sizeof hints);
        hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
        hints.ai_socktype = SOCK_STREAM;
        hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

        getaddrinfo(NULL, MYPORT, &hints, &res);

        // make a socket, bind it, and listen on it:

        sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
        bind(sockfd, res->ai_addr, res->ai_addrlen);
        listen(sockfd, BACKLOG);

        // now accept an incoming connection:

        addr_size = sizeof their_addr;
        new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &addr_size);

        // ready to communicate on socket descriptor new_fd!
        // ...
      }
      #+end_src

***** 5.7. send() and recv()—Talk to me, baby!

***** 5.8. sendto() and recvfrom()—Talk to me, DGRAM-style

***** 5.9. close() and shutdown()—Get outta my face!

***** 5.10. getpeername()—Who are you?

***** 5.11. gethostname()—Who am I?

* foundations of python network programming

*** Chapter 1: Introduction to Client-Server Networking

*** Chapter 2: UDP

*** Chapter 3: TCP

*** Chapter 4: Socket Names and DNS

*** Chapter 5: Network Data and Network Errors

*** Chapter 6: TLS/SSL

*** Chapter 7: Server Architecture

*** Chapter 8: Caches and Message Queues

*** Chapter 9: HTTP Clients

*** Chapter 10: HTTP Servers

*** Chapter 11: The World Wide Web

*** Chapter 12: Building and Parsing E-Mail

*** Chapter 13: SMTP

*** Chapter 14: POP

*** Chapter 15: IMAP

*** Chapter 16: Telnet and SSH

*** Chapter 17: FTP

*** Chapter 18: RPC
